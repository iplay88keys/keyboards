
gh60_lufa.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  000054a0  00005534  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000054a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000bf  00800138  00800138  0000556c  2**0
                  ALLOC
  3 .noinit       00000004  008001f7  008001f7  0000556c  2**0
                  ALLOC
  4 .stab         000008b8  00000000  00000000  0000556c  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000073  00000000  00000000  00005e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00005e97  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005ea8  2**2
                  CONTENTS, READONLY
  8 .debug_aranges 00000948  00000000  00000000  00005ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000fbc1  00000000  00000000  00006830  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003b61  00000000  00000000  000163f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00004f80  00000000  00000000  00019f52  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000019f4  00000000  00000000  0001eed4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003eaa  00000000  00000000  000208c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00007cef  00000000  00000000  00024772  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a28  00000000  00000000  0002c461  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
       0:	0c 94 7d 06 	jmp	0xcfa	; 0xcfa <__ctors_end>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
       4:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__bad_interrupt>
       8:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__bad_interrupt>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
       c:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__bad_interrupt>
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
      10:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__bad_interrupt>
      14:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__bad_interrupt>
      18:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__bad_interrupt>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
      1c:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__bad_interrupt>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
      20:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__bad_interrupt>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
      24:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__bad_interrupt>
	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
	  USB_Device_ProcessControlRequest();
      28:	0c 94 eb 0d 	jmp	0x1bd6	; 0x1bd6 <__vector_10>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
      2c:	0c 94 bd 0e 	jmp	0x1d7a	; 0x1d7a <__vector_11>
      30:	0c 94 26 1d 	jmp	0x3a4c	; 0x3a4c <__vector_12>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
      34:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__bad_interrupt>
      38:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__bad_interrupt>
      3c:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__bad_interrupt>
      40:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__bad_interrupt>
      44:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__bad_interrupt>
      48:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__bad_interrupt>
      4c:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__bad_interrupt>
      50:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__bad_interrupt>
      54:	0c 94 9a 1d 	jmp	0x3b34	; 0x3b34 <__vector_21>
      58:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__bad_interrupt>
      5c:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__bad_interrupt>
      60:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__bad_interrupt>
      64:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__bad_interrupt>
      68:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__bad_interrupt>
      6c:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__bad_interrupt>
      70:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__bad_interrupt>
      74:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__bad_interrupt>
      78:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__bad_interrupt>
      7c:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__bad_interrupt>
      80:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__bad_interrupt>
      84:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__bad_interrupt>
      88:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__bad_interrupt>
      8c:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__bad_interrupt>
      90:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__bad_interrupt>
      94:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__bad_interrupt>
      98:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__bad_interrupt>
      9c:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__bad_interrupt>
      a0:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__bad_interrupt>
      a4:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__bad_interrupt>
      a8:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__bad_interrupt>
      ac:	2a 0f       	add	r18, r26
      ae:	4c 0f       	add	r20, r28
      b0:	3a 10       	cpse	r3, r10
      b2:	4c 0f       	add	r20, r28
      b4:	3a 10       	cpse	r3, r10
      b6:	91 0f       	add	r25, r17
      b8:	b4 0f       	add	r27, r20
      ba:	3a 10       	cpse	r3, r10
      bc:	09 10       	cpse	r0, r9
      be:	1c 10       	cpse	r1, r12
      c0:	8e 13       	cpse	r24, r30
      c2:	8e 13       	cpse	r24, r30
      c4:	bb 13       	cpse	r27, r27
      c6:	bb 13       	cpse	r27, r27
      c8:	16 14       	cp	r1, r6
      ca:	52 14       	cp	r5, r2
      cc:	4a 16       	cp	r4, r26
      ce:	4a 16       	cp	r4, r26
      d0:	6a 14       	cp	r6, r10
      d2:	4a 16       	cp	r4, r26
      d4:	65 15       	cp	r22, r5
      d6:	65 15       	cp	r22, r5
      d8:	20 16       	cp	r2, r16
      da:	4a 16       	cp	r4, r26
      dc:	4a 16       	cp	r4, r26
      de:	36 16       	cp	r3, r22

000000e0 <__trampolines_end>:
      e0:	01 12       	cpse	r0, r17
      e2:	02 12       	cpse	r0, r18
      e4:	01 e1       	ldi	r16, 0x11	; 17
      e6:	01 0c       	add	r0, r1
      e8:	02 0c       	add	r0, r2
      ea:	02 e1       	ldi	r16, 0x12	; 18
      ec:	01 17       	cp	r16, r17
      ee:	02 17       	cp	r16, r18
      f0:	01 2c       	mov	r0, r1
      f2:	02 2c       	mov	r0, r2
      f4:	01 29       	or	r16, r1
      f6:	02 29       	or	r16, r2
      f8:	00 01       	movw	r0, r0

000000f9 <__m.4694>:
      f9:	01 12 02 12 01 e1 01 06 02 06 02 e1 01 12 02 12     ................
     109:	01 11 02 11 01 17 02 17 01 08 02 08 01 1b 02 1b     ................
     119:	01 17 02 17 01 2c 02 2c 01 29 02 29 00              .....,.,.).).

00000126 <__m.4691>:
     126:	01 12 02 12 01 e1 01 07 02 07 02 e1 01 08 02 08     ................
     136:	01 16 02 16 01 06 02 06 01 15 02 15 01 0c 02 0c     ................
     146:	01 05 02 05 01 08 02 08 01 2c 02 2c 01 29 02 29     .........,.,.).)
     156:	00                                                  .

00000157 <__m.4688>:
     157:	01 0a 02 0a 01 0c 02 0c 01 11 02 11 01 0e 02 0e     ................
     167:	01 0a 02 0a 01 12 02 12 01 2c 02 2c 01 2d 02 2d     .........,.,.-.-
     177:	01 15 02 15 01 2c 02 2c 01 2d 02 2d 01 15 02 15     .....,.,.-.-....
     187:	01 04 02 04 01 06 02 06 01 08 02 08 01 2c 02 2c     .............,.,
     197:	01 2d 02 2d 01 18 02 18 01 11 02 11 01 17 02 17     .-.-............
     1a7:	01 0c 02 0c 01 0f 02 0f 01 e1 01 0c 02 0c 02 e1     ................
     1b7:	01 17 02 17 01 e1 01 09 02 09 02 e1 01 04 02 04     ................
     1c7:	01 0c 02 0c 01 0f 02 0f 01 16 02 16 01 2c 02 2c     .............,.,
     1d7:	01 2d 02 2d 01 15 02 15 01 04 02 04 01 11 02 11     .-.-............
     1e7:	01 07 02 07 01 12 02 12 01 10 02 10 01 0c 02 0c     ................
     1f7:	01 1d 02 1d 01 08 02 08 01 e1 01 04 02 04 02 e1     ................
     207:	01 0f 02 0f 01 0f 02 0f 01 e1 01 16 02 16 02 e1     ................
     217:	01 13 02 13 01 08 02 08 01 06 02 06 01 16 02 16     ................
     227:	01 28 02 28 00                                      .(.(.

0000022c <fn_actions>:
     22c:	01 8a 02 8a 04 8a 08 8a 00 c0 01 c0 02 c0 03 c0     ................

0000023c <keymaps>:
     23c:	29 67 54 55 56 00 24 25 26 57 c3 21 22 23 00 c2     )gTUV.$%&W.!"#..
     24c:	1e 1f 20 58 c1 27 00 63 00 c1 ab ac b0 00 a9 f4     .. X.'.c........
     25c:	f0 f5 00 aa f2 f1 f3 00 a8 f9 fb fa 00 00 00 00     ................
     26c:	00 00 c2 29 00 00 00 00 1c 52 13 00 00 50 51 4f     ...).....R...PQO
     27c:	00 00 00 00 00 58 00 00 00 00 00 c3 c4 c5 c6 c7     .....X..........
     28c:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     29c:	00 00 00 00                                         ....

000002a0 <__c.1942>:
     2a0:	0a 00                                               ..

000002a2 <__c.1940>:
     2a2:	25 30 31 36 62 00                                   %016b.

000002a8 <__c.1938>:
     2a8:	3a 20 00                                            : .

000002ab <__c.1936>:
     2ab:	25 30 32 58 00                                      %02X.

000002b0 <__c.1933>:
     2b0:	0a 72 2f 63 20 30 31 32 33 34 35 36 37 38 39 41     .r/c 0123456789A
     2c0:	42 43 44 45 46 0a 00                                BCDEF..

000002c7 <__c.1911>:
     2c7:	0a 00                                               ..

000002c9 <__c.1909>:
     2c9:	25 30 32 58 00                                      %02X.

000002ce <__c.1907>:
     2ce:	62 6f 75 6e 63 65 21 3a 20 00                       bounce!: .

000002d8 <__c.4833>:
     2d8:	5b 73 5d 00                                         [s].

000002dc <__c.4831>:
     2dc:	4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 2e 0a     Keyboard start..
     2ec:	00                                                  .

000002ed <__c.4829>:
     2ed:	55 53 42 20 63 6f 6e 66 69 67 75 72 65 64 2e 0a     USB configured..
     2fd:	00                                                  .

000002fe <__c.4727>:
     2fe:	5b 57 5d 00                                         [W].

00000302 <__c.4723>:
     302:	5b 53 5d 00                                         [S].

00000306 <__c.4719>:
     306:	5b 52 5d 00                                         [R].

0000030a <__c.4714>:
     30a:	5b 44 5d 00                                         [D].

0000030e <__c.4709>:
     30e:	5b 43 5d 00                                         [C].

00000312 <ProductString>:
     312:	0a 03 47 00 48 00 36 00 30 00 00 00                 ..G.H.6.0...

0000031e <ManufacturerString>:
     31e:	12 03 67 00 65 00 65 00 6b 00 68 00 61 00 63 00     ..g.e.e.k.h.a.c.
     32e:	6b 00 00 00                                         k...

00000332 <LanguageString>:
     332:	04 03 09 04                                         ....

00000336 <ConfigurationDescriptor>:
     336:	09 02 8d 00 05 01 00 a0 32 09 04 00 00 01 03 01     ........2.......
     346:	01 00 09 21 11 01 00 01 22 40 00 07 05 81 03 08     ...!...."@......
     356:	00 0a 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
     366:	01 22 4d 00 07 05 82 03 08 00 0a 09 04 02 00 01     ."M.............
     376:	03 00 00 00 09 21 11 01 00 01 22 36 00 07 05 83     .....!...."6....
     386:	03 08 00 0a 09 04 03 00 02 03 00 00 00 09 21 11     ..............!.
     396:	01 00 01 22 22 00 07 05 84 03 20 00 01 07 05 04     ...""..... .....
     3a6:	03 20 00 01 09 04 04 00 01 03 00 00 00 09 21 11     . ............!.
     3b6:	01 00 01 22 39 00 07 05 85 03 20 00 01              ..."9..... ..

000003c3 <DeviceDescriptor>:
     3c3:	12 01 10 01 00 00 00 08 ed fe 60 60 01 00 01 02     ..........``....
     3d3:	00 01                                               ..

000003d5 <NKROReport>:
     3d5:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     3e5:	95 08 75 01 81 02 05 08 19 01 29 05 95 05 75 01     ..u.......)...u.
     3f5:	91 02 95 01 75 03 91 01 05 07 19 00 29 f7 15 00     ....u.......)...
     405:	25 01 95 f8 75 01 81 02 c0                          %...u....

0000040e <ConsoleReport>:
     40e:	06 31 ff 09 74 a1 01 09 75 15 00 26 ff 00 95 20     .1..t...u..&... 
     41e:	75 08 81 02 09 76 15 00 26 ff 00 95 20 75 08 91     u....v..&... u..
     42e:	02 c0                                               ..

00000430 <ExtrakeyReport>:
     430:	05 01 09 80 a1 01 85 02 16 81 00 26 b7 00 1a 81     ...........&....
     440:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
     450:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u
     460:	10 95 01 81 00 c0                                   ......

00000466 <MouseReport>:
     466:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 05     ..............).
     476:	15 00 25 01 95 05 75 01 81 02 95 01 75 03 81 01     ..%...u.....u...
     486:	05 01 09 30 09 31 15 81 25 7f 95 02 75 08 81 06     ...0.1..%...u...
     496:	09 38 15 81 25 7f 95 01 75 08 81 06 05 0c 0a 38     .8..%...u......8
     4a6:	02 15 81 25 7f 95 01 75 08 81 06 c0 c0              ...%...u.....

000004b3 <KeyboardReport>:
     4b3:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     4c3:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
     4d3:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
     4e3:	19 00 29 ff 15 00 26 ff 00 95 06 75 08 81 00 c0     ..)...&....u....

000004f3 <__c.4447>:
     4f3:	0a 00                                               ..

000004f5 <__c.4442>:
     4f5:	25 30 32 58 20 00                                   %02X .

000004fb <__c.4439>:
     4fb:	6b 65 79 62 6f 61 72 64 5f 72 65 70 6f 72 74 3a     keyboard_report:
     50b:	20 00                                                .

0000050d <__c.4802>:
     50d:	4c 45 44 3a 20 25 30 32 58 0a 00                    LED: %02X..

00000518 <__c.4587>:
     518:	64 65 6c 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     del_key_bit: can
     528:	27 74 20 64 65 6c 3a 20 25 30 32 58 0a 00           't del: %02X..

00000536 <__c.4582>:
     536:	61 64 64 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     add_key_bit: can
     546:	27 74 20 61 64 64 3a 20 25 30 32 58 0a 00           't add: %02X..

00000554 <__c.4751>:
     554:	64 6f 6e 65 2e 0a 00                                done...

0000055b <__c.4745>:
     55b:	62 6f 6f 74 6d 61 67 69 63 20 73 63 61 6e 3a 20     bootmagic scan: 
     56b:	2e 2e 2e 20 00                                      ... .

00000570 <__c.4519>:
     570:	29 0a 00                                            )..

00000573 <__c.4517>:
     573:	25 75 00                                            %u.

00000576 <__c.4515>:
     576:	2f 00                                               /.

00000578 <__c.4513>:
     578:	25 75 00                                            %u.

0000057b <__c.4511>:
     57b:	5d 28 00                                            ](.

0000057e <__c.4509>:
     57e:	25 64 00                                            %d.

00000581 <__c.4507>:
     581:	20 00                                                .

00000583 <__c.4505>:
     583:	25 64 00                                            %d.

00000586 <__c.4503>:
     586:	20 00                                                .

00000588 <__c.4501>:
     588:	25 64 00                                            %d.

0000058b <__c.4499>:
     58b:	20 00                                                .

0000058d <__c.4497>:
     58d:	25 64 00                                            %d.

00000590 <__c.4495>:
     590:	7c 00                                               |.

00000592 <__c.4493>:
     592:	25 30 32 58 00                                      %02X.

00000597 <__c.4491>:
     597:	6d 6f 75 73 65 6b 65 79 20 5b 62 74 6e 7c 78 20     mousekey [btn|x 
     5a7:	79 20 76 20 68 5d 28 72 65 70 2f 61 63 6c 29 3a     y v h](rep/acl):
     5b7:	20 5b 00                                             [.

000005ba <__c.5116>:
     5ba:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     5ca:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

000005d5 <__c.5113>:
     5d5:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     5e5:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

000005ee <__c.5110>:
     5ee:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     5fe:	20 25 64 0a 00                                       %d..

00000603 <__c.5107>:
     603:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     613:	64 0a 00                                            d..

00000616 <__c.5104>:
     616:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     626:	0a 00                                               ..

00000628 <__c.5100>:
     628:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

00000637 <__c.5093>:
     637:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     647:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

00000652 <__c.5090>:
     652:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     662:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

0000066b <__c.5087>:
     66b:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     67b:	20 25 64 0a 00                                       %d..

00000680 <__c.5084>:
     680:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     690:	64 0a 00                                            d..

00000693 <__c.5081>:
     693:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     6a3:	0a 00                                               ..

000006a5 <__c.5077>:
     6a5:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

000006b4 <__c.5070>:
     6b4:	0a 00                                               ..

000006b6 <__c.5068>:
     6b6:	25 75 00                                            %u.

000006b9 <__c.5066>:
     6b9:	36 3a 20 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     6: wheel_time_to
     6c9:	5f 6d 61 78 3a 20 00                                _max: .

000006d0 <__c.5064>:
     6d0:	0a 00                                               ..

000006d2 <__c.5062>:
     6d2:	25 75 00                                            %u.

000006d5 <__c.5060>:
     6d5:	35 3a 20 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     5: wheel_max_spe
     6e5:	65 64 3a 20 00                                      ed: .

000006ea <__c.5058>:
     6ea:	0a 00                                               ..

000006ec <__c.5056>:
     6ec:	25 75 00                                            %u.

000006ef <__c.5054>:
     6ef:	34 3a 20 74 69 6d 65 5f 74 6f 5f 6d 61 78 3a 20     4: time_to_max: 
     6ff:	00                                                  .

00000700 <__c.5052>:
     700:	0a 00                                               ..

00000702 <__c.5050>:
     702:	25 75 00                                            %u.

00000705 <__c.5048>:
     705:	33 3a 20 6d 61 78 5f 73 70 65 65 64 3a 20 00        3: max_speed: .

00000714 <__c.5046>:
     714:	0a 00                                               ..

00000716 <__c.5044>:
     716:	25 75 00                                            %u.

00000719 <__c.5042>:
     719:	32 3a 20 69 6e 74 65 72 76 61 6c 28 6d 73 29 3a     2: interval(ms):
     729:	20 00                                                .

0000072b <__c.5040>:
     72b:	0a 00                                               ..

0000072d <__c.5038>:
     72d:	25 75 00                                            %u.

00000730 <__c.5036>:
     730:	31 3a 20 64 65 6c 61 79 28 2a 31 30 6d 73 29 3a     1: delay(*10ms):
     740:	20 00                                                .

00000742 <__c.5034>:
     742:	0a 09 2d 20 56 61 6c 75 65 73 20 2d 0a 00           ..- Values -..

00000750 <__c.5154>:
     750:	4d 3e 00                                            M>.

00000753 <__c.5152>:
     753:	4d 25 64 3e 20 00                                   M%d> .

00000759 <__c.5150>:
     759:	3f 00                                               ?.

0000075b <__c.5147>:
     75b:	73 65 74 20 64 65 66 61 75 6c 74 0a 00              set default..

00000768 <__c.5133>:
     768:	43 3e 20 00                                         C> .

0000076c <__c.5123>:
     76c:	77 68 65 72 65 20 64 65 6c 74 61 3a 20 63 75 72     where delta: cur
     77c:	73 6f 72 3d 25 64 2c 20 77 68 65 65 6c 3d 25 64     sor=%d, wheel=%d
     78c:	0a 53 65 65 20 68 74 74 70 3a 2f 2f 65 6e 2e 77     .See http://en.w
     79c:	69 6b 69 70 65 64 69 61 2e 6f 72 67 2f 77 69 6b     ikipedia.org/wik
     7ac:	69 2f 4d 6f 75 73 65 5f 6b 65 79 73 0a 00           i/Mouse_keys..

000007ba <__c.5121>:
     7ba:	0a 09 2d 20 4d 6f 75 73 65 6b 65 79 20 2d 0a 45     ..- Mousekey -.E
     7ca:	53 43 2f 71 3a 09 71 75 69 74 0a 31 3a 09 64 65     SC/q:.quit.1:.de
     7da:	6c 61 79 28 2a 31 30 6d 73 29 0a 32 3a 09 69 6e     lay(*10ms).2:.in
     7ea:	74 65 72 76 61 6c 28 6d 73 29 0a 33 3a 09 6d 61     terval(ms).3:.ma
     7fa:	78 5f 73 70 65 65 64 0a 34 3a 09 74 69 6d 65 5f     x_speed.4:.time_
     80a:	74 6f 5f 6d 61 78 0a 35 3a 09 77 68 65 65 6c 5f     to_max.5:.wheel_
     81a:	6d 61 78 5f 73 70 65 65 64 0a 36 3a 09 77 68 65     max_speed.6:.whe
     82a:	65 6c 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 0a 0a     el_time_to_max..
     83a:	70 3a 09 70 72 69 6e 74 20 76 61 6c 75 65 73 0a     p:.print values.
     84a:	64 3a 09 73 65 74 20 64 65 66 61 75 6c 74 73 0a     d:.set defaults.
     85a:	75 70 3a 09 2b 31 0a 64 6f 77 6e 3a 09 2d 31 0a     up:.+1.down:.-1.
     86a:	70 67 75 70 3a 09 2b 31 30 0a 70 67 64 6f 77 6e     pgup:.+10.pgdown
     87a:	3a 09 2d 31 30 0a 0a 73 70 65 65 64 20 3d 20 64     :.-10..speed = d
     88a:	65 6c 74 61 20 2a 20 6d 61 78 5f 73 70 65 65 64     elta * max_speed
     89a:	20 2a 20 28 72 65 70 65 61 74 20 2f 20 74 69 6d      * (repeat / tim
     8aa:	65 5f 74 6f 5f 6d 61 78 29 0a 00                    e_to_max)..

000008b5 <__c.5026>:
     8b5:	3f 00                                               ?.

000008b7 <__c.5023>:
     8b7:	4d 3e 20 00                                         M> .

000008bb <__c.5028>:
     8bb:	43 3e 20 00                                         C> .

000008bf <__c.5172>:
     8bf:	4c 25 64 0a 00                                      L%d..

000008c4 <__c.5012>:
     8c4:	0a 09 2d 20 43 6f 6e 73 6f 6c 65 20 2d 0a 45 53     ..- Console -.ES
     8d4:	43 2f 71 3a 09 71 75 69 74 0a 6d 3a 09 6d 6f 75     C/q:.quit.m:.mou
     8e4:	73 65 6b 65 79 0a 00                                sekey..

000008eb <__c.4837>:
     8eb:	0a 09 2d 20 4d 61 67 69 63 20 2d 0a 64 3a 09 64     ..- Magic -.d:.d
     8fb:	65 62 75 67 0a 78 3a 09 64 65 62 75 67 20 6d 61     ebug.x:.debug ma
     90b:	74 72 69 78 0a 6b 3a 09 64 65 62 75 67 20 6b 65     trix.k:.debug ke
     91b:	79 62 6f 61 72 64 0a 6d 3a 09 64 65 62 75 67 20     yboard.m:.debug 
     92b:	6d 6f 75 73 65 0a 76 3a 09 76 65 72 73 69 6f 6e     mouse.v:.version
     93b:	0a 73 3a 09 73 74 61 74 75 73 0a 63 3a 09 63 6f     .s:.status.c:.co
     94b:	6e 73 6f 6c 65 20 6d 6f 64 65 0a 30 2d 34 3a 09     nsole mode.0-4:.
     95b:	6c 61 79 65 72 30 2d 34 28 46 31 30 2d 46 34 29     layer0-4(F10-F4)
     96b:	0a 50 61 75 73 3a 09 62 6f 6f 74 6c 6f 61 64 65     .Paus:.bootloade
     97b:	72 0a 65 3a 09 65 65 70 72 6f 6d 0a 6e 3a 09 4e     r.e:.eeprom.n:.N
     98b:	4b 52 4f 0a 00                                      KRO..

00000990 <__c.4932>:
     990:	0a 00                                               ..

00000992 <__c.4930>:
     992:	25 75 00                                            %u.

00000995 <__c.4928>:
     995:	2e 6e 6b 72 6f 3a 20 00                             .nkro: .

0000099d <__c.4926>:
     99d:	0a 00                                               ..

0000099f <__c.4924>:
     99f:	25 75 00                                            %u.

000009a2 <__c.4922>:
     9a2:	2e 73 77 61 70 5f 62 61 63 6b 73 6c 61 73 68 5f     .swap_backslash_
     9b2:	62 61 63 6b 73 70 61 63 65 3a 20 00                 backspace: .

000009be <__c.4920>:
     9be:	0a 00                                               ..

000009c0 <__c.4918>:
     9c0:	25 75 00                                            %u.

000009c3 <__c.4916>:
     9c3:	2e 73 77 61 70 5f 67 72 61 76 65 5f 65 73 63 3a     .swap_grave_esc:
     9d3:	20 00                                                .

000009d5 <__c.4914>:
     9d5:	0a 00                                               ..

000009d7 <__c.4912>:
     9d7:	25 75 00                                            %u.

000009da <__c.4910>:
     9da:	2e 6e 6f 5f 67 75 69 3a 20 00                       .no_gui: .

000009e4 <__c.4908>:
     9e4:	0a 00                                               ..

000009e6 <__c.4906>:
     9e6:	25 75 00                                            %u.

000009e9 <__c.4904>:
     9e9:	2e 73 77 61 70 5f 72 61 6c 74 5f 72 67 75 69 3a     .swap_ralt_rgui:
     9f9:	20 00                                                .

000009fb <__c.4902>:
     9fb:	0a 00                                               ..

000009fd <__c.4900>:
     9fd:	25 75 00                                            %u.

00000a00 <__c.4898>:
     a00:	2e 73 77 61 70 5f 6c 61 6c 74 5f 6c 67 75 69 3a     .swap_lalt_lgui:
     a10:	20 00                                                .

00000a12 <__c.4896>:
     a12:	0a 00                                               ..

00000a14 <__c.4894>:
     a14:	25 75 00                                            %u.

00000a17 <__c.4892>:
     a17:	2e 63 61 70 73 6c 6f 63 6b 5f 74 6f 5f 63 6f 6e     .capslock_to_con
     a27:	74 72 6f 6c 3a 20 00                                trol: .

00000a2e <__c.4890>:
     a2e:	0a 00                                               ..

00000a30 <__c.4888>:
     a30:	25 75 00                                            %u.

00000a33 <__c.4886>:
     a33:	2e 73 77 61 70 5f 63 6f 6e 74 72 6f 6c 5f 63 61     .swap_control_ca
     a43:	70 73 6c 6f 63 6b 3a 20 00                          pslock: .

00000a4c <__c.4884>:
     a4c:	0a 00                                               ..

00000a4e <__c.4882>:
     a4e:	25 30 32 58 00                                      %02X.

00000a53 <__c.4880>:
     a53:	6b 65 79 6d 61 70 5f 63 6f 6e 66 69 67 2e 72 61     keymap_config.ra
     a63:	77 3a 20 00                                         w: .

00000a67 <__c.4877>:
     a67:	0a 00                                               ..

00000a69 <__c.4875>:
     a69:	25 75 00                                            %u.

00000a6c <__c.4873>:
     a6c:	2e 6d 6f 75 73 65 3a 20 00                          .mouse: .

00000a75 <__c.4871>:
     a75:	0a 00                                               ..

00000a77 <__c.4869>:
     a77:	25 75 00                                            %u.

00000a7a <__c.4867>:
     a7a:	2e 6b 65 79 62 6f 61 72 64 3a 20 00                 .keyboard: .

00000a86 <__c.4865>:
     a86:	0a 00                                               ..

00000a88 <__c.4863>:
     a88:	25 75 00                                            %u.

00000a8b <__c.4861>:
     a8b:	2e 6d 61 74 72 69 78 3a 20 00                       .matrix: .

00000a95 <__c.4859>:
     a95:	0a 00                                               ..

00000a97 <__c.4857>:
     a97:	25 75 00                                            %u.

00000a9a <__c.4855>:
     a9a:	2e 65 6e 61 62 6c 65 3a 20 00                       .enable: .

00000aa4 <__c.4853>:
     aa4:	0a 00                                               ..

00000aa6 <__c.4851>:
     aa6:	25 30 32 58 00                                      %02X.

00000aab <__c.4849>:
     aab:	64 65 62 75 67 5f 63 6f 6e 66 69 67 2e 72 61 77     debug_config.raw
     abb:	3a 20 00                                            : .

00000abe <__c.4846>:
     abe:	0a 00                                               ..

00000ac0 <__c.4844>:
     ac0:	25 75 00                                            %u.

00000ac3 <__c.4842>:
     ac3:	64 65 66 61 75 6c 74 5f 6c 61 79 65 72 3a 20 00     default_layer: .

00000ad3 <__c.5007>:
     ad3:	3f 00                                               ?.

00000ad5 <__c.4998>:
     ad5:	4e 4b 52 4f 3a 20 6f 66 66 0a 00                    NKRO: off..

00000ae0 <__c.4996>:
     ae0:	4e 4b 52 4f 3a 20 6f 6e 0a 00                       NKRO: on..

00000aea <__c.4993>:
     aea:	74 69 6d 65 72 5f 72 65 61 64 33 32 28 29 3a 20     timer_read32(): 
     afa:	25 30 34 6c 58 0a 00                                %04lX..

00000b01 <__c.4991>:
     b01:	6b 65 79 62 6f 61 72 64 5f 6e 6b 72 6f 3a 20 25     keyboard_nkro: %
     b11:	58 0a 00                                            X..

00000b14 <__c.4989>:
     b14:	6b 65 79 62 6f 61 72 64 5f 69 64 6c 65 3a 20 25     keyboard_idle: %
     b24:	58 0a 00                                            X..

00000b27 <__c.4987>:
     b27:	6b 65 79 62 6f 61 72 64 5f 70 72 6f 74 6f 63 6f     keyboard_protoco
     b37:	6c 3a 20 25 58 0a 00                                l: %X..

00000b3e <__c.4985>:
     b3e:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     b4e:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

00000b58 <__c.4983>:
     b58:	0a 09 2d 20 53 74 61 74 75 73 20 2d 0a 00           ..- Status -..

00000b66 <__c.4980>:
     b66:	47 43 43 3a 20 34 2e 39 2e 32 20 41 56 52 2d 4c     GCC: 4.9.2 AVR-L
     b76:	49 42 43 3a 20 31 2e 38 2e 30 73 76 6e 20 41 56     IBC: 1.8.0svn AV
     b86:	52 5f 41 52 43 48 3a 20 61 76 72 35 0a 00           R_ARCH: avr5..

00000b94 <__c.4978>:
     b94:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 42 4f     OPTIONS: LUFA BO
     ba4:	4f 54 4d 41 47 49 43 20 4d 4f 55 53 45 4b 45 59     OTMAGIC MOUSEKEY
     bb4:	20 45 58 54 52 41 4b 45 59 20 43 4f 4e 53 4f 4c      EXTRAKEY CONSOL
     bc4:	45 20 43 4f 4d 4d 41 4e 44 20 4e 4b 52 4f 20 34     E COMMAND NKRO 4
     bd4:	30 39 36 0a 00                                      096..

00000bd9 <__c.4976>:
     bd9:	42 55 49 4c 44 3a 20 35 65 39 37 66 64 37 20 28     BUILD: 5e97fd7 (
     be9:	30 34 3a 34 33 3a 33 36 20 4f 63 74 20 20 32 20     04:43:36 Oct  2 
     bf9:	32 30 31 36 29 0a 00                                2016)..

00000c00 <__c.4974>:
     c00:	56 49 44 3a 20 30 78 46 45 45 44 28 67 65 65 6b     VID: 0xFEED(geek
     c10:	68 61 63 6b 29 20 50 49 44 3a 20 30 78 36 30 36     hack) PID: 0x606
     c20:	30 28 47 48 36 30 29 20 56 45 52 3a 20 30 78 30     0(GH60) VER: 0x0
     c30:	30 30 31 0a 00                                      001..

00000c35 <__c.4972>:
     c35:	44 45 53 43 3a 20 74 2e 6d 2e 6b 2e 20 6b 65 79     DESC: t.m.k. key
     c45:	62 6f 61 72 64 20 66 69 72 6d 77 61 72 65 20 66     board firmware f
     c55:	6f 72 20 47 48 36 30 0a 00                          or GH60..

00000c5e <__c.4970>:
     c5e:	0a 09 2d 20 56 65 72 73 69 6f 6e 20 2d 0a 00        ..- Version -..

00000c6d <__c.4967>:
     c6d:	0a 6d 6f 75 73 65 3a 20 6f 66 66 0a 00              .mouse: off..

00000c7a <__c.4965>:
     c7a:	0a 6d 6f 75 73 65 3a 20 6f 6e 0a 00                 .mouse: on..

00000c86 <__c.4962>:
     c86:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 66 66 0a 00     .keyboard: off..

00000c96 <__c.4960>:
     c96:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 6e 0a 00        .keyboard: on..

00000ca5 <__c.4957>:
     ca5:	0a 6d 61 74 72 69 78 3a 20 6f 66 66 0a 00           .matrix: off..

00000cb3 <__c.4955>:
     cb3:	0a 6d 61 74 72 69 78 3a 20 6f 6e 0a 00              .matrix: on..

00000cc0 <__c.4952>:
     cc0:	0a 64 65 62 75 67 3a 20 6f 6e 0a 00                 .debug: on..

00000ccc <__c.4950>:
     ccc:	0a 64 65 62 75 67 3a 20 6f 66 66 0a 00              .debug: off..

00000cd9 <__c.4947>:
     cd9:	0a 0a 62 6f 6f 74 6c 6f 61 64 65 72 2e 2e 2e 20     ..bootloader... 
     ce9:	00                                                  .

00000cea <__c.4944>:
     cea:	43 3e 20 00                                         C> .

00000cee <__c.4938>:
     cee:	65 65 63 6f 6e 66 69 67 3a 0a 00 00                 eeconfig:...

00000cfa <__ctors_end>:
     cfa:	11 24       	eor	r1, r1
     cfc:	1f be       	out	0x3f, r1	; 63
     cfe:	cf ef       	ldi	r28, 0xFF	; 255
     d00:	da e0       	ldi	r29, 0x0A	; 10
     d02:	de bf       	out	0x3e, r29	; 62
     d04:	cd bf       	out	0x3d, r28	; 61

00000d06 <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     d06:	04 b6       	in	r0, 0x34	; 52
     d08:	03 fe       	sbrs	r0, 3
     d0a:	27 c0       	rjmp	.+78     	; 0xd5a <__do_copy_data>
     d0c:	80 91 f7 01 	lds	r24, 0x01F7
     d10:	90 91 f8 01 	lds	r25, 0x01F8
     d14:	a0 91 f9 01 	lds	r26, 0x01F9
     d18:	b0 91 fa 01 	lds	r27, 0x01FA
     d1c:	87 30       	cpi	r24, 0x07	; 7
     d1e:	90 4b       	sbci	r25, 0xB0	; 176
     d20:	a7 40       	sbci	r26, 0x07	; 7
     d22:	b0 4b       	sbci	r27, 0xB0	; 176
     d24:	d1 f4       	brne	.+52     	; 0xd5a <__do_copy_data>
        reset_key = 0;
     d26:	10 92 f7 01 	sts	0x01F7, r1
     d2a:	10 92 f8 01 	sts	0x01F8, r1
     d2e:	10 92 f9 01 	sts	0x01F9, r1
     d32:	10 92 fa 01 	sts	0x01FA, r1

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
     d36:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
     d38:	84 b7       	in	r24, 0x34	; 52
     d3a:	87 7f       	andi	r24, 0xF7	; 247
     d3c:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     d3e:	0f b6       	in	r0, 0x3f	; 63
     d40:	f8 94       	cli
     d42:	a8 95       	wdr
     d44:	80 91 60 00 	lds	r24, 0x0060
     d48:	88 61       	ori	r24, 0x18	; 24
     d4a:	80 93 60 00 	sts	0x0060, r24
     d4e:	10 92 60 00 	sts	0x0060, r1
     d52:	0f be       	out	0x3f, r0	; 63
        wdt_disable();

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
     d54:	e0 e0       	ldi	r30, 0x00	; 0
     d56:	f8 e3       	ldi	r31, 0x38	; 56
     d58:	09 95       	icall

00000d5a <__do_copy_data>:
     d5a:	11 e0       	ldi	r17, 0x01	; 1
     d5c:	a0 e0       	ldi	r26, 0x00	; 0
     d5e:	b1 e0       	ldi	r27, 0x01	; 1
     d60:	e0 ea       	ldi	r30, 0xA0	; 160
     d62:	f4 e5       	ldi	r31, 0x54	; 84
     d64:	02 c0       	rjmp	.+4      	; 0xd6a <__do_copy_data+0x10>
     d66:	05 90       	lpm	r0, Z+
     d68:	0d 92       	st	X+, r0
     d6a:	a8 33       	cpi	r26, 0x38	; 56
     d6c:	b1 07       	cpc	r27, r17
     d6e:	d9 f7       	brne	.-10     	; 0xd66 <__do_copy_data+0xc>

00000d70 <__do_clear_bss>:
     d70:	21 e0       	ldi	r18, 0x01	; 1
     d72:	a8 e3       	ldi	r26, 0x38	; 56
     d74:	b1 e0       	ldi	r27, 0x01	; 1
     d76:	01 c0       	rjmp	.+2      	; 0xd7a <.do_clear_bss_start>

00000d78 <.do_clear_bss_loop>:
     d78:	1d 92       	st	X+, r1

00000d7a <.do_clear_bss_start>:
     d7a:	a7 3f       	cpi	r26, 0xF7	; 247
     d7c:	b2 07       	cpc	r27, r18
     d7e:	e1 f7       	brne	.-8      	; 0xd78 <.do_clear_bss_loop>
     d80:	0e 94 1a 0b 	call	0x1634	; 0x1634 <main>
     d84:	0c 94 4e 2a 	jmp	0x549c	; 0x549c <_exit>

00000d88 <__bad_interrupt>:
     d88:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000d8c <xputc>:
	ldi	r24, 13		;
	rcall	1f		;
	ldi	r24, 10		;/
1:
#endif
	push	ZH
     d8c:	ff 93       	push	r31
	push	ZL
     d8e:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
     d90:	e0 91 38 01 	lds	r30, 0x0138
	lds	ZH, xfunc_out+1	;/
     d94:	f0 91 39 01 	lds	r31, 0x0139
	sbiw	ZL, 0		;Skip if null
     d98:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
     d9a:	09 f0       	breq	.+2      	; 0xd9e <xputc+0x12>
	icall
     d9c:	09 95       	icall
2:	pop	ZL
     d9e:	ef 91       	pop	r30
	pop	ZH
     da0:	ff 91       	pop	r31
	ret
     da2:	08 95       	ret

00000da4 <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
     da4:	fc 01       	movw	r30, r24
1:	_LPMI	r24
     da6:	85 91       	lpm	r24, Z+
	cpi	r24, 0
     da8:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
     daa:	11 f0       	breq	.+4      	; 0xdb0 <xputs+0xc>
	rcall	xputc
     dac:	ef df       	rcall	.-34     	; 0xd8c <xputc>
	rjmp	1b
     dae:	fb cf       	rjmp	.-10     	; 0xda6 <xputs+0x2>
2:	ret
     db0:	08 95       	ret

00000db2 <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
     db2:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
     db4:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
     db6:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
     db8:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
     dba:	0c c0       	rjmp	.+24     	; 0xdd4 <xitoa+0x22>
	neg	r20		;
     dbc:	41 95       	neg	r20
	sbrs	r25, 7		;
     dbe:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
     dc0:	09 c0       	rjmp	.+18     	; 0xdd4 <xitoa+0x22>
	ldi	r30, '-'	;
     dc2:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
     dc4:	60 95       	com	r22
	com	r23		;
     dc6:	70 95       	com	r23
	com	r24		;
     dc8:	80 95       	com	r24
	com	r25		;
     dca:	90 95       	com	r25
	adc	r22, r1		;
     dcc:	61 1d       	adc	r22, r1
	adc	r23, r1		;
     dce:	71 1d       	adc	r23, r1
	adc	r24, r1		;
     dd0:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
     dd2:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
     dd4:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <xitoa+0x2a>
	neg	r18		;
     dd8:	21 95       	neg	r18
	ldi	r19, '0'	;/
     dda:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
     ddc:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
     dde:	aa 27       	eor	r26, r26
2:	lsl	r22		;
     de0:	66 0f       	add	r22, r22
	rol	r23		;
     de2:	77 1f       	adc	r23, r23
	rol	r24		;
     de4:	88 1f       	adc	r24, r24
	rol	r25		;
     de6:	99 1f       	adc	r25, r25
	rol	r26		;
     de8:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
     dea:	a4 17       	cp	r26, r20
	brcs	3f		;
     dec:	10 f0       	brcs	.+4      	; 0xdf2 <xitoa+0x40>
	sub	r26, r20	;
     dee:	a4 1b       	sub	r26, r20
	inc	r22		;
     df0:	63 95       	inc	r22
3:	dec	r21		;
     df2:	5a 95       	dec	r21
	brne	2b		;/
     df4:	a9 f7       	brne	.-22     	; 0xde0 <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
     df6:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
     df8:	08 f0       	brcs	.+2      	; 0xdfc <xitoa+0x4a>
	subi	r26, -7		;
     dfa:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
     dfc:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
     dfe:	af 93       	push	r26
	inc	r31		;/
     e00:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
     e02:	61 15       	cp	r22, r1
	cpc	r23, r1		;
     e04:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
     e06:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
     e08:	91 05       	cpc	r25, r1
	brne	1b		;/
     e0a:	41 f7       	brne	.-48     	; 0xddc <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
     e0c:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
     e0e:	11 f4       	brne	.+4      	; 0xe14 <xitoa+0x62>
	push	r30		;
     e10:	ef 93       	push	r30
	inc	r31		;/
     e12:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
     e14:	f2 17       	cp	r31, r18
	brcc	6f		;
     e16:	18 f4       	brcc	.+6      	; 0xe1e <xitoa+0x6c>
	push	r19		;
     e18:	3f 93       	push	r19
	inc	r31		;
     e1a:	f3 95       	inc	r31
	rjmp	5b		;/
     e1c:	fb cf       	rjmp	.-10     	; 0xe14 <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
     e1e:	8f 91       	pop	r24
	rcall	xputc		;
     e20:	b5 df       	rcall	.-150    	; 0xd8c <xputc>
	dec	r31		;
     e22:	fa 95       	dec	r31
	brne	6b		;/
     e24:	e1 f7       	brne	.-8      	; 0xe1e <xitoa+0x6c>

	ret
     e26:	08 95       	ret

00000e28 <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
     e28:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
     e2a:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
     e2c:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
     e2e:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
     e30:	21 f0       	breq	.+8      	; 0xe3a <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
     e32:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
     e34:	19 f0       	breq	.+6      	; 0xe3c <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
     e36:	aa df       	rcall	.-172    	; 0xd8c <xputc>
	rjmp	0b		;/
     e38:	f9 cf       	rjmp	.-14     	; 0xe2c <xvprintf+0x4>
90:	ret
     e3a:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
     e3c:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
     e3e:	e8 94       	clt
	_LPMI	r21		;Get flags
     e40:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
     e42:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
     e44:	c1 f3       	breq	.-16     	; 0xe36 <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
     e46:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
     e48:	11 f4       	brne	.+4      	; 0xe4e <xvprintf+0x26>
	set			;/
     e4a:	68 94       	set
22:	_LPMI	r21		;Get width
     e4c:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
     e4e:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
     e50:	48 f4       	brcc	.+18     	; 0xe64 <xvprintf+0x3c>
	subi	r21, '0'	;
     e52:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
     e54:	90 f3       	brcs	.-28     	; 0xe3a <xvprintf+0x12>
	lsl	r18		;
     e56:	22 0f       	add	r18, r18
	mov	r0, r18		;
     e58:	02 2e       	mov	r0, r18
	lsl	r18		;
     e5a:	22 0f       	add	r18, r18
	lsl	r18		;
     e5c:	22 0f       	add	r18, r18
	add	r18, r0		;
     e5e:	20 0d       	add	r18, r0
	add	r18, r21	;
     e60:	25 0f       	add	r18, r21
	rjmp	22b		;/
     e62:	f4 cf       	rjmp	.-24     	; 0xe4c <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
     e64:	0e f4       	brtc	.+2      	; 0xe68 <xvprintf+0x40>
	neg	r18		;
     e66:	21 95       	neg	r18
25:	ld	r24, Y+		;
     e68:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
     e6a:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
     e6c:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
     e6e:	19 f3       	breq	.-58     	; 0xe36 <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
     e70:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
     e72:	29 f1       	breq	.+74     	; 0xebe <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
     e74:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
     e76:	59 f1       	breq	.+86     	; 0xece <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
     e78:	bc 01       	movw	r22, r24
	clr	r24		;
     e7a:	88 27       	eor	r24, r24
	clr	r25		;
     e7c:	99 27       	eor	r25, r25
	clt			;/
     e7e:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
     e80:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
     e82:	21 f4       	brne	.+8      	; 0xe8c <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
     e84:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
     e86:	99 91       	ld	r25, Y+
	set			;
     e88:	68 94       	set
	_LPMI	r21		;/
     e8a:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
     e8c:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
     e8e:	39 f4       	brne	.+14     	; 0xe9e <xvprintf+0x76>
	ldi	r20, -10	;
     e90:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
     e92:	7e f0       	brts	.+30     	; 0xeb2 <xvprintf+0x8a>
	sbrs	r23, 7		;
     e94:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
     e96:	0d c0       	rjmp	.+26     	; 0xeb2 <xvprintf+0x8a>
	ldi	r24, -1		;
     e98:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
     e9a:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
     e9c:	0a c0       	rjmp	.+20     	; 0xeb2 <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
     e9e:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
     ea0:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
     ea2:	39 f0       	breq	.+14     	; 0xeb2 <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
     ea4:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
     ea6:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
     ea8:	21 f0       	breq	.+8      	; 0xeb2 <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
     eaa:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
     eac:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
     eae:	09 f0       	breq	.+2      	; 0xeb2 <xvprintf+0x8a>
	ret			;abort
     eb0:	08 95       	ret
40:	push	ZH		;Output the value
     eb2:	ff 93       	push	r31
	push	ZL		;
     eb4:	ef 93       	push	r30
	rcall	xitoa		;
     eb6:	7d df       	rcall	.-262    	; 0xdb2 <xitoa>
42:	pop	ZL		;
     eb8:	ef 91       	pop	r30
	pop	ZH		;
     eba:	ff 91       	pop	r31
	rjmp	0b		;/
     ebc:	b7 cf       	rjmp	.-146    	; 0xe2c <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
     ebe:	ff 93       	push	r31
	push	ZL
     ec0:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
     ec2:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
     ec4:	81 91       	ld	r24, Z+
	cpi	r24, 0
     ec6:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
     ec8:	b9 f3       	breq	.-18     	; 0xeb8 <xvprintf+0x90>
	rcall	xputc
     eca:	60 df       	rcall	.-320    	; 0xd8c <xputc>
	rjmp	51b
     ecc:	fb cf       	rjmp	.-10     	; 0xec4 <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
     ece:	ff 93       	push	r31
	push	ZL
     ed0:	ef 93       	push	r30
	rcall	xputs
     ed2:	68 df       	rcall	.-304    	; 0xda4 <xputs>
	rjmp	42b
     ed4:	f1 cf       	rjmp	.-30     	; 0xeb8 <xvprintf+0x90>

00000ed6 <__xprintf>:


.func __xprintf
.global __xprintf
__xprintf:
	push	YH
     ed6:	df 93       	push	r29
	push	YL
     ed8:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
     eda:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
     edc:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
     ede:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
     ee0:	a3 df       	rcall	.-186    	; 0xe28 <xvprintf>
	pop	YL
     ee2:	cf 91       	pop	r28
	pop	YH
     ee4:	df 91       	pop	r29
	ret
     ee6:	08 95       	ret

00000ee8 <action_get_macro>:
    [6] = ACTION_MACRO(2), // Context Block
    [7] = ACTION_MACRO(3)  // It Block
};

const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt) {
    if (record->event.pressed) {
     ee8:	fc 01       	movw	r30, r24
     eea:	82 81       	ldd	r24, Z+2	; 0x02
     eec:	88 23       	and	r24, r24
     eee:	81 f0       	breq	.+32     	; 0xf10 <action_get_macro+0x28>
        switch (id) {
     ef0:	61 30       	cpi	r22, 0x01	; 1
     ef2:	41 f0       	breq	.+16     	; 0xf04 <action_get_macro+0x1c>
     ef4:	80 f0       	brcs	.+32     	; 0xf16 <action_get_macro+0x2e>
     ef6:	62 30       	cpi	r22, 0x02	; 2
     ef8:	41 f0       	breq	.+16     	; 0xf0a <action_get_macro+0x22>
     efa:	63 30       	cpi	r22, 0x03	; 3
     efc:	49 f4       	brne	.+18     	; 0xf10 <action_get_macro+0x28>
			    T(O), \
			    D(LSFT), T(C), U(LSFT), T(O), T(N), T(T), T(E), T(X), T(T), \
			    T(SPACE), T(ESC), END \
	                    );
            case 3:
                return MACRO( \
     efe:	80 ee       	ldi	r24, 0xE0	; 224
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	08 95       	ret
			    T(MINS), T(R), T(A), T(N), T(D), T(O), T(M), T(I), T(Z), T(E), \
			    D(LSFT), T(A), U(LSFT), T(L), T(L), \
			    D(LSFT), T(S), U(LSFT), T(P), T(E), T(C), T(S), T(ENT), END \
			    );
            case 1:
                return MACRO( \
     f04:	86 e2       	ldi	r24, 0x26	; 38
     f06:	91 e0       	ldi	r25, 0x01	; 1
     f08:	08 95       	ret
			    T(O), \
			    D(LSFT), T(D), U(LSFT), T(E), T(S), T(C), T(R), T(I), T(B), T(E), \
			    T(SPACE), T(ESC), END \
			    );
            case 2:
                return MACRO( \
     f0a:	89 ef       	ldi	r24, 0xF9	; 249
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	08 95       	ret
			    T(O), \
			    D(LSFT), T(I), U(LSFT), T(T), T(SPACE), T(ESC), END \
			    );
        }
    }
    return MACRO_NONE;
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	08 95       	ret

const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt) {
    if (record->event.pressed) {
        switch (id) {
	    case 0:
	        return MACRO( \
     f16:	87 e5       	ldi	r24, 0x57	; 87
     f18:	91 e0       	ldi	r25, 0x01	; 1
			    D(LSFT), T(I), U(LSFT), T(T), T(SPACE), T(ESC), END \
			    );
        }
    }
    return MACRO_NONE;
}
     f1a:	08 95       	ret

00000f1c <unselect_rows>:
 * pin: D0  D1  D2  D3  D5
 */
static void unselect_rows(void)
{
    // Hi-Z(DDR:0, PORT:0) to unselect
    DDRD  &= ~0b00011111;
     f1c:	8a b1       	in	r24, 0x0a	; 10
     f1e:	80 7e       	andi	r24, 0xE0	; 224
     f20:	8a b9       	out	0x0a, r24	; 10
    PORTD &= ~0b00011111;
     f22:	8b b1       	in	r24, 0x0b	; 11
     f24:	80 7e       	andi	r24, 0xE0	; 224
     f26:	8b b9       	out	0x0b, r24	; 11
     f28:	08 95       	ret

00000f2a <matrix_init>:
}

void matrix_init(void)
{
    // initialize row and col
    unselect_rows();
     f2a:	0e 94 8e 07 	call	0xf1c	; 0xf1c <unselect_rows>
 * pin:                                 B7                      (Rev.B)
 */
static void  init_cols(void)
{
    // Input with pull-up(DDR:0, PORT:1)
    DDRB  &= ~(1<<0 | 1<<1 | 1<<5 | 1<<3 | 1<<4);
     f2e:	84 b1       	in	r24, 0x04	; 4
     f30:	84 7c       	andi	r24, 0xC4	; 196
     f32:	84 b9       	out	0x04, r24	; 4
    PORTB |=  (1<<0 | 1<<1 | 1<<5 | 1<<3 | 1<<4);
     f34:	85 b1       	in	r24, 0x05	; 5
     f36:	8b 63       	ori	r24, 0x3B	; 59
     f38:	85 b9       	out	0x05, r24	; 5
     f3a:	aa e3       	ldi	r26, 0x3A	; 58
     f3c:	b1 e0       	ldi	r27, 0x01	; 1
     f3e:	ef e3       	ldi	r30, 0x3F	; 63
     f40:	f1 e0       	ldi	r31, 0x01	; 1
     f42:	85 e0       	ldi	r24, 0x05	; 5
     f44:	8e 0f       	add	r24, r30
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
     f46:	11 92       	st	Z+, r1
        matrix_debouncing[i] = 0;
     f48:	1d 92       	st	X+, r1
    // initialize row and col
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
     f4a:	8e 13       	cpse	r24, r30
     f4c:	fc cf       	rjmp	.-8      	; 0xf46 <matrix_init+0x1c>
        matrix[i] = 0;
        matrix_debouncing[i] = 0;
    }
}
     f4e:	08 95       	ret

00000f50 <matrix_scan>:

uint8_t matrix_scan(void)
{
     f50:	df 92       	push	r13
     f52:	ef 92       	push	r14
     f54:	ff 92       	push	r15
     f56:	0f 93       	push	r16
     f58:	1f 93       	push	r17
     f5a:	cf 93       	push	r28
     f5c:	df 93       	push	r29
     f5e:	0a e3       	ldi	r16, 0x3A	; 58
     f60:	11 e0       	ldi	r17, 0x01	; 1
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
     f62:	c0 e0       	ldi	r28, 0x00	; 0
     f64:	d1 e0       	ldi	r29, 0x01	; 1
        if (matrix_debouncing[i] != cols) {
            matrix_debouncing[i] = cols;
            if (debouncing) {
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
            }
            debouncing = DEBOUNCE;
     f66:	85 e0       	ldi	r24, 0x05	; 5
     f68:	d8 2e       	mov	r13, r24
        _delay_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
            matrix_debouncing[i] = cols;
            if (debouncing) {
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
     f6a:	99 ec       	ldi	r25, 0xC9	; 201
     f6c:	e9 2e       	mov	r14, r25
     f6e:	92 e0       	ldi	r25, 0x02	; 2
     f70:	f9 2e       	mov	r15, r25
}

static void select_row(uint8_t row)
{
    // Output low(DDR:1, PORT:0) to select
    switch (row) {
     f72:	c2 30       	cpi	r28, 0x02	; 2
     f74:	71 f0       	breq	.+28     	; 0xf92 <matrix_scan+0x42>
     f76:	18 f4       	brcc	.+6      	; 0xf7e <matrix_scan+0x2e>
     f78:	c1 30       	cpi	r28, 0x01	; 1
     f7a:	41 f0       	breq	.+16     	; 0xf8c <matrix_scan+0x3c>
     f7c:	04 c0       	rjmp	.+8      	; 0xf86 <matrix_scan+0x36>
     f7e:	c3 30       	cpi	r28, 0x03	; 3
     f80:	59 f0       	breq	.+22     	; 0xf98 <matrix_scan+0x48>
     f82:	c4 30       	cpi	r28, 0x04	; 4
     f84:	61 f0       	breq	.+24     	; 0xf9e <matrix_scan+0x4e>
        case 0:
            DDRD  |= (1<<0);
     f86:	50 9a       	sbi	0x0a, 0	; 10
            PORTD &= ~(1<<0);
     f88:	58 98       	cbi	0x0b, 0	; 11
     f8a:	0b c0       	rjmp	.+22     	; 0xfa2 <matrix_scan+0x52>
            break;
        case 1:
            DDRD  |= (1<<1);
     f8c:	51 9a       	sbi	0x0a, 1	; 10
            PORTD &= ~(1<<1);
     f8e:	59 98       	cbi	0x0b, 1	; 11
     f90:	08 c0       	rjmp	.+16     	; 0xfa2 <matrix_scan+0x52>
            break;
        case 2:
            DDRD  |= (1<<2);
     f92:	52 9a       	sbi	0x0a, 2	; 10
            PORTD &= ~(1<<2);
     f94:	5a 98       	cbi	0x0b, 2	; 11
     f96:	05 c0       	rjmp	.+10     	; 0xfa2 <matrix_scan+0x52>
            break;
        case 3:
            DDRD  |= (1<<3);
     f98:	53 9a       	sbi	0x0a, 3	; 10
            PORTD &= ~(1<<3);
     f9a:	5b 98       	cbi	0x0b, 3	; 11
     f9c:	02 c0       	rjmp	.+4      	; 0xfa2 <matrix_scan+0x52>
            break;
        case 4:
            DDRD  |= (1<<4);
     f9e:	54 9a       	sbi	0x0a, 4	; 10
            PORTD &= ~(1<<4);
     fa0:	5c 98       	cbi	0x0b, 4	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fa2:	80 ea       	ldi	r24, 0xA0	; 160
     fa4:	8a 95       	dec	r24
     fa6:	f1 f7       	brne	.-4      	; 0xfa4 <matrix_scan+0x54>
    PORTB |=  (1<<0 | 1<<1 | 1<<5 | 1<<3 | 1<<4);
}

static matrix_row_t read_cols(void)
{
    return (PINB&(1<<0) ? 0 : (1<<0)) |
     fa8:	83 b1       	in	r24, 0x03	; 3
     faa:	81 70       	andi	r24, 0x01	; 1
     fac:	8d 27       	eor	r24, r29
     fae:	19 99       	sbic	0x03, 1	; 3
     fb0:	02 c0       	rjmp	.+4      	; 0xfb6 <matrix_scan+0x66>
     fb2:	92 e0       	ldi	r25, 0x02	; 2
     fb4:	01 c0       	rjmp	.+2      	; 0xfb8 <matrix_scan+0x68>
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	89 2b       	or	r24, r25
     fba:	1d 99       	sbic	0x03, 5	; 3
     fbc:	02 c0       	rjmp	.+4      	; 0xfc2 <matrix_scan+0x72>
     fbe:	94 e0       	ldi	r25, 0x04	; 4
     fc0:	01 c0       	rjmp	.+2      	; 0xfc4 <matrix_scan+0x74>
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	89 2b       	or	r24, r25
     fc6:	1b 99       	sbic	0x03, 3	; 3
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <matrix_scan+0x7e>
     fca:	98 e0       	ldi	r25, 0x08	; 8
     fcc:	01 c0       	rjmp	.+2      	; 0xfd0 <matrix_scan+0x80>
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	89 2b       	or	r24, r25
     fd2:	1c 99       	sbic	0x03, 4	; 3
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <matrix_scan+0x8a>
     fd6:	90 e1       	ldi	r25, 0x10	; 16
     fd8:	01 c0       	rjmp	.+2      	; 0xfdc <matrix_scan+0x8c>
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	89 2b       	or	r24, r25
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
        select_row(i);
        _delay_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
     fde:	f8 01       	movw	r30, r16
     fe0:	90 81       	ld	r25, Z
     fe2:	98 17       	cp	r25, r24
     fe4:	39 f1       	breq	.+78     	; 0x1034 <matrix_scan+0xe4>
            matrix_debouncing[i] = cols;
     fe6:	80 83       	st	Z, r24
            if (debouncing) {
     fe8:	80 91 00 01 	lds	r24, 0x0100
     fec:	88 23       	and	r24, r24
     fee:	01 f1       	breq	.+64     	; 0x1030 <matrix_scan+0xe0>
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
     ff0:	80 91 d8 01 	lds	r24, 0x01D8
     ff4:	80 ff       	sbrs	r24, 0
     ff6:	04 c0       	rjmp	.+8      	; 0x1000 <matrix_scan+0xb0>
     ff8:	8e ec       	ldi	r24, 0xCE	; 206
     ffa:	92 e0       	ldi	r25, 0x02	; 2
     ffc:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    1000:	80 91 d8 01 	lds	r24, 0x01D8
    1004:	80 ff       	sbrs	r24, 0
    1006:	0c c0       	rjmp	.+24     	; 0x1020 <matrix_scan+0xd0>
    1008:	80 91 00 01 	lds	r24, 0x0100
    100c:	1f 92       	push	r1
    100e:	8f 93       	push	r24
    1010:	ff 92       	push	r15
    1012:	ef 92       	push	r14
    1014:	0e 94 6b 07 	call	0xed6	; 0xed6 <__xprintf>
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	80 91 d8 01 	lds	r24, 0x01D8
    1024:	80 ff       	sbrs	r24, 0
    1026:	04 c0       	rjmp	.+8      	; 0x1030 <matrix_scan+0xe0>
    1028:	87 ec       	ldi	r24, 0xC7	; 199
    102a:	92 e0       	ldi	r25, 0x02	; 2
    102c:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
            }
            debouncing = DEBOUNCE;
    1030:	d0 92 00 01 	sts	0x0100, r13
        }
        unselect_rows();
    1034:	0e 94 8e 07 	call	0xf1c	; 0xf1c <unselect_rows>
    }
}

uint8_t matrix_scan(void)
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    1038:	cf 5f       	subi	r28, 0xFF	; 255
    103a:	0f 5f       	subi	r16, 0xFF	; 255
    103c:	1f 4f       	sbci	r17, 0xFF	; 255
    103e:	c5 30       	cpi	r28, 0x05	; 5
    1040:	09 f0       	breq	.+2      	; 0x1044 <matrix_scan+0xf4>
    1042:	97 cf       	rjmp	.-210    	; 0xf72 <matrix_scan+0x22>
            debouncing = DEBOUNCE;
        }
        unselect_rows();
    }

    if (debouncing) {
    1044:	80 91 00 01 	lds	r24, 0x0100
    1048:	88 23       	and	r24, r24
    104a:	b1 f0       	breq	.+44     	; 0x1078 <matrix_scan+0x128>
        if (--debouncing) {
    104c:	81 50       	subi	r24, 0x01	; 1
    104e:	80 93 00 01 	sts	0x0100, r24
    1052:	88 23       	and	r24, r24
    1054:	39 f0       	breq	.+14     	; 0x1064 <matrix_scan+0x114>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1056:	8f e9       	ldi	r24, 0x9F	; 159
    1058:	9f e0       	ldi	r25, 0x0F	; 15
    105a:	01 97       	sbiw	r24, 0x01	; 1
    105c:	f1 f7       	brne	.-4      	; 0x105a <matrix_scan+0x10a>
    105e:	00 c0       	rjmp	.+0      	; 0x1060 <matrix_scan+0x110>
    1060:	00 00       	nop
    1062:	0a c0       	rjmp	.+20     	; 0x1078 <matrix_scan+0x128>
    1064:	af e3       	ldi	r26, 0x3F	; 63
    1066:	b1 e0       	ldi	r27, 0x01	; 1
    1068:	ea e3       	ldi	r30, 0x3A	; 58
    106a:	f1 e0       	ldi	r31, 0x01	; 1
    106c:	cf 01       	movw	r24, r30
    106e:	8b 5f       	subi	r24, 0xFB	; 251
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
                matrix[i] = matrix_debouncing[i];
    1070:	91 91       	ld	r25, Z+
    1072:	9d 93       	st	X+, r25

    if (debouncing) {
        if (--debouncing) {
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    1074:	8e 13       	cpse	r24, r30
    1076:	fc cf       	rjmp	.-8      	; 0x1070 <matrix_scan+0x120>
            }
        }
    }

    return 1;
}
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	df 91       	pop	r29
    107c:	cf 91       	pop	r28
    107e:	1f 91       	pop	r17
    1080:	0f 91       	pop	r16
    1082:	ff 90       	pop	r15
    1084:	ef 90       	pop	r14
    1086:	df 90       	pop	r13
    1088:	08 95       	ret

0000108a <matrix_get_row>:
}

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
    108a:	e8 2f       	mov	r30, r24
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	e1 5c       	subi	r30, 0xC1	; 193
    1090:	fe 4f       	sbci	r31, 0xFE	; 254
}
    1092:	80 81       	ld	r24, Z
    1094:	08 95       	ret

00001096 <matrix_print>:

void matrix_print(void)
{
    1096:	cf 92       	push	r12
    1098:	df 92       	push	r13
    109a:	ef 92       	push	r14
    109c:	ff 92       	push	r15
    109e:	0f 93       	push	r16
    10a0:	1f 93       	push	r17
    10a2:	cf 93       	push	r28
    10a4:	df 93       	push	r29
    print("\nr/c 0123456789ABCDEF\n");
    10a6:	80 eb       	ldi	r24, 0xB0	; 176
    10a8:	92 e0       	ldi	r25, 0x02	; 2
    10aa:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    10ae:	8f e3       	ldi	r24, 0x3F	; 63
    10b0:	e8 2e       	mov	r14, r24
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	f8 2e       	mov	r15, r24
    10b6:	c0 e0       	ldi	r28, 0x00	; 0
    10b8:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    10ba:	9b ea       	ldi	r25, 0xAB	; 171
    10bc:	c9 2e       	mov	r12, r25
    10be:	92 e0       	ldi	r25, 0x02	; 2
    10c0:	d9 2e       	mov	r13, r25
        pbin_reverse16(matrix_get_row(row));
    10c2:	02 ea       	ldi	r16, 0xA2	; 162
    10c4:	12 e0       	ldi	r17, 0x02	; 2

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    10c6:	df 93       	push	r29
    10c8:	cf 93       	push	r28
    10ca:	df 92       	push	r13
    10cc:	cf 92       	push	r12
    10ce:	0e 94 6b 07 	call	0xed6	; 0xed6 <__xprintf>
    10d2:	88 ea       	ldi	r24, 0xA8	; 168
    10d4:	92 e0       	ldi	r25, 0x02	; 2
    10d6:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
}

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
    10da:	f7 01       	movw	r30, r14
    10dc:	81 91       	ld	r24, Z+
    10de:	7f 01       	movw	r14, r30
void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
        pbin_reverse16(matrix_get_row(row));
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	0e 94 b6 1c 	call	0x396c	; 0x396c <bitrev16>
    10e6:	9f 93       	push	r25
    10e8:	8f 93       	push	r24
    10ea:	1f 93       	push	r17
    10ec:	0f 93       	push	r16
    10ee:	0e 94 6b 07 	call	0xed6	; 0xed6 <__xprintf>
        print("\n");
    10f2:	80 ea       	ldi	r24, 0xA0	; 160
    10f4:	92 e0       	ldi	r25, 0x02	; 2
    10f6:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    10fa:	21 96       	adiw	r28, 0x01	; 1
}

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
    10fc:	8d b7       	in	r24, 0x3d	; 61
    10fe:	9e b7       	in	r25, 0x3e	; 62
    1100:	08 96       	adiw	r24, 0x08	; 8
    1102:	0f b6       	in	r0, 0x3f	; 63
    1104:	f8 94       	cli
    1106:	9e bf       	out	0x3e, r25	; 62
    1108:	0f be       	out	0x3f, r0	; 63
    110a:	8d bf       	out	0x3d, r24	; 61
    110c:	c5 30       	cpi	r28, 0x05	; 5
    110e:	d1 05       	cpc	r29, r1
    1110:	d1 f6       	brne	.-76     	; 0x10c6 <matrix_print+0x30>
        phex(row); print(": ");
        pbin_reverse16(matrix_get_row(row));
        print("\n");
    }
}
    1112:	df 91       	pop	r29
    1114:	cf 91       	pop	r28
    1116:	1f 91       	pop	r17
    1118:	0f 91       	pop	r16
    111a:	ff 90       	pop	r15
    111c:	ef 90       	pop	r14
    111e:	df 90       	pop	r13
    1120:	cf 90       	pop	r12
    1122:	08 95       	ret

00001124 <led_set>:
#include "led.h"


void led_set(uint8_t usb_led)
{
    if (usb_led & (1<<USB_LED_CAPS_LOCK)) {
    1124:	81 ff       	sbrs	r24, 1
    1126:	02 c0       	rjmp	.+4      	; 0x112c <led_set+0x8>
        // output low
        DDRB |= (1<<2);
    1128:	22 9a       	sbi	0x04, 2	; 4
    112a:	01 c0       	rjmp	.+2      	; 0x112e <led_set+0xa>
        PORTB &= ~(1<<2);
    } else {
        // Hi-Z
        DDRB &= ~(1<<2);
    112c:	22 98       	cbi	0x04, 2	; 4
        PORTB &= ~(1<<2);
    112e:	2a 98       	cbi	0x05, 2	; 5
    1130:	08 95       	ret

00001132 <keyboard_leds>:
 * Host driver 
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
    1132:	80 91 67 01 	lds	r24, 0x0167
    1136:	08 95       	ret

00001138 <sendchar>:
    // Because sendchar() is called so many times, waiting each call causes big lag.
    static bool timeouted = false;

    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);
    1138:	9f b7       	in	r25, 0x3f	; 63
    113a:	f8 94       	cli
    113c:	10 92 46 01 	sts	0x0146, r1
    1140:	9f bf       	out	0x3f, r25	; 63

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1142:	90 91 ed 01 	lds	r25, 0x01ED
    1146:	94 30       	cpi	r25, 0x04	; 4
    1148:	09 f0       	breq	.+2      	; 0x114c <sendchar+0x14>
    114a:	57 c0       	rjmp	.+174    	; 0x11fa <sendchar+0xc2>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    114c:	90 91 e9 00 	lds	r25, 0x00E9
    1150:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1152:	30 91 ec 00 	lds	r19, 0x00EC
    1156:	23 2f       	mov	r18, r19
    1158:	21 70       	andi	r18, 0x01	; 1
    115a:	30 fd       	sbrc	r19, 0
    115c:	20 e8       	ldi	r18, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    115e:	92 2b       	or	r25, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1160:	24 e0       	ldi	r18, 0x04	; 4
    1162:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1166:	20 91 eb 00 	lds	r18, 0x00EB
        return -1;

    uint8_t ep = Endpoint_GetCurrentEndpoint();
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    116a:	20 ff       	sbrs	r18, 0
    116c:	43 c0       	rjmp	.+134    	; 0x11f4 <sendchar+0xbc>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    116e:	20 91 ee 00 	lds	r18, 0x00EE
    1172:	27 ff       	sbrs	r18, 7
    1174:	3f c0       	rjmp	.+126    	; 0x11f4 <sendchar+0xbc>
        goto ERROR_EXIT;
    }

    if (timeouted && !Endpoint_IsReadWriteAllowed()) {
    1176:	20 91 44 01 	lds	r18, 0x0144
    117a:	22 23       	and	r18, r18
    117c:	21 f0       	breq	.+8      	; 0x1186 <sendchar+0x4e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    117e:	20 91 e8 00 	lds	r18, 0x00E8
    1182:	25 ff       	sbrs	r18, 5
    1184:	37 c0       	rjmp	.+110    	; 0x11f4 <sendchar+0xbc>
        goto ERROR_EXIT;
    }

    timeouted = false;
    1186:	10 92 44 01 	sts	0x0144, r1

    uint8_t timeout = SEND_TIMEOUT;
    while (!Endpoint_IsReadWriteAllowed()) {
    118a:	26 e0       	ldi	r18, 0x06	; 6
    118c:	30 91 e8 00 	lds	r19, 0x00E8
    1190:	35 fd       	sbrc	r19, 5
    1192:	15 c0       	rjmp	.+42     	; 0x11be <sendchar+0x86>
        if (USB_DeviceState != DEVICE_STATE_Configured) {
    1194:	30 91 ed 01 	lds	r19, 0x01ED
    1198:	34 30       	cpi	r19, 0x04	; 4
    119a:	61 f5       	brne	.+88     	; 0x11f4 <sendchar+0xbc>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    119c:	30 91 eb 00 	lds	r19, 0x00EB
            goto ERROR_EXIT;
        }
        if (Endpoint_IsStalled()) {
    11a0:	35 fd       	sbrc	r19, 5
    11a2:	28 c0       	rjmp	.+80     	; 0x11f4 <sendchar+0xbc>
    11a4:	21 50       	subi	r18, 0x01	; 1
            goto ERROR_EXIT;
        }
        if (!(timeout--)) {
    11a6:	21 f4       	brne	.+8      	; 0x11b0 <sendchar+0x78>
            timeouted = true;
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	80 93 44 01 	sts	0x0144, r24
            goto ERROR_EXIT;
    11ae:	22 c0       	rjmp	.+68     	; 0x11f4 <sendchar+0xbc>
    11b0:	ef e9       	ldi	r30, 0x9F	; 159
    11b2:	ff e0       	ldi	r31, 0x0F	; 15
    11b4:	31 97       	sbiw	r30, 0x01	; 1
    11b6:	f1 f7       	brne	.-4      	; 0x11b4 <sendchar+0x7c>
    11b8:	00 c0       	rjmp	.+0      	; 0x11ba <sendchar+0x82>
    11ba:	00 00       	nop
    11bc:	e7 cf       	rjmp	.-50     	; 0x118c <sendchar+0x54>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    11be:	80 93 f1 00 	sts	0x00F1, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    11c2:	80 91 e8 00 	lds	r24, 0x00E8
    }

    Endpoint_Write_8(c);

    // send when bank is full
    if (!Endpoint_IsReadWriteAllowed()) {
    11c6:	85 fd       	sbrc	r24, 5
    11c8:	0a c0       	rjmp	.+20     	; 0x11de <sendchar+0xa6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    11ca:	80 91 e8 00 	lds	r24, 0x00E8
        while (!(Endpoint_IsINReady()));
    11ce:	80 ff       	sbrs	r24, 0
    11d0:	fc cf       	rjmp	.-8      	; 0x11ca <sendchar+0x92>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    11d2:	80 91 e8 00 	lds	r24, 0x00E8
    11d6:	8e 77       	andi	r24, 0x7E	; 126
    11d8:	80 93 e8 00 	sts	0x00E8, r24
    11dc:	06 c0       	rjmp	.+12     	; 0x11ea <sendchar+0xb2>
        Endpoint_ClearIN();
    } else {
        CONSOLE_FLUSH_SET(true);
    11de:	8f b7       	in	r24, 0x3f	; 63
    11e0:	f8 94       	cli
    11e2:	21 e0       	ldi	r18, 0x01	; 1
    11e4:	20 93 46 01 	sts	0x0146, r18
    11e8:	8f bf       	out	0x3f, r24	; 63
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    11ea:	9f 70       	andi	r25, 0x0F	; 15
    11ec:	90 93 e9 00 	sts	0x00E9, r25
    }

    Endpoint_SelectEndpoint(ep);
    return 0;
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	08 95       	ret
    11f4:	9f 70       	andi	r25, 0x0F	; 15
    11f6:	90 93 e9 00 	sts	0x00E9, r25
    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);

    if (USB_DeviceState != DEVICE_STATE_Configured)
        return -1;
    11fa:	8f ef       	ldi	r24, 0xFF	; 255
    Endpoint_SelectEndpoint(ep);
    return 0;
ERROR_EXIT:
    Endpoint_SelectEndpoint(ep);
    return -1;
}
    11fc:	08 95       	ret

000011fe <send_consumer>:
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    Endpoint_ClearIN();
}

static void send_consumer(uint16_t data)
{
    11fe:	cf 93       	push	r28
    1200:	df 93       	push	r29
    1202:	00 d0       	rcall	.+0      	; 0x1204 <send_consumer+0x6>
    1204:	1f 92       	push	r1
    1206:	cd b7       	in	r28, 0x3d	; 61
    1208:	de b7       	in	r29, 0x3e	; 62
    120a:	9c 01       	movw	r18, r24
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    120c:	80 91 ed 01 	lds	r24, 0x01ED
    1210:	84 30       	cpi	r24, 0x04	; 4
    1212:	19 f5       	brne	.+70     	; 0x125a <send_consumer+0x5c>
        return;

    report_extra_t r = {
    1214:	93 e0       	ldi	r25, 0x03	; 3
    1216:	99 83       	std	Y+1, r25	; 0x01
    1218:	3b 83       	std	Y+3, r19	; 0x03
    121a:	2a 83       	std	Y+2, r18	; 0x02
    121c:	90 93 e9 00 	sts	0x00E9, r25
    1220:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1222:	90 91 e8 00 	lds	r25, 0x00E8
    1226:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1228:	95 fd       	sbrc	r25, 5
    122a:	06 c0       	rjmp	.+12     	; 0x1238 <send_consumer+0x3a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    122c:	95 ed       	ldi	r25, 0xD5	; 213
    122e:	9a 95       	dec	r25
    1230:	f1 f7       	brne	.-4      	; 0x122e <send_consumer+0x30>
    1232:	00 00       	nop
    1234:	81 11       	cpse	r24, r1
    1236:	f5 cf       	rjmp	.-22     	; 0x1222 <send_consumer+0x24>
    1238:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    123c:	85 ff       	sbrs	r24, 5
    123e:	0d c0       	rjmp	.+26     	; 0x125a <send_consumer+0x5c>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    1240:	40 e0       	ldi	r20, 0x00	; 0
    1242:	50 e0       	ldi	r21, 0x00	; 0
    1244:	63 e0       	ldi	r22, 0x03	; 3
    1246:	70 e0       	ldi	r23, 0x00	; 0
    1248:	ce 01       	movw	r24, r28
    124a:	01 96       	adiw	r24, 0x01	; 1
    124c:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1250:	80 91 e8 00 	lds	r24, 0x00E8
    1254:	8e 77       	andi	r24, 0x7E	; 126
    1256:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    125a:	0f 90       	pop	r0
    125c:	0f 90       	pop	r0
    125e:	0f 90       	pop	r0
    1260:	df 91       	pop	r29
    1262:	cf 91       	pop	r28
    1264:	08 95       	ret

00001266 <send_system>:
    Endpoint_ClearIN();
#endif
}

static void send_system(uint16_t data)
{
    1266:	cf 93       	push	r28
    1268:	df 93       	push	r29
    126a:	00 d0       	rcall	.+0      	; 0x126c <send_system+0x6>
    126c:	1f 92       	push	r1
    126e:	cd b7       	in	r28, 0x3d	; 61
    1270:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1272:	20 91 ed 01 	lds	r18, 0x01ED
    1276:	24 30       	cpi	r18, 0x04	; 4
    1278:	21 f5       	brne	.+72     	; 0x12c2 <send_system+0x5c>
        return;

    report_extra_t r = {
    127a:	22 e0       	ldi	r18, 0x02	; 2
    127c:	29 83       	std	Y+1, r18	; 0x01
    127e:	9b 83       	std	Y+3, r25	; 0x03
    1280:	8a 83       	std	Y+2, r24	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1282:	83 e0       	ldi	r24, 0x03	; 3
    1284:	80 93 e9 00 	sts	0x00E9, r24
    1288:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    128a:	90 91 e8 00 	lds	r25, 0x00E8
    128e:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1290:	95 fd       	sbrc	r25, 5
    1292:	06 c0       	rjmp	.+12     	; 0x12a0 <send_system+0x3a>
    1294:	95 ed       	ldi	r25, 0xD5	; 213
    1296:	9a 95       	dec	r25
    1298:	f1 f7       	brne	.-4      	; 0x1296 <send_system+0x30>
    129a:	00 00       	nop
    129c:	81 11       	cpse	r24, r1
    129e:	f5 cf       	rjmp	.-22     	; 0x128a <send_system+0x24>
    12a0:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    12a4:	85 ff       	sbrs	r24, 5
    12a6:	0d c0       	rjmp	.+26     	; 0x12c2 <send_system+0x5c>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    12a8:	40 e0       	ldi	r20, 0x00	; 0
    12aa:	50 e0       	ldi	r21, 0x00	; 0
    12ac:	63 e0       	ldi	r22, 0x03	; 3
    12ae:	70 e0       	ldi	r23, 0x00	; 0
    12b0:	ce 01       	movw	r24, r28
    12b2:	01 96       	adiw	r24, 0x01	; 1
    12b4:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    12b8:	80 91 e8 00 	lds	r24, 0x00E8
    12bc:	8e 77       	andi	r24, 0x7E	; 126
    12be:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    12c2:	0f 90       	pop	r0
    12c4:	0f 90       	pop	r0
    12c6:	0f 90       	pop	r0
    12c8:	df 91       	pop	r29
    12ca:	cf 91       	pop	r28
    12cc:	08 95       	ret

000012ce <send_mouse>:
static void send_mouse(report_mouse_t *report)
{
#ifdef MOUSE_ENABLE
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    12ce:	20 91 ed 01 	lds	r18, 0x01ED
    12d2:	24 30       	cpi	r18, 0x04	; 4
    12d4:	f1 f4       	brne	.+60     	; 0x1312 <send_mouse+0x44>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    12d6:	22 e0       	ldi	r18, 0x02	; 2
    12d8:	20 93 e9 00 	sts	0x00E9, r18
    12dc:	2f ef       	ldi	r18, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    12de:	30 91 e8 00 	lds	r19, 0x00E8
    12e2:	21 50       	subi	r18, 0x01	; 1

    /* Select the Mouse Report Endpoint */
    Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    12e4:	35 fd       	sbrc	r19, 5
    12e6:	06 c0       	rjmp	.+12     	; 0x12f4 <send_mouse+0x26>
    12e8:	35 ed       	ldi	r19, 0xD5	; 213
    12ea:	3a 95       	dec	r19
    12ec:	f1 f7       	brne	.-4      	; 0x12ea <send_mouse+0x1c>
    12ee:	00 00       	nop
    12f0:	21 11       	cpse	r18, r1
    12f2:	f5 cf       	rjmp	.-22     	; 0x12de <send_mouse+0x10>
    12f4:	20 91 e8 00 	lds	r18, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    12f8:	25 ff       	sbrs	r18, 5
    12fa:	0b c0       	rjmp	.+22     	; 0x1312 <send_mouse+0x44>

    /* Write Mouse Report Data */
    Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
    12fc:	40 e0       	ldi	r20, 0x00	; 0
    12fe:	50 e0       	ldi	r21, 0x00	; 0
    1300:	65 e0       	ldi	r22, 0x05	; 5
    1302:	70 e0       	ldi	r23, 0x00	; 0
    1304:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1308:	80 91 e8 00 	lds	r24, 0x00E8
    130c:	8e 77       	andi	r24, 0x7E	; 126
    130e:	80 93 e8 00 	sts	0x00E8, r24
    1312:	08 95       	ret

00001314 <send_keyboard>:
{
    return keyboard_led_stats;
}

static void send_keyboard(report_keyboard_t *report)
{
    1314:	cf 93       	push	r28
    1316:	df 93       	push	r29
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1318:	20 91 ed 01 	lds	r18, 0x01ED
    131c:	24 30       	cpi	r18, 0x04	; 4
    131e:	09 f0       	breq	.+2      	; 0x1322 <send_keyboard+0xe>
    1320:	48 c0       	rjmp	.+144    	; 0x13b2 <send_keyboard+0x9e>
    1322:	ec 01       	movw	r28, r24
        return;

    /* Select the Keyboard Report Endpoint */
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    1324:	80 91 0b 01 	lds	r24, 0x010B
    1328:	88 23       	and	r24, r24
    132a:	e1 f0       	breq	.+56     	; 0x1364 <send_keyboard+0x50>
    132c:	80 91 0c 01 	lds	r24, 0x010C
    1330:	88 23       	and	r24, r24
    1332:	c1 f0       	breq	.+48     	; 0x1364 <send_keyboard+0x50>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1334:	85 e0       	ldi	r24, 0x05	; 5
    1336:	80 93 e9 00 	sts	0x00E9, r24
    133a:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    133c:	90 91 e8 00 	lds	r25, 0x00E8
    1340:	81 50       	subi	r24, 0x01	; 1
        /* Report protocol - NKRO */
        Endpoint_SelectEndpoint(NKRO_IN_EPNUM);

        /* Check if write ready for a polling interval around 1ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(4);
    1342:	95 fd       	sbrc	r25, 5
    1344:	06 c0       	rjmp	.+12     	; 0x1352 <send_keyboard+0x3e>
    1346:	95 e1       	ldi	r25, 0x15	; 21
    1348:	9a 95       	dec	r25
    134a:	f1 f7       	brne	.-4      	; 0x1348 <send_keyboard+0x34>
    134c:	00 00       	nop
    134e:	81 11       	cpse	r24, r1
    1350:	f5 cf       	rjmp	.-22     	; 0x133c <send_keyboard+0x28>
    1352:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    1356:	85 ff       	sbrs	r24, 5
    1358:	2c c0       	rjmp	.+88     	; 0x13b2 <send_keyboard+0x9e>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
    135a:	40 e0       	ldi	r20, 0x00	; 0
    135c:	50 e0       	ldi	r21, 0x00	; 0
    135e:	60 e2       	ldi	r22, 0x20	; 32
    1360:	70 e0       	ldi	r23, 0x00	; 0
    1362:	17 c0       	rjmp	.+46     	; 0x1392 <send_keyboard+0x7e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	80 93 e9 00 	sts	0x00E9, r24
    136a:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    136c:	90 91 e8 00 	lds	r25, 0x00E8
    1370:	81 50       	subi	r24, 0x01	; 1
    {
        /* Boot protocol */
        Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);

        /* Check if write ready for a polling interval around 10ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1372:	95 fd       	sbrc	r25, 5
    1374:	06 c0       	rjmp	.+12     	; 0x1382 <send_keyboard+0x6e>
    1376:	95 ed       	ldi	r25, 0xD5	; 213
    1378:	9a 95       	dec	r25
    137a:	f1 f7       	brne	.-4      	; 0x1378 <send_keyboard+0x64>
    137c:	00 00       	nop
    137e:	81 11       	cpse	r24, r1
    1380:	f5 cf       	rjmp	.-22     	; 0x136c <send_keyboard+0x58>
    1382:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    1386:	85 ff       	sbrs	r24, 5
    1388:	14 c0       	rjmp	.+40     	; 0x13b2 <send_keyboard+0x9e>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    138a:	40 e0       	ldi	r20, 0x00	; 0
    138c:	50 e0       	ldi	r21, 0x00	; 0
    138e:	68 e0       	ldi	r22, 0x08	; 8
    1390:	70 e0       	ldi	r23, 0x00	; 0
    1392:	ce 01       	movw	r24, r28
    1394:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1398:	80 91 e8 00 	lds	r24, 0x00E8
    139c:	8e 77       	andi	r24, 0x7E	; 126
    139e:	80 93 e8 00 	sts	0x00E8, r24
    }

    /* Finalize the stream transfer to send the last packet */
    Endpoint_ClearIN();

    keyboard_report_sent = *report;
    13a2:	80 e2       	ldi	r24, 0x20	; 32
    13a4:	fe 01       	movw	r30, r28
    13a6:	a7 e4       	ldi	r26, 0x47	; 71
    13a8:	b1 e0       	ldi	r27, 0x01	; 1
    13aa:	01 90       	ld	r0, Z+
    13ac:	0d 92       	st	X+, r0
    13ae:	8a 95       	dec	r24
    13b0:	e1 f7       	brne	.-8      	; 0x13aa <send_keyboard+0x96>
}
    13b2:	df 91       	pop	r29
    13b4:	cf 91       	pop	r28
    13b6:	08 95       	ret

000013b8 <EVENT_USB_Device_Connect>:
 * 2) EVENT_USB_Device_Reset
 * 3) EVENT_USB_Device_Wake
*/
void EVENT_USB_Device_Connect(void)
{
    print("[C]");
    13b8:	8e e0       	ldi	r24, 0x0E	; 14
    13ba:	93 e0       	ldi	r25, 0x03	; 3
    13bc:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    /* For battery powered device */
    if (!USB_IsInitialized) {
    13c0:	80 91 ec 01 	lds	r24, 0x01EC
    13c4:	81 11       	cpse	r24, r1
    13c6:	09 c0       	rjmp	.+18     	; 0x13da <EVENT_USB_Device_Connect+0x22>
        USB_Disable();
    13c8:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <USB_Disable>
        USB_Init();
    13cc:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    13d0:	80 91 e2 00 	lds	r24, 0x00E2
    13d4:	84 60       	ori	r24, 0x04	; 4
    13d6:	80 93 e2 00 	sts	0x00E2, r24
    13da:	08 95       	ret

000013dc <EVENT_USB_Device_Disconnect>:
    }
}

void EVENT_USB_Device_Disconnect(void)
{
    print("[D]");
    13dc:	8a e0       	ldi	r24, 0x0A	; 10
    13de:	93 e0       	ldi	r25, 0x03	; 3
    13e0:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    /* For battery powered device */
    USB_IsInitialized = false;
    13e4:	10 92 ec 01 	sts	0x01EC, r1
    13e8:	08 95       	ret

000013ea <EVENT_USB_Device_Reset>:
*/
}

void EVENT_USB_Device_Reset(void)
{
    print("[R]");
    13ea:	86 e0       	ldi	r24, 0x06	; 6
    13ec:	93 e0       	ldi	r25, 0x03	; 3
    13ee:	0c 94 d2 06 	jmp	0xda4	; 0xda4 <xputs>

000013f2 <EVENT_USB_Device_StartOfFrame>:

// called every 1ms
void EVENT_USB_Device_StartOfFrame(void)
{
    static uint8_t count;
    if (++count % 50) return;
    13f2:	20 91 45 01 	lds	r18, 0x0145
    13f6:	2f 5f       	subi	r18, 0xFF	; 255
    13f8:	82 2f       	mov	r24, r18
    13fa:	62 e3       	ldi	r22, 0x32	; 50
    13fc:	0e 94 e3 29 	call	0x53c6	; 0x53c6 <__udivmodqi4>
    1400:	99 23       	and	r25, r25
    1402:	19 f0       	breq	.+6      	; 0x140a <EVENT_USB_Device_StartOfFrame+0x18>
    1404:	20 93 45 01 	sts	0x0145, r18
    1408:	08 95       	ret
    count = 0;
    140a:	10 92 45 01 	sts	0x0145, r1

    if (!console_flush) return;
    140e:	80 91 46 01 	lds	r24, 0x0146
    1412:	88 23       	and	r24, r24
    1414:	71 f1       	breq	.+92     	; 0x1472 <EVENT_USB_Device_StartOfFrame+0x80>
 ******************************************************************************/
#ifdef CONSOLE_ENABLE
static void Console_Task(void)
{
    /* Device must be connected and configured for the task to run */
    if (USB_DeviceState != DEVICE_STATE_Configured)
    1416:	80 91 ed 01 	lds	r24, 0x01ED
    141a:	84 30       	cpi	r24, 0x04	; 4
    141c:	41 f5       	brne	.+80     	; 0x146e <EVENT_USB_Device_StartOfFrame+0x7c>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    141e:	80 91 e9 00 	lds	r24, 0x00E9
    1422:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1424:	20 91 ec 00 	lds	r18, 0x00EC
    1428:	92 2f       	mov	r25, r18
    142a:	91 70       	andi	r25, 0x01	; 1
    142c:	20 fd       	sbrc	r18, 0
    142e:	90 e8       	ldi	r25, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1430:	89 2b       	or	r24, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1432:	94 e0       	ldi	r25, 0x04	; 4
    1434:	90 93 e9 00 	sts	0x00E9, r25
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1438:	90 91 eb 00 	lds	r25, 0x00EB
    }
#endif

    /* IN packet */
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    143c:	90 ff       	sbrs	r25, 0
    143e:	14 c0       	rjmp	.+40     	; 0x1468 <EVENT_USB_Device_StartOfFrame+0x76>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1440:	90 91 ee 00 	lds	r25, 0x00EE
    1444:	97 ff       	sbrs	r25, 7
    1446:	10 c0       	rjmp	.+32     	; 0x1468 <EVENT_USB_Device_StartOfFrame+0x76>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1448:	90 91 e8 00 	lds	r25, 0x00E8
        Endpoint_SelectEndpoint(ep);
        return;
    }

    // fill empty bank
    while (Endpoint_IsReadWriteAllowed())
    144c:	95 ff       	sbrs	r25, 5
    144e:	03 c0       	rjmp	.+6      	; 0x1456 <EVENT_USB_Device_StartOfFrame+0x64>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1450:	10 92 f1 00 	sts	0x00F1, r1
    1454:	f9 cf       	rjmp	.-14     	; 0x1448 <EVENT_USB_Device_StartOfFrame+0x56>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1456:	90 91 e8 00 	lds	r25, 0x00E8
        Endpoint_Write_8(0);

    // flash senchar packet
    if (Endpoint_IsINReady()) {
    145a:	90 ff       	sbrs	r25, 0
    145c:	05 c0       	rjmp	.+10     	; 0x1468 <EVENT_USB_Device_StartOfFrame+0x76>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    145e:	90 91 e8 00 	lds	r25, 0x00E8
    1462:	9e 77       	andi	r25, 0x7E	; 126
    1464:	90 93 e8 00 	sts	0x00E8, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1468:	8f 70       	andi	r24, 0x0F	; 15
    146a:	80 93 e9 00 	sts	0x00E9, r24
    if (++count % 50) return;
    count = 0;

    if (!console_flush) return;
    Console_Task();
    console_flush = false;
    146e:	10 92 46 01 	sts	0x0146, r1
    1472:	08 95       	ret

00001474 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1474:	42 e0       	ldi	r20, 0x02	; 2
    1476:	61 ec       	ldi	r22, 0xC1	; 193
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <Endpoint_ConfigureEndpoint_Prv>
    147e:	42 e0       	ldi	r20, 0x02	; 2
    1480:	61 ec       	ldi	r22, 0xC1	; 193
    1482:	82 e0       	ldi	r24, 0x02	; 2
    1484:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <Endpoint_ConfigureEndpoint_Prv>
    1488:	42 e0       	ldi	r20, 0x02	; 2
    148a:	61 ec       	ldi	r22, 0xC1	; 193
    148c:	83 e0       	ldi	r24, 0x03	; 3
    148e:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <Endpoint_ConfigureEndpoint_Prv>
    1492:	42 e2       	ldi	r20, 0x22	; 34
    1494:	61 ec       	ldi	r22, 0xC1	; 193
    1496:	84 e0       	ldi	r24, 0x04	; 4
    1498:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <Endpoint_ConfigureEndpoint_Prv>
    149c:	42 e2       	ldi	r20, 0x22	; 34
    149e:	61 ec       	ldi	r22, 0xC1	; 193
    14a0:	85 e0       	ldi	r24, 0x05	; 5
    14a2:	0c 94 ea 0c 	jmp	0x19d4	; 0x19d4 <Endpoint_ConfigureEndpoint_Prv>

000014a6 <EVENT_USB_Device_ControlRequest>:
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;

    /* Handle HID Class specific requests */
    switch (USB_ControlRequest.bRequest)
    14a6:	80 91 ef 01 	lds	r24, 0x01EF
    14aa:	83 30       	cpi	r24, 0x03	; 3
    14ac:	09 f4       	brne	.+2      	; 0x14b0 <EVENT_USB_Device_ControlRequest+0xa>
    14ae:	55 c0       	rjmp	.+170    	; 0x155a <EVENT_USB_Device_ControlRequest+0xb4>
    14b0:	30 f4       	brcc	.+12     	; 0x14be <EVENT_USB_Device_ControlRequest+0x18>
    14b2:	81 30       	cpi	r24, 0x01	; 1
    14b4:	71 f0       	breq	.+28     	; 0x14d2 <EVENT_USB_Device_ControlRequest+0x2c>
    14b6:	82 30       	cpi	r24, 0x02	; 2
    14b8:	09 f4       	brne	.+2      	; 0x14bc <EVENT_USB_Device_ControlRequest+0x16>
    14ba:	8e c0       	rjmp	.+284    	; 0x15d8 <EVENT_USB_Device_ControlRequest+0x132>
    14bc:	08 95       	ret
    14be:	8a 30       	cpi	r24, 0x0A	; 10
    14c0:	09 f4       	brne	.+2      	; 0x14c4 <EVENT_USB_Device_ControlRequest+0x1e>
    14c2:	7a c0       	rjmp	.+244    	; 0x15b8 <EVENT_USB_Device_ControlRequest+0x112>
    14c4:	8b 30       	cpi	r24, 0x0B	; 11
    14c6:	09 f4       	brne	.+2      	; 0x14ca <EVENT_USB_Device_ControlRequest+0x24>
    14c8:	60 c0       	rjmp	.+192    	; 0x158a <EVENT_USB_Device_ControlRequest+0xe4>
    14ca:	89 30       	cpi	r24, 0x09	; 9
    14cc:	09 f0       	breq	.+2      	; 0x14d0 <EVENT_USB_Device_ControlRequest+0x2a>
    14ce:	9c c0       	rjmp	.+312    	; 0x1608 <EVENT_USB_Device_ControlRequest+0x162>
    14d0:	20 c0       	rjmp	.+64     	; 0x1512 <EVENT_USB_Device_ControlRequest+0x6c>
    {
        case HID_REQ_GetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    14d2:	80 91 ee 01 	lds	r24, 0x01EE
    14d6:	81 3a       	cpi	r24, 0xA1	; 161
    14d8:	09 f0       	breq	.+2      	; 0x14dc <EVENT_USB_Device_ControlRequest+0x36>
    14da:	96 c0       	rjmp	.+300    	; 0x1608 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    14dc:	80 91 e8 00 	lds	r24, 0x00E8
    14e0:	87 7f       	andi	r24, 0xF7	; 247
    14e2:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();

                // Interface
                switch (USB_ControlRequest.wIndex) {
    14e6:	80 91 f2 01 	lds	r24, 0x01F2
    14ea:	90 91 f3 01 	lds	r25, 0x01F3
    14ee:	89 2b       	or	r24, r25
    14f0:	21 f4       	brne	.+8      	; 0x14fa <EVENT_USB_Device_ControlRequest+0x54>
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
                    ReportSize = sizeof(keyboard_report_sent);
    14f2:	60 e2       	ldi	r22, 0x20	; 32

                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
    14f4:	87 e4       	ldi	r24, 0x47	; 71
    14f6:	91 e0       	ldi	r25, 0x01	; 1
    14f8:	03 c0       	rjmp	.+6      	; 0x1500 <EVENT_USB_Device_ControlRequest+0x5a>
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;
    14fa:	60 e0       	ldi	r22, 0x00	; 0
/** Event handler for the USB_ControlRequest event.
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    14fc:	80 e0       	ldi	r24, 0x00	; 0
    14fe:	90 e0       	ldi	r25, 0x00	; 0
                    ReportSize = sizeof(keyboard_report_sent);
                    break;
                }

                /* Write the report data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    1500:	70 e0       	ldi	r23, 0x00	; 0
    1502:	0e 94 26 0c 	call	0x184c	; 0x184c <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1506:	80 91 e8 00 	lds	r24, 0x00E8
    150a:	8b 77       	andi	r24, 0x7B	; 123
    150c:	80 93 e8 00 	sts	0x00E8, r24
    1510:	08 95       	ret
                Endpoint_ClearOUT();
            }

            break;
        case HID_REQ_SetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1512:	80 91 ee 01 	lds	r24, 0x01EE
    1516:	81 32       	cpi	r24, 0x21	; 33
    1518:	09 f0       	breq	.+2      	; 0x151c <EVENT_USB_Device_ControlRequest+0x76>
    151a:	76 c0       	rjmp	.+236    	; 0x1608 <EVENT_USB_Device_ControlRequest+0x162>
            {

                // Interface
                switch (USB_ControlRequest.wIndex) {
    151c:	80 91 f2 01 	lds	r24, 0x01F2
    1520:	90 91 f3 01 	lds	r25, 0x01F3
    1524:	00 97       	sbiw	r24, 0x00	; 0
    1526:	19 f0       	breq	.+6      	; 0x152e <EVENT_USB_Device_ControlRequest+0x88>
    1528:	04 97       	sbiw	r24, 0x04	; 4
    152a:	09 f0       	breq	.+2      	; 0x152e <EVENT_USB_Device_ControlRequest+0x88>
    152c:	6d c0       	rjmp	.+218    	; 0x1608 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    152e:	80 91 e8 00 	lds	r24, 0x00E8
    1532:	87 7f       	andi	r24, 0xF7	; 247
    1534:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1538:	80 91 e8 00 	lds	r24, 0x00E8
#ifdef NKRO_ENABLE
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
    153c:	82 fd       	sbrc	r24, 2
    153e:	05 c0       	rjmp	.+10     	; 0x154a <EVENT_USB_Device_ControlRequest+0xa4>
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    1540:	80 91 ed 01 	lds	r24, 0x01ED
    1544:	81 11       	cpse	r24, r1
    1546:	f8 cf       	rjmp	.-16     	; 0x1538 <EVENT_USB_Device_ControlRequest+0x92>
    1548:	5f c0       	rjmp	.+190    	; 0x1608 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    154a:	80 91 f1 00 	lds	r24, 0x00F1
                          return;
                    }
                    keyboard_led_stats = Endpoint_Read_8();
    154e:	80 93 67 01 	sts	0x0167, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1552:	80 91 e8 00 	lds	r24, 0x00E8
    1556:	8b 77       	andi	r24, 0x7B	; 123
    1558:	53 c0       	rjmp	.+166    	; 0x1600 <EVENT_USB_Device_ControlRequest+0x15a>
            }

            break;

        case HID_REQ_GetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    155a:	80 91 ee 01 	lds	r24, 0x01EE
    155e:	81 3a       	cpi	r24, 0xA1	; 161
    1560:	09 f0       	breq	.+2      	; 0x1564 <EVENT_USB_Device_ControlRequest+0xbe>
    1562:	52 c0       	rjmp	.+164    	; 0x1608 <EVENT_USB_Device_ControlRequest+0x162>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    1564:	80 91 f2 01 	lds	r24, 0x01F2
    1568:	90 91 f3 01 	lds	r25, 0x01F3
    156c:	89 2b       	or	r24, r25
    156e:	09 f0       	breq	.+2      	; 0x1572 <EVENT_USB_Device_ControlRequest+0xcc>
    1570:	4b c0       	rjmp	.+150    	; 0x1608 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1572:	80 91 e8 00 	lds	r24, 0x00E8
    1576:	87 7f       	andi	r24, 0xF7	; 247
    1578:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    157c:	80 91 e8 00 	lds	r24, 0x00E8
                    Endpoint_ClearSETUP();
                    while (!(Endpoint_IsINReady()));
    1580:	80 ff       	sbrs	r24, 0
    1582:	fc cf       	rjmp	.-8      	; 0x157c <EVENT_USB_Device_ControlRequest+0xd6>
                    Endpoint_Write_8(keyboard_protocol);
    1584:	80 91 0b 01 	lds	r24, 0x010B
    1588:	36 c0       	rjmp	.+108    	; 0x15f6 <EVENT_USB_Device_ControlRequest+0x150>
                }
            }

            break;
        case HID_REQ_SetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    158a:	80 91 ee 01 	lds	r24, 0x01EE
    158e:	81 32       	cpi	r24, 0x21	; 33
    1590:	d9 f5       	brne	.+118    	; 0x1608 <EVENT_USB_Device_ControlRequest+0x162>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    1592:	80 91 f2 01 	lds	r24, 0x01F2
    1596:	90 91 f3 01 	lds	r25, 0x01F3
    159a:	89 2b       	or	r24, r25
    159c:	a9 f5       	brne	.+106    	; 0x1608 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    159e:	80 91 e8 00 	lds	r24, 0x00E8
    15a2:	87 7f       	andi	r24, 0xF7	; 247
    15a4:	80 93 e8 00 	sts	0x00E8, r24
                    Endpoint_ClearSETUP();
                    Endpoint_ClearStatusStage();
    15a8:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <Endpoint_ClearStatusStage>

                    keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
    15ac:	80 91 f0 01 	lds	r24, 0x01F0
    15b0:	80 93 0b 01 	sts	0x010B, r24
                    clear_keyboard();
    15b4:	0c 94 6b 16 	jmp	0x2cd6	; 0x2cd6 <clear_keyboard>
                }
            }

            break;
        case HID_REQ_SetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    15b8:	80 91 ee 01 	lds	r24, 0x01EE
    15bc:	81 32       	cpi	r24, 0x21	; 33
    15be:	21 f5       	brne	.+72     	; 0x1608 <EVENT_USB_Device_ControlRequest+0x162>
    15c0:	80 91 e8 00 	lds	r24, 0x00E8
    15c4:	87 7f       	andi	r24, 0xF7	; 247
    15c6:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
    15ca:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <Endpoint_ClearStatusStage>

                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    15ce:	80 91 f1 01 	lds	r24, 0x01F1
    15d2:	80 93 68 01 	sts	0x0168, r24
    15d6:	08 95       	ret
            }

            break;
        case HID_REQ_GetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    15d8:	80 91 ee 01 	lds	r24, 0x01EE
    15dc:	81 3a       	cpi	r24, 0xA1	; 161
    15de:	a1 f4       	brne	.+40     	; 0x1608 <EVENT_USB_Device_ControlRequest+0x162>
    15e0:	80 91 e8 00 	lds	r24, 0x00E8
    15e4:	87 7f       	andi	r24, 0xF7	; 247
    15e6:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    15ea:	80 91 e8 00 	lds	r24, 0x00E8
            {
                Endpoint_ClearSETUP();
                while (!(Endpoint_IsINReady()));
    15ee:	80 ff       	sbrs	r24, 0
    15f0:	fc cf       	rjmp	.-8      	; 0x15ea <EVENT_USB_Device_ControlRequest+0x144>
                Endpoint_Write_8(keyboard_idle);
    15f2:	80 91 68 01 	lds	r24, 0x0168
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    15f6:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    15fa:	80 91 e8 00 	lds	r24, 0x00E8
    15fe:	8e 77       	andi	r24, 0x7E	; 126
    1600:	80 93 e8 00 	sts	0x00E8, r24
                Endpoint_ClearIN();
                Endpoint_ClearStatusStage();
    1604:	0c 94 1f 0d 	jmp	0x1a3e	; 0x1a3e <Endpoint_ClearStatusStage>
    1608:	08 95       	ret

0000160a <hook_early_init>:
}


/* hooks */
__attribute__((weak))
void hook_early_init(void) {}
    160a:	08 95       	ret

0000160c <hook_late_init>:

__attribute__((weak))
void hook_late_init(void) {}
    160c:	08 95       	ret

0000160e <hook_usb_suspend_entry>:

 __attribute__((weak))
void hook_usb_suspend_entry(void)
{
    160e:	08 95       	ret

00001610 <EVENT_USB_Device_Suspend>:
    print("[R]");
}

void EVENT_USB_Device_Suspend()
{
    print("[S]");
    1610:	82 e0       	ldi	r24, 0x02	; 2
    1612:	93 e0       	ldi	r25, 0x03	; 3
    1614:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    hook_usb_suspend_entry();
    1618:	0c 94 07 0b 	jmp	0x160e	; 0x160e <hook_usb_suspend_entry>

0000161c <hook_usb_suspend_loop>:
}

__attribute__((weak))
void hook_usb_suspend_loop(void)
{
    suspend_power_down();
    161c:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <suspend_power_down>
    if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    1620:	80 91 eb 01 	lds	r24, 0x01EB
    1624:	88 23       	and	r24, r24
    1626:	29 f0       	breq	.+10     	; 0x1632 <hook_usb_suspend_loop+0x16>
    1628:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <suspend_wakeup_condition>
    162c:	81 11       	cpse	r24, r1
            USB_Device_SendRemoteWakeup();
    162e:	0c 94 c5 0b 	jmp	0x178a	; 0x178a <USB_Device_SendRemoteWakeup>
    1632:	08 95       	ret

00001634 <main>:
 * main
 ******************************************************************************/
static void setup_mcu(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
    1634:	84 b7       	in	r24, 0x34	; 52
    1636:	87 7f       	andi	r24, 0xF7	; 247
    1638:	84 bf       	out	0x34, r24	; 52
    163a:	0f b6       	in	r0, 0x3f	; 63
    163c:	f8 94       	cli
    163e:	a8 95       	wdr
    1640:	80 91 60 00 	lds	r24, 0x0060
    1644:	88 61       	ori	r24, 0x18	; 24
    1646:	80 93 60 00 	sts	0x0060, r24
    164a:	10 92 60 00 	sts	0x0060, r1
    164e:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	80 e8       	ldi	r24, 0x80	; 128
    1654:	0f b6       	in	r0, 0x3f	; 63
    1656:	f8 94       	cli
    1658:	80 93 61 00 	sts	0x0061, r24
    165c:	90 93 61 00 	sts	0x0061, r25
    1660:	0f be       	out	0x3f, r0	; 63

int main(void)  __attribute__ ((weak));
int main(void)
{
    setup_mcu();
    hook_early_init();
    1662:	0e 94 05 0b 	call	0x160a	; 0x160a <hook_early_init>
    keyboard_setup();
    1666:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <keyboard_setup>
}

static void setup_usb(void)
{
    // Leonardo needs. Without this USB device is not recognized.
    USB_Disable();
    166a:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <USB_Disable>

    USB_Init();
    166e:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <USB_Init>
    1672:	80 91 e2 00 	lds	r24, 0x00E2
    1676:	84 60       	ori	r24, 0x04	; 4
    1678:	80 93 e2 00 	sts	0x00E2, r24

    // for Console_Task
    USB_Device_EnableSOFEvents();
    print_set_sendchar(sendchar);
    167c:	8c e9       	ldi	r24, 0x9C	; 156
    167e:	98 e0       	ldi	r25, 0x08	; 8
    1680:	0e 94 9b 1c 	call	0x3936	; 0x3936 <print_set_sendchar>
{
    setup_mcu();
    hook_early_init();
    keyboard_setup();
    setup_usb();
    sei();
    1684:	78 94       	sei

    /* wait for USB startup & debug output */
    while (USB_DeviceState != DEVICE_STATE_Configured) {
    1686:	80 91 ed 01 	lds	r24, 0x01ED
    168a:	84 30       	cpi	r24, 0x04	; 4
    168c:	e1 f7       	brne	.-8      	; 0x1686 <main+0x52>
        ;
#else
        USB_USBTask();
#endif
    }
    print("USB configured.\n");
    168e:	8d ee       	ldi	r24, 0xED	; 237
    1690:	92 e0       	ldi	r25, 0x02	; 2
    1692:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>

    /* init modules */
    keyboard_init();
    1696:	0e 94 e6 10 	call	0x21cc	; 0x21cc <keyboard_init>
    host_set_driver(&lufa_driver);
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	91 e0       	ldi	r25, 0x01	; 1
    169e:	0e 94 52 10 	call	0x20a4	; 0x20a4 <host_set_driver>
#ifdef SLEEP_LED_ENABLE
    sleep_led_init();
#endif

    print("Keyboard start.\n");
    16a2:	8c ed       	ldi	r24, 0xDC	; 220
    16a4:	92 e0       	ldi	r25, 0x02	; 2
    16a6:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    hook_late_init();
    16aa:	0e 94 06 0b 	call	0x160c	; 0x160c <hook_late_init>
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    16ae:	80 91 ed 01 	lds	r24, 0x01ED
    16b2:	85 30       	cpi	r24, 0x05	; 5
    16b4:	39 f4       	brne	.+14     	; 0x16c4 <main+0x90>
            print("[s]");
    16b6:	88 ed       	ldi	r24, 0xD8	; 216
    16b8:	92 e0       	ldi	r25, 0x02	; 2
    16ba:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
            hook_usb_suspend_loop();
    16be:	0e 94 0e 0b 	call	0x161c	; 0x161c <hook_usb_suspend_loop>
    16c2:	f5 cf       	rjmp	.-22     	; 0x16ae <main+0x7a>
        }

        keyboard_task();
    16c4:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <keyboard_task>

#if !defined(INTERRUPT_CONTROL_ENDPOINT)
        USB_USBTask();
#endif
    }
    16c8:	f2 cf       	rjmp	.-28     	; 0x16ae <main+0x7a>

000016ca <hook_usb_wakeup>:
}

__attribute__((weak))
void hook_usb_wakeup(void)
{
    suspend_wakeup_init();
    16ca:	0c 94 24 1d 	jmp	0x3a48	; 0x3a48 <suspend_wakeup_init>

000016ce <EVENT_USB_Device_WakeUp>:
    hook_usb_suspend_entry();
}

void EVENT_USB_Device_WakeUp()
{
    print("[W]");
    16ce:	8e ef       	ldi	r24, 0xFE	; 254
    16d0:	92 e0       	ldi	r25, 0x02	; 2
    16d2:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    hook_usb_wakeup();
    16d6:	0c 94 65 0b 	jmp	0x16ca	; 0x16ca <hook_usb_wakeup>

000016da <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    16da:	29 2f       	mov	r18, r25
    16dc:	33 27       	eor	r19, r19
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    16de:	23 30       	cpi	r18, 0x03	; 3
    16e0:	31 05       	cpc	r19, r1
    16e2:	c9 f0       	breq	.+50     	; 0x1716 <CALLBACK_USB_GetDescriptor+0x3c>
    16e4:	64 f4       	brge	.+24     	; 0x16fe <CALLBACK_USB_GetDescriptor+0x24>
    16e6:	21 30       	cpi	r18, 0x01	; 1
    16e8:	31 05       	cpc	r19, r1
    16ea:	81 f0       	breq	.+32     	; 0x170c <CALLBACK_USB_GetDescriptor+0x32>
    16ec:	22 30       	cpi	r18, 0x02	; 2
    16ee:	31 05       	cpc	r19, r1
    16f0:	09 f0       	breq	.+2      	; 0x16f4 <CALLBACK_USB_GetDescriptor+0x1a>
    16f2:	43 c0       	rjmp	.+134    	; 0x177a <CALLBACK_USB_GetDescriptor+0xa0>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
    16f4:	8d e8       	ldi	r24, 0x8D	; 141
    16f6:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
    16f8:	26 e3       	ldi	r18, 0x36	; 54
    16fa:	33 e0       	ldi	r19, 0x03	; 3
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
    16fc:	42 c0       	rjmp	.+132    	; 0x1782 <CALLBACK_USB_GetDescriptor+0xa8>
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    16fe:	21 32       	cpi	r18, 0x21	; 33
    1700:	31 05       	cpc	r19, r1
    1702:	f1 f0       	breq	.+60     	; 0x1740 <CALLBACK_USB_GetDescriptor+0x66>
    1704:	22 32       	cpi	r18, 0x22	; 34
    1706:	31 05       	cpc	r19, r1
    1708:	41 f1       	breq	.+80     	; 0x175a <CALLBACK_USB_GetDescriptor+0x80>
    170a:	37 c0       	rjmp	.+110    	; 0x177a <CALLBACK_USB_GetDescriptor+0xa0>
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
    170c:	82 e1       	ldi	r24, 0x12	; 18
    170e:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
    1710:	23 ec       	ldi	r18, 0xC3	; 195
    1712:	33 e0       	ldi	r19, 0x03	; 3
    1714:	36 c0       	rjmp	.+108    	; 0x1782 <CALLBACK_USB_GetDescriptor+0xa8>
    1716:	99 27       	eor	r25, r25
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
    1718:	81 30       	cpi	r24, 0x01	; 1
    171a:	91 05       	cpc	r25, r1
    171c:	41 f0       	breq	.+16     	; 0x172e <CALLBACK_USB_GetDescriptor+0x54>
    171e:	82 30       	cpi	r24, 0x02	; 2
    1720:	91 05       	cpc	r25, r1
    1722:	41 f0       	breq	.+16     	; 0x1734 <CALLBACK_USB_GetDescriptor+0x5a>
    1724:	89 2b       	or	r24, r25
    1726:	49 f5       	brne	.+82     	; 0x177a <CALLBACK_USB_GetDescriptor+0xa0>
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    1728:	e2 e3       	ldi	r30, 0x32	; 50
    172a:	f3 e0       	ldi	r31, 0x03	; 3
    172c:	05 c0       	rjmp	.+10     	; 0x1738 <CALLBACK_USB_GetDescriptor+0x5e>
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    172e:	ee e1       	ldi	r30, 0x1E	; 30
    1730:	f3 e0       	ldi	r31, 0x03	; 3
    1732:	02 c0       	rjmp	.+4      	; 0x1738 <CALLBACK_USB_GetDescriptor+0x5e>
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    1734:	e2 e1       	ldi	r30, 0x12	; 18
    1736:	f3 e0       	ldi	r31, 0x03	; 3
    1738:	84 91       	lpm	r24, Z
    173a:	90 e0       	ldi	r25, 0x00	; 0
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
    173c:	9f 01       	movw	r18, r30
                    Size    = pgm_read_byte(&ProductString.Header.Size);
                    break;
    173e:	21 c0       	rjmp	.+66     	; 0x1782 <CALLBACK_USB_GetDescriptor+0xa8>
    1740:	65 30       	cpi	r22, 0x05	; 5
    1742:	d8 f4       	brcc	.+54     	; 0x177a <CALLBACK_USB_GetDescriptor+0xa0>
    1744:	e6 2f       	mov	r30, r22
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	ee 0f       	add	r30, r30
    174a:	ff 1f       	adc	r31, r31
    174c:	ec 5d       	subi	r30, 0xDC	; 220
    174e:	fe 4f       	sbci	r31, 0xFE	; 254
    1750:	20 81       	ld	r18, Z
    1752:	31 81       	ldd	r19, Z+1	; 0x01
    1754:	89 e0       	ldi	r24, 0x09	; 9
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	14 c0       	rjmp	.+40     	; 0x1782 <CALLBACK_USB_GetDescriptor+0xa8>
    175a:	65 30       	cpi	r22, 0x05	; 5
    175c:	70 f4       	brcc	.+28     	; 0x177a <CALLBACK_USB_GetDescriptor+0xa0>
    175e:	70 e0       	ldi	r23, 0x00	; 0
    1760:	fb 01       	movw	r30, r22
    1762:	ee 0f       	add	r30, r30
    1764:	ff 1f       	adc	r31, r31
    1766:	e6 5e       	subi	r30, 0xE6	; 230
    1768:	fe 4f       	sbci	r31, 0xFE	; 254
    176a:	20 81       	ld	r18, Z
    176c:	31 81       	ldd	r19, Z+1	; 0x01
    176e:	fb 01       	movw	r30, r22
    1770:	eb 5e       	subi	r30, 0xEB	; 235
    1772:	fe 4f       	sbci	r31, 0xFE	; 254
    1774:	80 81       	ld	r24, Z
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	04 c0       	rjmp	.+8      	; 0x1782 <CALLBACK_USB_GetDescriptor+0xa8>
    177a:	80 e0       	ldi	r24, 0x00	; 0
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	20 e0       	ldi	r18, 0x00	; 0
    1780:	30 e0       	ldi	r19, 0x00	; 0
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    1782:	fa 01       	movw	r30, r20
    1784:	31 83       	std	Z+1, r19	; 0x01
    1786:	20 83       	st	Z, r18
    return Size;
}
    1788:	08 95       	ret

0000178a <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    178a:	80 e1       	ldi	r24, 0x10	; 16
    178c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    178e:	82 e1       	ldi	r24, 0x12	; 18
    1790:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    1792:	09 b4       	in	r0, 0x29	; 41
    1794:	00 fe       	sbrs	r0, 0
    1796:	fd cf       	rjmp	.-6      	; 0x1792 <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1798:	80 91 d8 00 	lds	r24, 0x00D8
    179c:	8f 7d       	andi	r24, 0xDF	; 223
    179e:	80 93 d8 00 	sts	0x00D8, r24
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    17a2:	80 91 e0 00 	lds	r24, 0x00E0
    17a6:	82 60       	ori	r24, 0x02	; 2
    17a8:	80 93 e0 00 	sts	0x00E0, r24
	while (UDCON & (1 << RMWKUP));
    17ac:	80 91 e0 00 	lds	r24, 0x00E0
    17b0:	81 fd       	sbrc	r24, 1
    17b2:	fc cf       	rjmp	.-8      	; 0x17ac <USB_Device_SendRemoteWakeup+0x22>
}
    17b4:	08 95       	ret

000017b6 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    17b6:	cf 92       	push	r12
    17b8:	df 92       	push	r13
    17ba:	ef 92       	push	r14
    17bc:	ff 92       	push	r15
    17be:	0f 93       	push	r16
    17c0:	1f 93       	push	r17
    17c2:	cf 93       	push	r28
    17c4:	df 93       	push	r29
    17c6:	ec 01       	movw	r28, r24
    17c8:	8b 01       	movw	r16, r22
    17ca:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    17cc:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <Endpoint_WaitUntilReady>
    17d0:	81 11       	cpse	r24, r1
    17d2:	33 c0       	rjmp	.+102    	; 0x183a <Endpoint_Write_Stream_LE+0x84>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    17d4:	c1 14       	cp	r12, r1
    17d6:	d1 04       	cpc	r13, r1
    17d8:	39 f0       	breq	.+14     	; 0x17e8 <Endpoint_Write_Stream_LE+0x32>
	{
		Length -= *BytesProcessed;
    17da:	f6 01       	movw	r30, r12
    17dc:	80 81       	ld	r24, Z
    17de:	91 81       	ldd	r25, Z+1	; 0x01
    17e0:	08 1b       	sub	r16, r24
    17e2:	19 0b       	sbc	r17, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    17e4:	c8 0f       	add	r28, r24
    17e6:	d9 1f       	adc	r29, r25

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    17e8:	e1 2c       	mov	r14, r1
    17ea:	f1 2c       	mov	r15, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    17ec:	01 15       	cp	r16, r1
    17ee:	11 05       	cpc	r17, r1
    17f0:	19 f1       	breq	.+70     	; 0x1838 <Endpoint_Write_Stream_LE+0x82>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    17f2:	80 91 e8 00 	lds	r24, 0x00E8
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    17f6:	85 fd       	sbrc	r24, 5
    17f8:	16 c0       	rjmp	.+44     	; 0x1826 <Endpoint_Write_Stream_LE+0x70>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    17fa:	80 91 e8 00 	lds	r24, 0x00E8
    17fe:	8e 77       	andi	r24, 0x7E	; 126
    1800:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    1804:	c1 14       	cp	r12, r1
    1806:	d1 04       	cpc	r13, r1
    1808:	49 f0       	breq	.+18     	; 0x181c <Endpoint_Write_Stream_LE+0x66>
			{
				*BytesProcessed += BytesInTransfer;
    180a:	f6 01       	movw	r30, r12
    180c:	80 81       	ld	r24, Z
    180e:	91 81       	ldd	r25, Z+1	; 0x01
    1810:	e8 0e       	add	r14, r24
    1812:	f9 1e       	adc	r15, r25
    1814:	f1 82       	std	Z+1, r15	; 0x01
    1816:	e0 82       	st	Z, r14
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    1818:	85 e0       	ldi	r24, 0x05	; 5
    181a:	0f c0       	rjmp	.+30     	; 0x183a <Endpoint_Write_Stream_LE+0x84>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    181c:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <Endpoint_WaitUntilReady>
    1820:	88 23       	and	r24, r24
    1822:	21 f3       	breq	.-56     	; 0x17ec <Endpoint_Write_Stream_LE+0x36>
    1824:	0a c0       	rjmp	.+20     	; 0x183a <Endpoint_Write_Stream_LE+0x84>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1826:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1828:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    182c:	01 50       	subi	r16, 0x01	; 1
    182e:	11 09       	sbc	r17, r1
			BytesInTransfer++;
    1830:	ff ef       	ldi	r31, 0xFF	; 255
    1832:	ef 1a       	sub	r14, r31
    1834:	ff 0a       	sbc	r15, r31
    1836:	da cf       	rjmp	.-76     	; 0x17ec <Endpoint_Write_Stream_LE+0x36>
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
    1838:	80 e0       	ldi	r24, 0x00	; 0
}
    183a:	df 91       	pop	r29
    183c:	cf 91       	pop	r28
    183e:	1f 91       	pop	r17
    1840:	0f 91       	pop	r16
    1842:	ff 90       	pop	r15
    1844:	ef 90       	pop	r14
    1846:	df 90       	pop	r13
    1848:	cf 90       	pop	r12
    184a:	08 95       	ret

0000184c <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    184c:	20 91 f4 01 	lds	r18, 0x01F4
    1850:	30 91 f5 01 	lds	r19, 0x01F5
    1854:	26 17       	cp	r18, r22
    1856:	37 07       	cpc	r19, r23
    1858:	48 f0       	brcs	.+18     	; 0x186c <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    185a:	61 15       	cp	r22, r1
    185c:	71 05       	cpc	r23, r1
    185e:	39 f4       	brne	.+14     	; 0x186e <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1860:	20 91 e8 00 	lds	r18, 0x00E8
    1864:	2e 77       	andi	r18, 0x7E	; 126
    1866:	20 93 e8 00 	sts	0x00E8, r18
    186a:	01 c0       	rjmp	.+2      	; 0x186e <Endpoint_Write_Control_Stream_LE+0x22>
    186c:	b9 01       	movw	r22, r18
    186e:	40 e0       	ldi	r20, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1870:	61 15       	cp	r22, r1
    1872:	71 05       	cpc	r23, r1
    1874:	a9 f1       	breq	.+106    	; 0x18e0 <Endpoint_Write_Control_Stream_LE+0x94>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1876:	20 91 ed 01 	lds	r18, 0x01ED

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    187a:	22 23       	and	r18, r18
    187c:	09 f4       	brne	.+2      	; 0x1880 <Endpoint_Write_Control_Stream_LE+0x34>
    187e:	43 c0       	rjmp	.+134    	; 0x1906 <Endpoint_Write_Control_Stream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1880:	25 30       	cpi	r18, 0x05	; 5
    1882:	09 f4       	brne	.+2      	; 0x1886 <Endpoint_Write_Control_Stream_LE+0x3a>
    1884:	42 c0       	rjmp	.+132    	; 0x190a <Endpoint_Write_Control_Stream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1886:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    188a:	23 fd       	sbrc	r18, 3
    188c:	40 c0       	rjmp	.+128    	; 0x190e <Endpoint_Write_Control_Stream_LE+0xc2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    188e:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1892:	22 fd       	sbrc	r18, 2
    1894:	32 c0       	rjmp	.+100    	; 0x18fa <Endpoint_Write_Control_Stream_LE+0xae>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1896:	20 91 e8 00 	lds	r18, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    189a:	20 ff       	sbrs	r18, 0
    189c:	e9 cf       	rjmp	.-46     	; 0x1870 <Endpoint_Write_Control_Stream_LE+0x24>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    189e:	40 91 f3 00 	lds	r20, 0x00F3
    18a2:	20 91 f2 00 	lds	r18, 0x00F2
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	34 2b       	or	r19, r20
    18aa:	fc 01       	movw	r30, r24
    18ac:	cf 01       	movw	r24, r30
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    18ae:	61 15       	cp	r22, r1
    18b0:	71 05       	cpc	r23, r1
    18b2:	59 f0       	breq	.+22     	; 0x18ca <Endpoint_Write_Control_Stream_LE+0x7e>
    18b4:	28 30       	cpi	r18, 0x08	; 8
    18b6:	31 05       	cpc	r19, r1
    18b8:	40 f4       	brcc	.+16     	; 0x18ca <Endpoint_Write_Control_Stream_LE+0x7e>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    18ba:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    18bc:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    18c0:	61 50       	subi	r22, 0x01	; 1
    18c2:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    18c4:	2f 5f       	subi	r18, 0xFF	; 255
    18c6:	3f 4f       	sbci	r19, 0xFF	; 255
    18c8:	f1 cf       	rjmp	.-30     	; 0x18ac <Endpoint_Write_Control_Stream_LE+0x60>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    18ca:	41 e0       	ldi	r20, 0x01	; 1
    18cc:	28 30       	cpi	r18, 0x08	; 8
    18ce:	31 05       	cpc	r19, r1
    18d0:	09 f0       	breq	.+2      	; 0x18d4 <Endpoint_Write_Control_Stream_LE+0x88>
    18d2:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    18d4:	20 91 e8 00 	lds	r18, 0x00E8
    18d8:	2e 77       	andi	r18, 0x7E	; 126
    18da:	20 93 e8 00 	sts	0x00E8, r18
    18de:	c8 cf       	rjmp	.-112    	; 0x1870 <Endpoint_Write_Control_Stream_LE+0x24>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    18e0:	41 11       	cpse	r20, r1
    18e2:	c9 cf       	rjmp	.-110    	; 0x1876 <Endpoint_Write_Control_Stream_LE+0x2a>
    18e4:	0a c0       	rjmp	.+20     	; 0x18fa <Endpoint_Write_Control_Stream_LE+0xae>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    18e6:	80 91 ed 01 	lds	r24, 0x01ED

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    18ea:	88 23       	and	r24, r24
    18ec:	61 f0       	breq	.+24     	; 0x1906 <Endpoint_Write_Control_Stream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    18ee:	85 30       	cpi	r24, 0x05	; 5
    18f0:	61 f0       	breq	.+24     	; 0x190a <Endpoint_Write_Control_Stream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    18f2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    18f6:	83 fd       	sbrc	r24, 3
    18f8:	0a c0       	rjmp	.+20     	; 0x190e <Endpoint_Write_Control_Stream_LE+0xc2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    18fa:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    18fe:	82 ff       	sbrs	r24, 2
    1900:	f2 cf       	rjmp	.-28     	; 0x18e6 <Endpoint_Write_Control_Stream_LE+0x9a>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1902:	80 e0       	ldi	r24, 0x00	; 0
    1904:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1906:	82 e0       	ldi	r24, 0x02	; 2
    1908:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    190a:	83 e0       	ldi	r24, 0x03	; 3
    190c:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    190e:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1910:	08 95       	ret

00001912 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1912:	20 91 f4 01 	lds	r18, 0x01F4
    1916:	30 91 f5 01 	lds	r19, 0x01F5
    191a:	26 17       	cp	r18, r22
    191c:	37 07       	cpc	r19, r23
    191e:	48 f0       	brcs	.+18     	; 0x1932 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1920:	61 15       	cp	r22, r1
    1922:	71 05       	cpc	r23, r1
    1924:	39 f4       	brne	.+14     	; 0x1934 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1926:	20 91 e8 00 	lds	r18, 0x00E8
    192a:	2e 77       	andi	r18, 0x7E	; 126
    192c:	20 93 e8 00 	sts	0x00E8, r18
    1930:	01 c0       	rjmp	.+2      	; 0x1934 <Endpoint_Write_Control_PStream_LE+0x22>
    1932:	b9 01       	movw	r22, r18
    1934:	fc 01       	movw	r30, r24
    1936:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1938:	61 15       	cp	r22, r1
    193a:	71 05       	cpc	r23, r1
    193c:	91 f1       	breq	.+100    	; 0x19a2 <Endpoint_Write_Control_PStream_LE+0x90>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    193e:	80 91 ed 01 	lds	r24, 0x01ED

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1942:	88 23       	and	r24, r24
    1944:	09 f4       	brne	.+2      	; 0x1948 <Endpoint_Write_Control_PStream_LE+0x36>
    1946:	40 c0       	rjmp	.+128    	; 0x19c8 <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1948:	85 30       	cpi	r24, 0x05	; 5
    194a:	09 f4       	brne	.+2      	; 0x194e <Endpoint_Write_Control_PStream_LE+0x3c>
    194c:	3f c0       	rjmp	.+126    	; 0x19cc <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    194e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1952:	83 fd       	sbrc	r24, 3
    1954:	3d c0       	rjmp	.+122    	; 0x19d0 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1956:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    195a:	82 fd       	sbrc	r24, 2
    195c:	2f c0       	rjmp	.+94     	; 0x19bc <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    195e:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1962:	80 ff       	sbrs	r24, 0
    1964:	e9 cf       	rjmp	.-46     	; 0x1938 <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1966:	20 91 f3 00 	lds	r18, 0x00F3
    196a:	80 91 f2 00 	lds	r24, 0x00F2
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1972:	61 15       	cp	r22, r1
    1974:	71 05       	cpc	r23, r1
    1976:	59 f0       	breq	.+22     	; 0x198e <Endpoint_Write_Control_PStream_LE+0x7c>
    1978:	88 30       	cpi	r24, 0x08	; 8
    197a:	91 05       	cpc	r25, r1
    197c:	40 f4       	brcc	.+16     	; 0x198e <Endpoint_Write_Control_PStream_LE+0x7c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    197e:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1980:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1984:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1986:	61 50       	subi	r22, 0x01	; 1
    1988:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    198a:	01 96       	adiw	r24, 0x01	; 1
    198c:	f2 cf       	rjmp	.-28     	; 0x1972 <Endpoint_Write_Control_PStream_LE+0x60>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    198e:	21 e0       	ldi	r18, 0x01	; 1
    1990:	08 97       	sbiw	r24, 0x08	; 8
    1992:	09 f0       	breq	.+2      	; 0x1996 <Endpoint_Write_Control_PStream_LE+0x84>
    1994:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1996:	80 91 e8 00 	lds	r24, 0x00E8
    199a:	8e 77       	andi	r24, 0x7E	; 126
    199c:	80 93 e8 00 	sts	0x00E8, r24
    19a0:	cb cf       	rjmp	.-106    	; 0x1938 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    19a2:	21 11       	cpse	r18, r1
    19a4:	cc cf       	rjmp	.-104    	; 0x193e <Endpoint_Write_Control_PStream_LE+0x2c>
    19a6:	0a c0       	rjmp	.+20     	; 0x19bc <Endpoint_Write_Control_PStream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    19a8:	80 91 ed 01 	lds	r24, 0x01ED

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    19ac:	88 23       	and	r24, r24
    19ae:	61 f0       	breq	.+24     	; 0x19c8 <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    19b0:	85 30       	cpi	r24, 0x05	; 5
    19b2:	61 f0       	breq	.+24     	; 0x19cc <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    19b4:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    19b8:	83 fd       	sbrc	r24, 3
    19ba:	0a c0       	rjmp	.+20     	; 0x19d0 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    19bc:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    19c0:	82 ff       	sbrs	r24, 2
    19c2:	f2 cf       	rjmp	.-28     	; 0x19a8 <Endpoint_Write_Control_PStream_LE+0x96>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    19c4:	80 e0       	ldi	r24, 0x00	; 0
    19c6:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    19c8:	82 e0       	ldi	r24, 0x02	; 2
    19ca:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    19cc:	83 e0       	ldi	r24, 0x03	; 3
    19ce:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    19d0:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    19d2:	08 95       	ret

000019d4 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    19d4:	98 2f       	mov	r25, r24
    19d6:	97 30       	cpi	r25, 0x07	; 7
    19d8:	58 f5       	brcc	.+86     	; 0x1a30 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    19da:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    19de:	98 17       	cp	r25, r24
    19e0:	39 f0       	breq	.+14     	; 0x19f0 <Endpoint_ConfigureEndpoint_Prv+0x1c>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    19e2:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    19e6:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    19ea:	50 91 f0 00 	lds	r21, 0x00F0
    19ee:	03 c0       	rjmp	.+6      	; 0x19f6 <Endpoint_ConfigureEndpoint_Prv+0x22>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    19f0:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    19f2:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    19f4:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    19f6:	21 ff       	sbrs	r18, 1
    19f8:	19 c0       	rjmp	.+50     	; 0x1a2c <Endpoint_ConfigureEndpoint_Prv+0x58>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    19fa:	30 91 eb 00 	lds	r19, 0x00EB
    19fe:	3e 7f       	andi	r19, 0xFE	; 254
    1a00:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    1a04:	30 91 ed 00 	lds	r19, 0x00ED
    1a08:	3d 7f       	andi	r19, 0xFD	; 253
    1a0a:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    1a0e:	30 91 eb 00 	lds	r19, 0x00EB
    1a12:	31 60       	ori	r19, 0x01	; 1
    1a14:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    1a18:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    1a1c:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    1a20:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1a24:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    1a28:	27 ff       	sbrs	r18, 7
    1a2a:	07 c0       	rjmp	.+14     	; 0x1a3a <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1a2c:	9f 5f       	subi	r25, 0xFF	; 255
    1a2e:	d3 cf       	rjmp	.-90     	; 0x19d6 <Endpoint_ConfigureEndpoint_Prv+0x2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1a30:	8f 70       	andi	r24, 0x0F	; 15
    1a32:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    1a3c:	08 95       	ret

00001a3e <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1a3e:	80 91 ee 01 	lds	r24, 0x01EE
    1a42:	87 ff       	sbrs	r24, 7
    1a44:	11 c0       	rjmp	.+34     	; 0x1a68 <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1a46:	80 91 e8 00 	lds	r24, 0x00E8
	{
		while (!(Endpoint_IsOUTReceived()))
    1a4a:	82 fd       	sbrc	r24, 2
    1a4c:	05 c0       	rjmp	.+10     	; 0x1a58 <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1a4e:	80 91 ed 01 	lds	r24, 0x01ED
    1a52:	81 11       	cpse	r24, r1
    1a54:	f8 cf       	rjmp	.-16     	; 0x1a46 <Endpoint_ClearStatusStage+0x8>
    1a56:	11 c0       	rjmp	.+34     	; 0x1a7a <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1a58:	80 91 e8 00 	lds	r24, 0x00E8
    1a5c:	8b 77       	andi	r24, 0x7B	; 123
    1a5e:	0b c0       	rjmp	.+22     	; 0x1a76 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1a60:	80 91 ed 01 	lds	r24, 0x01ED
    1a64:	88 23       	and	r24, r24
    1a66:	49 f0       	breq	.+18     	; 0x1a7a <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1a68:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1a6c:	80 ff       	sbrs	r24, 0
    1a6e:	f8 cf       	rjmp	.-16     	; 0x1a60 <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a70:	80 91 e8 00 	lds	r24, 0x00E8
    1a74:	8e 77       	andi	r24, 0x7E	; 126
    1a76:	80 93 e8 00 	sts	0x00E8, r24
    1a7a:	08 95       	ret

00001a7c <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1a7c:	20 91 e4 00 	lds	r18, 0x00E4
    1a80:	30 91 e5 00 	lds	r19, 0x00E5
    1a84:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1a86:	40 91 ec 00 	lds	r20, 0x00EC
    1a8a:	84 2f       	mov	r24, r20
    1a8c:	81 70       	andi	r24, 0x01	; 1
    1a8e:	40 ff       	sbrs	r20, 0
    1a90:	22 c0       	rjmp	.+68     	; 0x1ad6 <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1a92:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1a96:	80 fd       	sbrc	r24, 0
    1a98:	1c c0       	rjmp	.+56     	; 0x1ad2 <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1a9a:	80 91 ed 01 	lds	r24, 0x01ED

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1a9e:	88 23       	and	r24, r24
    1aa0:	91 f0       	breq	.+36     	; 0x1ac6 <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1aa2:	85 30       	cpi	r24, 0x05	; 5
    1aa4:	91 f0       	breq	.+36     	; 0x1aca <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1aa6:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1aaa:	85 fd       	sbrc	r24, 5
    1aac:	10 c0       	rjmp	.+32     	; 0x1ace <Endpoint_WaitUntilReady+0x52>
    1aae:	40 91 e4 00 	lds	r20, 0x00E4
    1ab2:	50 91 e5 00 	lds	r21, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1ab6:	42 17       	cp	r20, r18
    1ab8:	53 07       	cpc	r21, r19
    1aba:	29 f3       	breq	.-54     	; 0x1a86 <Endpoint_WaitUntilReady+0xa>
    1abc:	9a 01       	movw	r18, r20
    1abe:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1ac0:	11 f7       	brne	.-60     	; 0x1a86 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    1ac2:	84 e0       	ldi	r24, 0x04	; 4
    1ac4:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1ac6:	82 e0       	ldi	r24, 0x02	; 2
    1ac8:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1aca:	83 e0       	ldi	r24, 0x03	; 3
    1acc:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1ad2:	80 e0       	ldi	r24, 0x00	; 0
    1ad4:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1ad6:	40 91 e8 00 	lds	r20, 0x00E8
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1ada:	42 ff       	sbrs	r20, 2
    1adc:	de cf       	rjmp	.-68     	; 0x1a9a <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    1ade:	08 95       	ret

00001ae0 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    1ae0:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1ae4:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1ae8:	e0 ee       	ldi	r30, 0xE0	; 224
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	81 60       	ori	r24, 0x01	; 1
    1af0:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    1af2:	e8 ed       	ldi	r30, 0xD8	; 216
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	80 81       	ld	r24, Z
    1af8:	8f 77       	andi	r24, 0x7F	; 127
    1afa:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1afc:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    1afe:	a7 ed       	ldi	r26, 0xD7	; 215
    1b00:	b0 e0       	ldi	r27, 0x00	; 0
    1b02:	8c 91       	ld	r24, X
    1b04:	8e 7f       	andi	r24, 0xFE	; 254
    1b06:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1b08:	80 81       	ld	r24, Z
    1b0a:	8f 7e       	andi	r24, 0xEF	; 239
    1b0c:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1b0e:	10 92 ec 01 	sts	0x01EC, r1
    1b12:	08 95       	ret

00001b14 <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
    1b14:	0f 93       	push	r16
    1b16:	1f 93       	push	r17
    1b18:	cf 93       	push	r28
    1b1a:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1b1c:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1b20:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1b24:	c8 ed       	ldi	r28, 0xD8	; 216
    1b26:	d0 e0       	ldi	r29, 0x00	; 0
    1b28:	88 81       	ld	r24, Y
    1b2a:	8f 77       	andi	r24, 0x7F	; 127
    1b2c:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    1b2e:	88 81       	ld	r24, Y
    1b30:	80 68       	ori	r24, 0x80	; 128
    1b32:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1b34:	88 81       	ld	r24, Y
    1b36:	8f 7d       	andi	r24, 0xDF	; 223
    1b38:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1b3a:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1b3c:	10 92 ed 01 	sts	0x01ED, r1
	USB_Device_ConfigurationNumber  = 0;
    1b40:	10 92 e9 01 	sts	0x01E9, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1b44:	10 92 eb 01 	sts	0x01EB, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1b48:	10 92 ea 01 	sts	0x01EA, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1b4c:	00 ee       	ldi	r16, 0xE0	; 224
    1b4e:	10 e0       	ldi	r17, 0x00	; 0
    1b50:	f8 01       	movw	r30, r16
    1b52:	80 81       	ld	r24, Z
    1b54:	8b 7f       	andi	r24, 0xFB	; 251
    1b56:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1b58:	88 81       	ld	r24, Y
    1b5a:	81 60       	ori	r24, 0x01	; 1
    1b5c:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1b5e:	42 e0       	ldi	r20, 0x02	; 2
    1b60:	60 e0       	ldi	r22, 0x00	; 0
    1b62:	80 e0       	ldi	r24, 0x00	; 0
    1b64:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1b68:	e1 ee       	ldi	r30, 0xE1	; 225
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	80 81       	ld	r24, Z
    1b6e:	8e 7f       	andi	r24, 0xFE	; 254
    1b70:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1b72:	e2 ee       	ldi	r30, 0xE2	; 226
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	80 81       	ld	r24, Z
    1b78:	81 60       	ori	r24, 0x01	; 1
    1b7a:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1b7c:	80 81       	ld	r24, Z
    1b7e:	88 60       	ori	r24, 0x08	; 8
    1b80:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1b82:	f8 01       	movw	r30, r16
    1b84:	80 81       	ld	r24, Z
    1b86:	8e 7f       	andi	r24, 0xFE	; 254
    1b88:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1b8a:	88 81       	ld	r24, Y
    1b8c:	80 61       	ori	r24, 0x10	; 16
    1b8e:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1b90:	df 91       	pop	r29
    1b92:	cf 91       	pop	r28
    1b94:	1f 91       	pop	r17
    1b96:	0f 91       	pop	r16
    1b98:	08 95       	ret

00001b9a <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1b9a:	e8 ed       	ldi	r30, 0xD8	; 216
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	80 81       	ld	r24, Z
    1ba0:	8f 7e       	andi	r24, 0xEF	; 239
    1ba2:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1ba4:	e7 ed       	ldi	r30, 0xD7	; 215
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	80 81       	ld	r24, Z
    1baa:	81 60       	ori	r24, 0x01	; 1
    1bac:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    1bae:	84 e0       	ldi	r24, 0x04	; 4
    1bb0:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	80 93 ec 01 	sts	0x01EC, r24

	USB_ResetInterface();
    1bb8:	0c 94 8a 0d 	jmp	0x1b14	; 0x1b14 <USB_ResetInterface>

00001bbc <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    1bbc:	e8 ed       	ldi	r30, 0xD8	; 216
    1bbe:	f0 e0       	ldi	r31, 0x00	; 0
    1bc0:	80 81       	ld	r24, Z
    1bc2:	8e 7f       	andi	r24, 0xFE	; 254
    1bc4:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1bc6:	10 92 e2 00 	sts	0x00E2, r1
    1bca:	08 95       	ret

00001bcc <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1bcc:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1bd0:	10 92 e1 00 	sts	0x00E1, r1
    1bd4:	08 95       	ret

00001bd6 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1bd6:	1f 92       	push	r1
    1bd8:	0f 92       	push	r0
    1bda:	0f b6       	in	r0, 0x3f	; 63
    1bdc:	0f 92       	push	r0
    1bde:	11 24       	eor	r1, r1
    1be0:	2f 93       	push	r18
    1be2:	3f 93       	push	r19
    1be4:	4f 93       	push	r20
    1be6:	5f 93       	push	r21
    1be8:	6f 93       	push	r22
    1bea:	7f 93       	push	r23
    1bec:	8f 93       	push	r24
    1bee:	9f 93       	push	r25
    1bf0:	af 93       	push	r26
    1bf2:	bf 93       	push	r27
    1bf4:	ef 93       	push	r30
    1bf6:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1bf8:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1bfc:	82 ff       	sbrs	r24, 2
    1bfe:	0b c0       	rjmp	.+22     	; 0x1c16 <__vector_10+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1c00:	80 91 e2 00 	lds	r24, 0x00E2
    1c04:	82 ff       	sbrs	r24, 2
    1c06:	07 c0       	rjmp	.+14     	; 0x1c16 <__vector_10+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1c08:	80 91 e1 00 	lds	r24, 0x00E1
    1c0c:	8b 7f       	andi	r24, 0xFB	; 251
    1c0e:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1c12:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1c16:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1c1a:	80 ff       	sbrs	r24, 0
    1c1c:	1f c0       	rjmp	.+62     	; 0x1c5c <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1c1e:	80 91 d8 00 	lds	r24, 0x00D8
    1c22:	80 ff       	sbrs	r24, 0
    1c24:	1b c0       	rjmp	.+54     	; 0x1c5c <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1c26:	80 91 da 00 	lds	r24, 0x00DA
    1c2a:	8e 7f       	andi	r24, 0xFE	; 254
    1c2c:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1c30:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1c34:	80 ff       	sbrs	r24, 0
    1c36:	0d c0       	rjmp	.+26     	; 0x1c52 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1c38:	80 e1       	ldi	r24, 0x10	; 16
    1c3a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1c3c:	82 e1       	ldi	r24, 0x12	; 18
    1c3e:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1c40:	09 b4       	in	r0, 0x29	; 41
    1c42:	00 fe       	sbrs	r0, 0
    1c44:	fd cf       	rjmp	.-6      	; 0x1c40 <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	80 93 ed 01 	sts	0x01ED, r24
			EVENT_USB_Device_Connect();
    1c4c:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <EVENT_USB_Device_Connect>
    1c50:	05 c0       	rjmp	.+10     	; 0x1c5c <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1c52:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1c54:	10 92 ed 01 	sts	0x01ED, r1
			EVENT_USB_Device_Disconnect();
    1c58:	0e 94 ee 09 	call	0x13dc	; 0x13dc <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1c5c:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1c60:	80 ff       	sbrs	r24, 0
    1c62:	19 c0       	rjmp	.+50     	; 0x1c96 <__vector_10+0xc0>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1c64:	80 91 e2 00 	lds	r24, 0x00E2
    1c68:	80 ff       	sbrs	r24, 0
    1c6a:	15 c0       	rjmp	.+42     	; 0x1c96 <__vector_10+0xc0>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1c6c:	80 91 e2 00 	lds	r24, 0x00E2
    1c70:	8e 7f       	andi	r24, 0xFE	; 254
    1c72:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1c76:	80 91 e2 00 	lds	r24, 0x00E2
    1c7a:	80 61       	ori	r24, 0x10	; 16
    1c7c:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1c80:	80 91 d8 00 	lds	r24, 0x00D8
    1c84:	80 62       	ori	r24, 0x20	; 32
    1c86:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1c8a:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1c8c:	85 e0       	ldi	r24, 0x05	; 5
    1c8e:	80 93 ed 01 	sts	0x01ED, r24
		EVENT_USB_Device_Suspend();
    1c92:	0e 94 08 0b 	call	0x1610	; 0x1610 <EVENT_USB_Device_Suspend>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1c96:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1c9a:	84 ff       	sbrs	r24, 4
    1c9c:	30 c0       	rjmp	.+96     	; 0x1cfe <__vector_10+0x128>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1c9e:	80 91 e2 00 	lds	r24, 0x00E2
    1ca2:	84 ff       	sbrs	r24, 4
    1ca4:	2c c0       	rjmp	.+88     	; 0x1cfe <__vector_10+0x128>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1ca6:	80 e1       	ldi	r24, 0x10	; 16
    1ca8:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1caa:	82 e1       	ldi	r24, 0x12	; 18
    1cac:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1cae:	09 b4       	in	r0, 0x29	; 41
    1cb0:	00 fe       	sbrs	r0, 0
    1cb2:	fd cf       	rjmp	.-6      	; 0x1cae <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1cb4:	80 91 d8 00 	lds	r24, 0x00D8
    1cb8:	8f 7d       	andi	r24, 0xDF	; 223
    1cba:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1cbe:	80 91 e1 00 	lds	r24, 0x00E1
    1cc2:	8f 7e       	andi	r24, 0xEF	; 239
    1cc4:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1cc8:	80 91 e2 00 	lds	r24, 0x00E2
    1ccc:	8f 7e       	andi	r24, 0xEF	; 239
    1cce:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1cd2:	80 91 e2 00 	lds	r24, 0x00E2
    1cd6:	81 60       	ori	r24, 0x01	; 1
    1cd8:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1cdc:	80 91 e9 01 	lds	r24, 0x01E9
    1ce0:	88 23       	and	r24, r24
    1ce2:	11 f0       	breq	.+4      	; 0x1ce8 <__vector_10+0x112>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1ce4:	84 e0       	ldi	r24, 0x04	; 4
    1ce6:	07 c0       	rjmp	.+14     	; 0x1cf6 <__vector_10+0x120>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1ce8:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1cec:	87 fd       	sbrc	r24, 7
    1cee:	02 c0       	rjmp	.+4      	; 0x1cf4 <__vector_10+0x11e>
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	01 c0       	rjmp	.+2      	; 0x1cf6 <__vector_10+0x120>
    1cf4:	83 e0       	ldi	r24, 0x03	; 3
    1cf6:	80 93 ed 01 	sts	0x01ED, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1cfa:	0e 94 67 0b 	call	0x16ce	; 0x16ce <EVENT_USB_Device_WakeUp>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1cfe:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1d02:	83 ff       	sbrs	r24, 3
    1d04:	29 c0       	rjmp	.+82     	; 0x1d58 <__vector_10+0x182>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1d06:	80 91 e2 00 	lds	r24, 0x00E2
    1d0a:	83 ff       	sbrs	r24, 3
    1d0c:	25 c0       	rjmp	.+74     	; 0x1d58 <__vector_10+0x182>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1d0e:	80 91 e1 00 	lds	r24, 0x00E1
    1d12:	87 7f       	andi	r24, 0xF7	; 247
    1d14:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1d18:	82 e0       	ldi	r24, 0x02	; 2
    1d1a:	80 93 ed 01 	sts	0x01ED, r24
		USB_Device_ConfigurationNumber = 0;
    1d1e:	10 92 e9 01 	sts	0x01E9, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1d22:	80 91 e1 00 	lds	r24, 0x00E1
    1d26:	8e 7f       	andi	r24, 0xFE	; 254
    1d28:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1d2c:	80 91 e2 00 	lds	r24, 0x00E2
    1d30:	8e 7f       	andi	r24, 0xFE	; 254
    1d32:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1d36:	80 91 e2 00 	lds	r24, 0x00E2
    1d3a:	80 61       	ori	r24, 0x10	; 16
    1d3c:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1d40:	42 e0       	ldi	r20, 0x02	; 2
    1d42:	60 e0       	ldi	r22, 0x00	; 0
    1d44:	80 e0       	ldi	r24, 0x00	; 0
    1d46:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1d4a:	80 91 f0 00 	lds	r24, 0x00F0
    1d4e:	88 60       	ori	r24, 0x08	; 8
    1d50:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1d54:	0e 94 f5 09 	call	0x13ea	; 0x13ea <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1d58:	ff 91       	pop	r31
    1d5a:	ef 91       	pop	r30
    1d5c:	bf 91       	pop	r27
    1d5e:	af 91       	pop	r26
    1d60:	9f 91       	pop	r25
    1d62:	8f 91       	pop	r24
    1d64:	7f 91       	pop	r23
    1d66:	6f 91       	pop	r22
    1d68:	5f 91       	pop	r21
    1d6a:	4f 91       	pop	r20
    1d6c:	3f 91       	pop	r19
    1d6e:	2f 91       	pop	r18
    1d70:	0f 90       	pop	r0
    1d72:	0f be       	out	0x3f, r0	; 63
    1d74:	0f 90       	pop	r0
    1d76:	1f 90       	pop	r1
    1d78:	18 95       	reti

00001d7a <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1d7a:	1f 92       	push	r1
    1d7c:	0f 92       	push	r0
    1d7e:	0f b6       	in	r0, 0x3f	; 63
    1d80:	0f 92       	push	r0
    1d82:	11 24       	eor	r1, r1
    1d84:	2f 93       	push	r18
    1d86:	3f 93       	push	r19
    1d88:	4f 93       	push	r20
    1d8a:	5f 93       	push	r21
    1d8c:	6f 93       	push	r22
    1d8e:	7f 93       	push	r23
    1d90:	8f 93       	push	r24
    1d92:	9f 93       	push	r25
    1d94:	af 93       	push	r26
    1d96:	bf 93       	push	r27
    1d98:	cf 93       	push	r28
    1d9a:	df 93       	push	r29
    1d9c:	ef 93       	push	r30
    1d9e:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1da0:	c0 91 e9 00 	lds	r28, 0x00E9
    1da4:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1da6:	80 91 ec 00 	lds	r24, 0x00EC
    1daa:	d8 2f       	mov	r29, r24
    1dac:	d1 70       	andi	r29, 0x01	; 1
    1dae:	80 fd       	sbrc	r24, 0
    1db0:	d0 e8       	ldi	r29, 0x80	; 128
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1db2:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    1db6:	80 91 f0 00 	lds	r24, 0x00F0
    1dba:	87 7f       	andi	r24, 0xF7	; 247
    1dbc:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1dc0:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1dc2:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <USB_Device_ProcessControlRequest>
    1dc6:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1dca:	80 91 f0 00 	lds	r24, 0x00F0
    1dce:	88 60       	ori	r24, 0x08	; 8
    1dd0:	80 93 f0 00 	sts	0x00F0, r24
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1dd4:	cd 2b       	or	r28, r29
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1dd6:	cf 70       	andi	r28, 0x0F	; 15
    1dd8:	c0 93 e9 00 	sts	0x00E9, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1ddc:	ff 91       	pop	r31
    1dde:	ef 91       	pop	r30
    1de0:	df 91       	pop	r29
    1de2:	cf 91       	pop	r28
    1de4:	bf 91       	pop	r27
    1de6:	af 91       	pop	r26
    1de8:	9f 91       	pop	r25
    1dea:	8f 91       	pop	r24
    1dec:	7f 91       	pop	r23
    1dee:	6f 91       	pop	r22
    1df0:	5f 91       	pop	r21
    1df2:	4f 91       	pop	r20
    1df4:	3f 91       	pop	r19
    1df6:	2f 91       	pop	r18
    1df8:	0f 90       	pop	r0
    1dfa:	0f be       	out	0x3f, r0	; 63
    1dfc:	0f 90       	pop	r0
    1dfe:	1f 90       	pop	r1
    1e00:	18 95       	reti

00001e02 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1e02:	1f 93       	push	r17
    1e04:	cf 93       	push	r28
    1e06:	df 93       	push	r29
    1e08:	cd b7       	in	r28, 0x3d	; 61
    1e0a:	de b7       	in	r29, 0x3e	; 62
    1e0c:	aa 97       	sbiw	r28, 0x2a	; 42
    1e0e:	0f b6       	in	r0, 0x3f	; 63
    1e10:	f8 94       	cli
    1e12:	de bf       	out	0x3e, r29	; 62
    1e14:	0f be       	out	0x3f, r0	; 63
    1e16:	cd bf       	out	0x3d, r28	; 61
    1e18:	ee ee       	ldi	r30, 0xEE	; 238
    1e1a:	f1 e0       	ldi	r31, 0x01	; 1
    1e1c:	88 e0       	ldi	r24, 0x08	; 8
    1e1e:	8e 0f       	add	r24, r30
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1e20:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1e24:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1e26:	8e 13       	cpse	r24, r30
    1e28:	fb cf       	rjmp	.-10     	; 0x1e20 <USB_Device_ProcessControlRequest+0x1e>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1e2a:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1e2e:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1e32:	83 ff       	sbrs	r24, 3
    1e34:	1f c1       	rjmp	.+574    	; 0x2074 <USB_Device_ProcessControlRequest+0x272>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1e36:	80 91 ee 01 	lds	r24, 0x01EE

		switch (USB_ControlRequest.bRequest)
    1e3a:	90 91 ef 01 	lds	r25, 0x01EF
    1e3e:	49 2f       	mov	r20, r25
    1e40:	50 e0       	ldi	r21, 0x00	; 0
    1e42:	4a 30       	cpi	r20, 0x0A	; 10
    1e44:	51 05       	cpc	r21, r1
    1e46:	08 f0       	brcs	.+2      	; 0x1e4a <USB_Device_ProcessControlRequest+0x48>
    1e48:	15 c1       	rjmp	.+554    	; 0x2074 <USB_Device_ProcessControlRequest+0x272>
    1e4a:	fa 01       	movw	r30, r20
    1e4c:	ea 5a       	subi	r30, 0xAA	; 170
    1e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e50:	0c 94 03 2a 	jmp	0x5406	; 0x5406 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1e54:	80 38       	cpi	r24, 0x80	; 128
    1e56:	81 f0       	breq	.+32     	; 0x1e78 <USB_Device_ProcessControlRequest+0x76>
    1e58:	82 38       	cpi	r24, 0x82	; 130
    1e5a:	09 f0       	breq	.+2      	; 0x1e5e <USB_Device_ProcessControlRequest+0x5c>
    1e5c:	0b c1       	rjmp	.+534    	; 0x2074 <USB_Device_ProcessControlRequest+0x272>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e5e:	80 91 f2 01 	lds	r24, 0x01F2
    1e62:	8f 70       	andi	r24, 0x0F	; 15
    1e64:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1e68:	80 91 eb 00 	lds	r24, 0x00EB
    1e6c:	85 fb       	bst	r24, 5
    1e6e:	88 27       	eor	r24, r24
    1e70:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e72:	10 92 e9 00 	sts	0x00E9, r1
    1e76:	06 c0       	rjmp	.+12     	; 0x1e84 <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1e78:	80 91 ea 01 	lds	r24, 0x01EA
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1e7c:	90 91 eb 01 	lds	r25, 0x01EB
    1e80:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1e82:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1e84:	90 91 e8 00 	lds	r25, 0x00E8
    1e88:	97 7f       	andi	r25, 0xF7	; 247
    1e8a:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1e8e:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    1e92:	10 92 f1 00 	sts	0x00F1, r1
    1e96:	c8 c0       	rjmp	.+400    	; 0x2028 <USB_Device_ProcessControlRequest+0x226>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1e98:	28 2f       	mov	r18, r24
    1e9a:	2d 7f       	andi	r18, 0xFD	; 253
    1e9c:	09 f0       	breq	.+2      	; 0x1ea0 <USB_Device_ProcessControlRequest+0x9e>
    1e9e:	ea c0       	rjmp	.+468    	; 0x2074 <USB_Device_ProcessControlRequest+0x272>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1ea0:	88 23       	and	r24, r24
    1ea2:	19 f0       	breq	.+6      	; 0x1eaa <USB_Device_ProcessControlRequest+0xa8>
    1ea4:	82 30       	cpi	r24, 0x02	; 2
    1ea6:	61 f0       	breq	.+24     	; 0x1ec0 <USB_Device_ProcessControlRequest+0xbe>
    1ea8:	e5 c0       	rjmp	.+458    	; 0x2074 <USB_Device_ProcessControlRequest+0x272>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1eaa:	80 91 f0 01 	lds	r24, 0x01F0
    1eae:	81 30       	cpi	r24, 0x01	; 1
    1eb0:	09 f0       	breq	.+2      	; 0x1eb4 <USB_Device_ProcessControlRequest+0xb2>
    1eb2:	e0 c0       	rjmp	.+448    	; 0x2074 <USB_Device_ProcessControlRequest+0x272>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1eb4:	93 30       	cpi	r25, 0x03	; 3
    1eb6:	09 f0       	breq	.+2      	; 0x1eba <USB_Device_ProcessControlRequest+0xb8>
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	80 93 eb 01 	sts	0x01EB, r24
    1ebe:	2b c0       	rjmp	.+86     	; 0x1f16 <USB_Device_ProcessControlRequest+0x114>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1ec0:	80 91 f0 01 	lds	r24, 0x01F0
    1ec4:	81 11       	cpse	r24, r1
    1ec6:	27 c0       	rjmp	.+78     	; 0x1f16 <USB_Device_ProcessControlRequest+0x114>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1ec8:	80 91 f2 01 	lds	r24, 0x01F2
    1ecc:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1ece:	09 f4       	brne	.+2      	; 0x1ed2 <USB_Device_ProcessControlRequest+0xd0>
    1ed0:	d1 c0       	rjmp	.+418    	; 0x2074 <USB_Device_ProcessControlRequest+0x272>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ed2:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1ed6:	20 91 eb 00 	lds	r18, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1eda:	20 ff       	sbrs	r18, 0
    1edc:	1c c0       	rjmp	.+56     	; 0x1f16 <USB_Device_ProcessControlRequest+0x114>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1ede:	93 30       	cpi	r25, 0x03	; 3
    1ee0:	21 f4       	brne	.+8      	; 0x1eea <USB_Device_ProcessControlRequest+0xe8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1ee2:	80 91 eb 00 	lds	r24, 0x00EB
    1ee6:	80 62       	ori	r24, 0x20	; 32
    1ee8:	14 c0       	rjmp	.+40     	; 0x1f12 <USB_Device_ProcessControlRequest+0x110>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1eea:	90 91 eb 00 	lds	r25, 0x00EB
    1eee:	90 61       	ori	r25, 0x10	; 16
    1ef0:	90 93 eb 00 	sts	0x00EB, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1ef4:	21 e0       	ldi	r18, 0x01	; 1
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	a9 01       	movw	r20, r18
    1efa:	02 c0       	rjmp	.+4      	; 0x1f00 <USB_Device_ProcessControlRequest+0xfe>
    1efc:	44 0f       	add	r20, r20
    1efe:	55 1f       	adc	r21, r21
    1f00:	8a 95       	dec	r24
    1f02:	e2 f7       	brpl	.-8      	; 0x1efc <USB_Device_ProcessControlRequest+0xfa>
    1f04:	40 93 ea 00 	sts	0x00EA, r20
				UERST = 0;
    1f08:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1f0c:	80 91 eb 00 	lds	r24, 0x00EB
    1f10:	88 60       	ori	r24, 0x08	; 8
    1f12:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f16:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f1a:	80 91 e8 00 	lds	r24, 0x00E8
    1f1e:	87 7f       	andi	r24, 0xF7	; 247
    1f20:	86 c0       	rjmp	.+268    	; 0x202e <USB_Device_ProcessControlRequest+0x22c>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1f22:	81 11       	cpse	r24, r1
    1f24:	a7 c0       	rjmp	.+334    	; 0x2074 <USB_Device_ProcessControlRequest+0x272>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1f26:	10 91 f0 01 	lds	r17, 0x01F0
    1f2a:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1f2c:	80 91 e3 00 	lds	r24, 0x00E3
    1f30:	80 78       	andi	r24, 0x80	; 128
    1f32:	81 2b       	or	r24, r17
    1f34:	80 93 e3 00 	sts	0x00E3, r24
    1f38:	80 91 e8 00 	lds	r24, 0x00E8
    1f3c:	87 7f       	andi	r24, 0xF7	; 247
    1f3e:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1f42:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1f46:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    1f4a:	80 ff       	sbrs	r24, 0
    1f4c:	fc cf       	rjmp	.-8      	; 0x1f46 <USB_Device_ProcessControlRequest+0x144>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    1f4e:	80 91 e3 00 	lds	r24, 0x00E3
    1f52:	80 68       	ori	r24, 0x80	; 128
    1f54:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1f58:	11 11       	cpse	r17, r1
    1f5a:	02 c0       	rjmp	.+4      	; 0x1f60 <USB_Device_ProcessControlRequest+0x15e>
    1f5c:	82 e0       	ldi	r24, 0x02	; 2
    1f5e:	01 c0       	rjmp	.+2      	; 0x1f62 <USB_Device_ProcessControlRequest+0x160>
    1f60:	83 e0       	ldi	r24, 0x03	; 3
    1f62:	80 93 ed 01 	sts	0x01ED, r24
    1f66:	86 c0       	rjmp	.+268    	; 0x2074 <USB_Device_ProcessControlRequest+0x272>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1f68:	80 58       	subi	r24, 0x80	; 128
    1f6a:	82 30       	cpi	r24, 0x02	; 2
    1f6c:	08 f0       	brcs	.+2      	; 0x1f70 <USB_Device_ProcessControlRequest+0x16e>
    1f6e:	82 c0       	rjmp	.+260    	; 0x2074 <USB_Device_ProcessControlRequest+0x272>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1f70:	80 91 f0 01 	lds	r24, 0x01F0
    1f74:	90 91 f1 01 	lds	r25, 0x01F1
    1f78:	8c 3d       	cpi	r24, 0xDC	; 220
    1f7a:	53 e0       	ldi	r21, 0x03	; 3
    1f7c:	95 07       	cpc	r25, r21
    1f7e:	79 f5       	brne	.+94     	; 0x1fde <USB_Device_ProcessControlRequest+0x1dc>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1f80:	83 e0       	ldi	r24, 0x03	; 3
    1f82:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1f84:	8a e2       	ldi	r24, 0x2A	; 42
    1f86:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1f88:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1f8a:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1f8c:	de 01       	movw	r26, r28
    1f8e:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1f90:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1f92:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1f94:	51 e2       	ldi	r21, 0x21	; 33
    1f96:	e3 2f       	mov	r30, r19
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	50 93 57 00 	sts	0x0057, r21
    1f9e:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    1fa0:	20 ff       	sbrs	r18, 0
    1fa2:	03 c0       	rjmp	.+6      	; 0x1faa <USB_Device_ProcessControlRequest+0x1a8>
					{
						SerialByte >>= 4;
    1fa4:	e2 95       	swap	r30
    1fa6:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1fa8:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1faa:	ef 70       	andi	r30, 0x0F	; 15
    1fac:	8e 2f       	mov	r24, r30
    1fae:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1fb0:	ea 30       	cpi	r30, 0x0A	; 10
    1fb2:	10 f0       	brcs	.+4      	; 0x1fb8 <USB_Device_ProcessControlRequest+0x1b6>
    1fb4:	c7 96       	adiw	r24, 0x37	; 55
    1fb6:	01 c0       	rjmp	.+2      	; 0x1fba <USB_Device_ProcessControlRequest+0x1b8>
    1fb8:	c0 96       	adiw	r24, 0x30	; 48
    1fba:	8d 93       	st	X+, r24
    1fbc:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1fbe:	2f 5f       	subi	r18, 0xFF	; 255
    1fc0:	24 31       	cpi	r18, 0x14	; 20
    1fc2:	49 f7       	brne	.-46     	; 0x1f96 <USB_Device_ProcessControlRequest+0x194>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1fc4:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1fc6:	80 91 e8 00 	lds	r24, 0x00E8
    1fca:	87 7f       	andi	r24, 0xF7	; 247
    1fcc:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1fd0:	6a e2       	ldi	r22, 0x2A	; 42
    1fd2:	70 e0       	ldi	r23, 0x00	; 0
    1fd4:	ce 01       	movw	r24, r28
    1fd6:	01 96       	adiw	r24, 0x01	; 1
    1fd8:	0e 94 26 0c 	call	0x184c	; 0x184c <Endpoint_Write_Control_Stream_LE>
    1fdc:	14 c0       	rjmp	.+40     	; 0x2006 <USB_Device_ProcessControlRequest+0x204>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1fde:	ae 01       	movw	r20, r28
    1fe0:	4f 5f       	subi	r20, 0xFF	; 255
    1fe2:	5f 4f       	sbci	r21, 0xFF	; 255
    1fe4:	60 91 f2 01 	lds	r22, 0x01F2
    1fe8:	0e 94 6d 0b 	call	0x16da	; 0x16da <CALLBACK_USB_GetDescriptor>
    1fec:	bc 01       	movw	r22, r24
    1fee:	89 2b       	or	r24, r25
    1ff0:	09 f4       	brne	.+2      	; 0x1ff4 <USB_Device_ProcessControlRequest+0x1f2>
    1ff2:	40 c0       	rjmp	.+128    	; 0x2074 <USB_Device_ProcessControlRequest+0x272>
    1ff4:	90 91 e8 00 	lds	r25, 0x00E8
    1ff8:	97 7f       	andi	r25, 0xF7	; 247
    1ffa:	90 93 e8 00 	sts	0x00E8, r25
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1ffe:	89 81       	ldd	r24, Y+1	; 0x01
    2000:	9a 81       	ldd	r25, Y+2	; 0x02
    2002:	0e 94 89 0c 	call	0x1912	; 0x1912 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2006:	80 91 e8 00 	lds	r24, 0x00E8
    200a:	8b 77       	andi	r24, 0x7B	; 123
    200c:	80 93 e8 00 	sts	0x00E8, r24
    2010:	31 c0       	rjmp	.+98     	; 0x2074 <USB_Device_ProcessControlRequest+0x272>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    2012:	80 38       	cpi	r24, 0x80	; 128
    2014:	79 f5       	brne	.+94     	; 0x2074 <USB_Device_ProcessControlRequest+0x272>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2016:	80 91 e8 00 	lds	r24, 0x00E8
    201a:	87 7f       	andi	r24, 0xF7	; 247
    201c:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    2020:	80 91 e9 01 	lds	r24, 0x01E9
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2024:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2028:	80 91 e8 00 	lds	r24, 0x00E8
    202c:	8e 77       	andi	r24, 0x7E	; 126
    202e:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    2032:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <Endpoint_ClearStatusStage>
    2036:	1e c0       	rjmp	.+60     	; 0x2074 <USB_Device_ProcessControlRequest+0x272>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    2038:	81 11       	cpse	r24, r1
    203a:	1c c0       	rjmp	.+56     	; 0x2074 <USB_Device_ProcessControlRequest+0x272>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    203c:	90 91 f0 01 	lds	r25, 0x01F0
    2040:	92 30       	cpi	r25, 0x02	; 2
    2042:	c0 f4       	brcc	.+48     	; 0x2074 <USB_Device_ProcessControlRequest+0x272>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2044:	80 91 e8 00 	lds	r24, 0x00E8
    2048:	87 7f       	andi	r24, 0xF7	; 247
    204a:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    204e:	90 93 e9 01 	sts	0x01E9, r25

	Endpoint_ClearStatusStage();
    2052:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    2056:	80 91 e9 01 	lds	r24, 0x01E9
    205a:	81 11       	cpse	r24, r1
    205c:	06 c0       	rjmp	.+12     	; 0x206a <USB_Device_ProcessControlRequest+0x268>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    205e:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    2062:	87 fd       	sbrc	r24, 7
    2064:	02 c0       	rjmp	.+4      	; 0x206a <USB_Device_ProcessControlRequest+0x268>
    2066:	81 e0       	ldi	r24, 0x01	; 1
    2068:	01 c0       	rjmp	.+2      	; 0x206c <USB_Device_ProcessControlRequest+0x26a>
    206a:	84 e0       	ldi	r24, 0x04	; 4
    206c:	80 93 ed 01 	sts	0x01ED, r24

	EVENT_USB_Device_ConfigurationChanged();
    2070:	0e 94 3a 0a 	call	0x1474	; 0x1474 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2074:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    2078:	83 ff       	sbrs	r24, 3
    207a:	0a c0       	rjmp	.+20     	; 0x2090 <USB_Device_ProcessControlRequest+0x28e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    207c:	80 91 e8 00 	lds	r24, 0x00E8
    2080:	87 7f       	andi	r24, 0xF7	; 247
    2082:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    2086:	80 91 eb 00 	lds	r24, 0x00EB
    208a:	80 62       	ori	r24, 0x20	; 32
    208c:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    2090:	aa 96       	adiw	r28, 0x2a	; 42
    2092:	0f b6       	in	r0, 0x3f	; 63
    2094:	f8 94       	cli
    2096:	de bf       	out	0x3e, r29	; 62
    2098:	0f be       	out	0x3f, r0	; 63
    209a:	cd bf       	out	0x3d, r28	; 61
    209c:	df 91       	pop	r29
    209e:	cf 91       	pop	r28
    20a0:	1f 91       	pop	r17
    20a2:	08 95       	ret

000020a4 <host_set_driver>:
static uint16_t last_consumer_report = 0;


void host_set_driver(host_driver_t *d)
{
    driver = d;
    20a4:	90 93 6e 01 	sts	0x016E, r25
    20a8:	80 93 6d 01 	sts	0x016D, r24
    20ac:	08 95       	ret

000020ae <host_keyboard_leds>:
    return driver;
}

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    20ae:	e0 91 6d 01 	lds	r30, 0x016D
    20b2:	f0 91 6e 01 	lds	r31, 0x016E
    20b6:	30 97       	sbiw	r30, 0x00	; 0
    20b8:	21 f0       	breq	.+8      	; 0x20c2 <host_keyboard_leds+0x14>
    return (*driver->keyboard_leds)();
    20ba:	01 90       	ld	r0, Z+
    20bc:	f0 81       	ld	r31, Z
    20be:	e0 2d       	mov	r30, r0
    20c0:	09 94       	ijmp
}
    20c2:	80 e0       	ldi	r24, 0x00	; 0
    20c4:	08 95       	ret

000020c6 <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    20c6:	ef 92       	push	r14
    20c8:	ff 92       	push	r15
    20ca:	0f 93       	push	r16
    20cc:	1f 93       	push	r17
    20ce:	cf 93       	push	r28
    20d0:	df 93       	push	r29
    if (!driver) return;
    20d2:	e0 91 6d 01 	lds	r30, 0x016D
    20d6:	f0 91 6e 01 	lds	r31, 0x016E
    20da:	30 97       	sbiw	r30, 0x00	; 0
    20dc:	b1 f1       	breq	.+108    	; 0x214a <host_keyboard_send+0x84>
    20de:	8c 01       	movw	r16, r24
    (*driver->send_keyboard)(report);
    20e0:	02 80       	ldd	r0, Z+2	; 0x02
    20e2:	f3 81       	ldd	r31, Z+3	; 0x03
    20e4:	e0 2d       	mov	r30, r0
    20e6:	09 95       	icall

    if (debug_keyboard) {
    20e8:	80 91 d8 01 	lds	r24, 0x01D8
    20ec:	82 ff       	sbrs	r24, 2
    20ee:	2d c0       	rjmp	.+90     	; 0x214a <host_keyboard_send+0x84>
        dprint("keyboard_report: ");
    20f0:	80 ff       	sbrs	r24, 0
    20f2:	04 c0       	rjmp	.+8      	; 0x20fc <host_keyboard_send+0x36>
    20f4:	8b ef       	ldi	r24, 0xFB	; 251
    20f6:	94 e0       	ldi	r25, 0x04	; 4
    20f8:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    20fc:	e8 01       	movw	r28, r16
    if (!driver) return 0;
    return (*driver->keyboard_leds)();
}
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    20fe:	10 e2       	ldi	r17, 0x20	; 32
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    2100:	85 ef       	ldi	r24, 0xF5	; 245
    2102:	e8 2e       	mov	r14, r24
    2104:	84 e0       	ldi	r24, 0x04	; 4
    2106:	f8 2e       	mov	r15, r24
    2108:	80 91 d8 01 	lds	r24, 0x01D8
    210c:	80 ff       	sbrs	r24, 0
    210e:	0b c0       	rjmp	.+22     	; 0x2126 <host_keyboard_send+0x60>
    2110:	88 81       	ld	r24, Y
    2112:	1f 92       	push	r1
    2114:	8f 93       	push	r24
    2116:	ff 92       	push	r15
    2118:	ef 92       	push	r14
    211a:	0e 94 6b 07 	call	0xed6	; 0xed6 <__xprintf>
    211e:	0f 90       	pop	r0
    2120:	0f 90       	pop	r0
    2122:	0f 90       	pop	r0
    2124:	0f 90       	pop	r0
    2126:	11 50       	subi	r17, 0x01	; 1
    2128:	21 96       	adiw	r28, 0x01	; 1
    if (!driver) return;
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
    212a:	11 11       	cpse	r17, r1
    212c:	ed cf       	rjmp	.-38     	; 0x2108 <host_keyboard_send+0x42>
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    212e:	80 91 d8 01 	lds	r24, 0x01D8
    2132:	80 ff       	sbrs	r24, 0
    2134:	0a c0       	rjmp	.+20     	; 0x214a <host_keyboard_send+0x84>
    2136:	83 ef       	ldi	r24, 0xF3	; 243
    2138:	94 e0       	ldi	r25, 0x04	; 4
    }
}
    213a:	df 91       	pop	r29
    213c:	cf 91       	pop	r28
    213e:	1f 91       	pop	r17
    2140:	0f 91       	pop	r16
    2142:	ff 90       	pop	r15
    2144:	ef 90       	pop	r14
    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    2146:	0c 94 d2 06 	jmp	0xda4	; 0xda4 <xputs>
    }
}
    214a:	df 91       	pop	r29
    214c:	cf 91       	pop	r28
    214e:	1f 91       	pop	r17
    2150:	0f 91       	pop	r16
    2152:	ff 90       	pop	r15
    2154:	ef 90       	pop	r14
    2156:	08 95       	ret

00002158 <host_mouse_send>:

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    2158:	e0 91 6d 01 	lds	r30, 0x016D
    215c:	f0 91 6e 01 	lds	r31, 0x016E
    2160:	30 97       	sbiw	r30, 0x00	; 0
    2162:	21 f0       	breq	.+8      	; 0x216c <host_mouse_send+0x14>
    (*driver->send_mouse)(report);
    2164:	04 80       	ldd	r0, Z+4	; 0x04
    2166:	f5 81       	ldd	r31, Z+5	; 0x05
    2168:	e0 2d       	mov	r30, r0
    216a:	09 94       	ijmp
    216c:	08 95       	ret

0000216e <host_system_send>:
}

void host_system_send(uint16_t report)
{
    if (report == last_system_report) return;
    216e:	20 91 6b 01 	lds	r18, 0x016B
    2172:	30 91 6c 01 	lds	r19, 0x016C
    2176:	82 17       	cp	r24, r18
    2178:	93 07       	cpc	r25, r19
    217a:	71 f0       	breq	.+28     	; 0x2198 <host_system_send+0x2a>
    last_system_report = report;
    217c:	90 93 6c 01 	sts	0x016C, r25
    2180:	80 93 6b 01 	sts	0x016B, r24

    if (!driver) return;
    2184:	e0 91 6d 01 	lds	r30, 0x016D
    2188:	f0 91 6e 01 	lds	r31, 0x016E
    218c:	30 97       	sbiw	r30, 0x00	; 0
    218e:	21 f0       	breq	.+8      	; 0x2198 <host_system_send+0x2a>
    (*driver->send_system)(report);
    2190:	06 80       	ldd	r0, Z+6	; 0x06
    2192:	f7 81       	ldd	r31, Z+7	; 0x07
    2194:	e0 2d       	mov	r30, r0
    2196:	09 94       	ijmp
    2198:	08 95       	ret

0000219a <host_consumer_send>:
}

void host_consumer_send(uint16_t report)
{
    if (report == last_consumer_report) return;
    219a:	20 91 69 01 	lds	r18, 0x0169
    219e:	30 91 6a 01 	lds	r19, 0x016A
    21a2:	82 17       	cp	r24, r18
    21a4:	93 07       	cpc	r25, r19
    21a6:	71 f0       	breq	.+28     	; 0x21c4 <host_consumer_send+0x2a>
    last_consumer_report = report;
    21a8:	90 93 6a 01 	sts	0x016A, r25
    21ac:	80 93 69 01 	sts	0x0169, r24

    if (!driver) return;
    21b0:	e0 91 6d 01 	lds	r30, 0x016D
    21b4:	f0 91 6e 01 	lds	r31, 0x016E
    21b8:	30 97       	sbiw	r30, 0x00	; 0
    21ba:	21 f0       	breq	.+8      	; 0x21c4 <host_consumer_send+0x2a>
    (*driver->send_consumer)(report);
    21bc:	00 84       	ldd	r0, Z+8	; 0x08
    21be:	f1 85       	ldd	r31, Z+9	; 0x09
    21c0:	e0 2d       	mov	r30, r0
    21c2:	09 94       	ijmp
    21c4:	08 95       	ret

000021c6 <matrix_setup>:
    return false;
}
#endif


__attribute__ ((weak)) void matrix_setup(void) {}
    21c6:	08 95       	ret

000021c8 <keyboard_setup>:
void keyboard_setup(void)
{
    matrix_setup();
    21c8:	0c 94 e3 10 	jmp	0x21c6	; 0x21c6 <matrix_setup>

000021cc <keyboard_init>:
}

void keyboard_init(void)
{
    timer_init();
    21cc:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <timer_init>
    matrix_init();
    21d0:	0e 94 95 07 	call	0xf2a	; 0xf2a <matrix_init>
    adb_mouse_init();
#endif


#ifdef BOOTMAGIC_ENABLE
    bootmagic();
    21d4:	0c 94 53 1f 	jmp	0x3ea6	; 0x3ea6 <bootmagic>

000021d8 <keyboard_task>:
/*
 * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    21d8:	cf 92       	push	r12
    21da:	df 92       	push	r13
    21dc:	ef 92       	push	r14
    21de:	ff 92       	push	r15
    21e0:	0f 93       	push	r16
    21e2:	1f 93       	push	r17
    21e4:	cf 93       	push	r28
    21e6:	df 93       	push	r29
    21e8:	00 d0       	rcall	.+0      	; 0x21ea <keyboard_task+0x12>
    21ea:	00 d0       	rcall	.+0      	; 0x21ec <keyboard_task+0x14>
    21ec:	00 d0       	rcall	.+0      	; 0x21ee <keyboard_task+0x16>
    21ee:	cd b7       	in	r28, 0x3d	; 61
    21f0:	de b7       	in	r29, 0x3e	; 62
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    21f2:	0e 94 a8 07 	call	0xf50	; 0xf50 <matrix_scan>
    21f6:	80 e7       	ldi	r24, 0x70	; 112
    21f8:	c8 2e       	mov	r12, r24
    21fa:	81 e0       	ldi	r24, 0x01	; 1
    21fc:	d8 2e       	mov	r13, r24
    21fe:	00 e0       	ldi	r16, 0x00	; 0
    2200:	10 e0       	ldi	r17, 0x00	; 0
    2202:	e0 2e       	mov	r14, r16
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
    2204:	80 2f       	mov	r24, r16
    2206:	0e 94 45 08 	call	0x108a	; 0x108a <matrix_get_row>
        matrix_change = matrix_row ^ matrix_prev[r];
    220a:	f6 01       	movw	r30, r12
    220c:	41 91       	ld	r20, Z+
    220e:	6f 01       	movw	r12, r30
    2210:	f4 2e       	mov	r15, r20
    2212:	f8 26       	eor	r15, r24
        if (matrix_change) {
    2214:	b1 f4       	brne	.+44     	; 0x2242 <keyboard_task+0x6a>
    2216:	0f 5f       	subi	r16, 0xFF	; 255
    2218:	1f 4f       	sbci	r17, 0xFF	; 255
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    221a:	05 30       	cpi	r16, 0x05	; 5
    221c:	11 05       	cpc	r17, r1
    221e:	89 f7       	brne	.-30     	; 0x2202 <keyboard_task+0x2a>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    2220:	8f ef       	ldi	r24, 0xFF	; 255
    2222:	89 83       	std	Y+1, r24	; 0x01
    2224:	8a 83       	std	Y+2, r24	; 0x02
    2226:	1b 82       	std	Y+3, r1	; 0x03
    2228:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <timer_read>
    222c:	81 60       	ori	r24, 0x01	; 1
    222e:	78 2f       	mov	r23, r24
    2230:	9d 83       	std	Y+5, r25	; 0x05
    2232:	8c 83       	std	Y+4, r24	; 0x04
    2234:	49 81       	ldd	r20, Y+1	; 0x01
    2236:	5a 81       	ldd	r21, Y+2	; 0x02
    2238:	6b 81       	ldd	r22, Y+3	; 0x03
    223a:	8d 81       	ldd	r24, Y+5	; 0x05
    223c:	0e 94 ab 11 	call	0x2356	; 0x2356 <action_exec>
    2240:	47 c0       	rjmp	.+142    	; 0x22d0 <keyboard_task+0xf8>
                matrix_ghost[r] = matrix_row;
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
    2242:	90 91 d8 01 	lds	r25, 0x01D8
    2246:	91 ff       	sbrs	r25, 1
    2248:	04 c0       	rjmp	.+8      	; 0x2252 <keyboard_task+0x7a>
    224a:	8e 83       	std	Y+6, r24	; 0x06
    224c:	0e 94 4b 08 	call	0x1096	; 0x1096 <matrix_print>
    2250:	8e 81       	ldd	r24, Y+6	; 0x06
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    2252:	20 e0       	ldi	r18, 0x00	; 0
    2254:	30 e0       	ldi	r19, 0x00	; 0
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    2256:	4f 2d       	mov	r20, r15
    2258:	50 e0       	ldi	r21, 0x00	; 0
    225a:	92 2f       	mov	r25, r18
    225c:	ba 01       	movw	r22, r20
    225e:	02 2e       	mov	r0, r18
    2260:	02 c0       	rjmp	.+4      	; 0x2266 <keyboard_task+0x8e>
    2262:	75 95       	asr	r23
    2264:	67 95       	ror	r22
    2266:	0a 94       	dec	r0
    2268:	e2 f7       	brpl	.-8      	; 0x2262 <keyboard_task+0x8a>
    226a:	60 ff       	sbrs	r22, 0
    226c:	2b c0       	rjmp	.+86     	; 0x22c4 <keyboard_task+0xec>
                    keyevent_t e = (keyevent_t){
    226e:	29 83       	std	Y+1, r18	; 0x01
    2270:	ea 82       	std	Y+2, r14	; 0x02
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
    2272:	21 e0       	ldi	r18, 0x01	; 1
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	69 01       	movw	r12, r18
    2278:	02 c0       	rjmp	.+4      	; 0x227e <keyboard_task+0xa6>
    227a:	cc 0c       	add	r12, r12
    227c:	dd 1c       	adc	r13, r13
    227e:	9a 95       	dec	r25
    2280:	e2 f7       	brpl	.-8      	; 0x227a <keyboard_task+0xa2>
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	8c 21       	and	r24, r12
    2286:	9d 21       	and	r25, r13
    2288:	89 2b       	or	r24, r25
    228a:	09 f4       	brne	.+2      	; 0x228e <keyboard_task+0xb6>
    228c:	20 e0       	ldi	r18, 0x00	; 0
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    keyevent_t e = (keyevent_t){
    228e:	2b 83       	std	Y+3, r18	; 0x03
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
    2290:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <timer_read>
    2294:	81 60       	ori	r24, 0x01	; 1
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    keyevent_t e = (keyevent_t){
    2296:	78 2f       	mov	r23, r24
    2298:	9d 83       	std	Y+5, r25	; 0x05
    229a:	8c 83       	std	Y+4, r24	; 0x04
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    };
                    action_exec(e);
    229c:	49 81       	ldd	r20, Y+1	; 0x01
    229e:	5a 81       	ldd	r21, Y+2	; 0x02
    22a0:	6b 81       	ldd	r22, Y+3	; 0x03
    22a2:	8d 81       	ldd	r24, Y+5	; 0x05
    22a4:	0e 94 ab 11 	call	0x2356	; 0x2356 <action_exec>
                    hook_matrix_change(e);
    22a8:	49 81       	ldd	r20, Y+1	; 0x01
    22aa:	5a 81       	ldd	r21, Y+2	; 0x02
    22ac:	6b 81       	ldd	r22, Y+3	; 0x03
    22ae:	7c 81       	ldd	r23, Y+4	; 0x04
    22b0:	8d 81       	ldd	r24, Y+5	; 0x05
    22b2:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <hook_matrix_change>
                    // record a processed key
                    matrix_prev[r] ^= ((matrix_row_t)1<<c);
    22b6:	f8 01       	movw	r30, r16
    22b8:	e0 59       	subi	r30, 0x90	; 144
    22ba:	fe 4f       	sbci	r31, 0xFE	; 254
    22bc:	80 81       	ld	r24, Z
    22be:	c8 26       	eor	r12, r24
    22c0:	c0 82       	st	Z, r12
    22c2:	06 c0       	rjmp	.+12     	; 0x22d0 <keyboard_task+0xf8>
    22c4:	2f 5f       	subi	r18, 0xFF	; 255
    22c6:	3f 4f       	sbci	r19, 0xFF	; 255
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    22c8:	25 30       	cpi	r18, 0x05	; 5
    22ca:	31 05       	cpc	r19, r1
    22cc:	31 f6       	brne	.-116    	; 0x225a <keyboard_task+0x82>
    22ce:	a3 cf       	rjmp	.-186    	; 0x2216 <keyboard_task+0x3e>
    // call with pseudo tick event when no real key event.
    action_exec(TICK);

MATRIX_LOOP_END:

    hook_keyboard_loop();
    22d0:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <hook_keyboard_loop>

#ifdef MOUSEKEY_ENABLE
    // mousekey repeat & acceleration
    mousekey_task();
    22d4:	0e 94 dd 22 	call	0x45ba	; 0x45ba <mousekey_task>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    22d8:	10 91 6f 01 	lds	r17, 0x016F
    22dc:	0e 94 57 10 	call	0x20ae	; 0x20ae <host_keyboard_leds>
    22e0:	18 17       	cp	r17, r24
    22e2:	41 f1       	breq	.+80     	; 0x2334 <keyboard_task+0x15c>
        led_status = host_keyboard_leds();
    22e4:	0e 94 57 10 	call	0x20ae	; 0x20ae <host_keyboard_leds>
    22e8:	80 93 6f 01 	sts	0x016F, r24
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
    22ec:	90 91 d8 01 	lds	r25, 0x01D8
    22f0:	92 ff       	sbrs	r25, 2
    22f2:	0e c0       	rjmp	.+28     	; 0x2310 <keyboard_task+0x138>
    22f4:	90 ff       	sbrs	r25, 0
    22f6:	0c c0       	rjmp	.+24     	; 0x2310 <keyboard_task+0x138>
    22f8:	1f 92       	push	r1
    22fa:	8f 93       	push	r24
    22fc:	8d e0       	ldi	r24, 0x0D	; 13
    22fe:	95 e0       	ldi	r25, 0x05	; 5
    2300:	9f 93       	push	r25
    2302:	8f 93       	push	r24
    2304:	0e 94 6b 07 	call	0xed6	; 0xed6 <__xprintf>
    2308:	0f 90       	pop	r0
    230a:	0f 90       	pop	r0
    230c:	0f 90       	pop	r0
    230e:	0f 90       	pop	r0
        hook_keyboard_leds_change(led_status);
    2310:	80 91 6f 01 	lds	r24, 0x016F
    }
}
    2314:	26 96       	adiw	r28, 0x06	; 6
    2316:	0f b6       	in	r0, 0x3f	; 63
    2318:	f8 94       	cli
    231a:	de bf       	out	0x3e, r29	; 62
    231c:	0f be       	out	0x3f, r0	; 63
    231e:	cd bf       	out	0x3d, r28	; 61
    2320:	df 91       	pop	r29
    2322:	cf 91       	pop	r28
    2324:	1f 91       	pop	r17
    2326:	0f 91       	pop	r16
    2328:	ff 90       	pop	r15
    232a:	ef 90       	pop	r14
    232c:	df 90       	pop	r13
    232e:	cf 90       	pop	r12

    // update LED
    if (led_status != host_keyboard_leds()) {
        led_status = host_keyboard_leds();
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
        hook_keyboard_leds_change(led_status);
    2330:	0c 94 e2 1c 	jmp	0x39c4	; 0x39c4 <hook_keyboard_leds_change>
    }
}
    2334:	26 96       	adiw	r28, 0x06	; 6
    2336:	0f b6       	in	r0, 0x3f	; 63
    2338:	f8 94       	cli
    233a:	de bf       	out	0x3e, r29	; 62
    233c:	0f be       	out	0x3f, r0	; 63
    233e:	cd bf       	out	0x3d, r28	; 61
    2340:	df 91       	pop	r29
    2342:	cf 91       	pop	r28
    2344:	1f 91       	pop	r17
    2346:	0f 91       	pop	r16
    2348:	ff 90       	pop	r15
    234a:	ef 90       	pop	r14
    234c:	df 90       	pop	r13
    234e:	cf 90       	pop	r12
    2350:	08 95       	ret

00002352 <keyboard_set_leds>:

void keyboard_set_leds(uint8_t leds)
{
    led_set(leds);
    2352:	0c 94 92 08 	jmp	0x1124	; 0x1124 <led_set>

00002356 <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    2356:	cf 93       	push	r28
    2358:	df 93       	push	r29
    235a:	cd b7       	in	r28, 0x3d	; 61
    235c:	de b7       	in	r29, 0x3e	; 62
    235e:	2b 97       	sbiw	r28, 0x0b	; 11
    2360:	0f b6       	in	r0, 0x3f	; 63
    2362:	f8 94       	cli
    2364:	de bf       	out	0x3e, r29	; 62
    2366:	0f be       	out	0x3f, r0	; 63
    2368:	cd bf       	out	0x3d, r28	; 61
    236a:	94 2f       	mov	r25, r20
    236c:	4f 83       	std	Y+7, r20	; 0x07
    236e:	25 2f       	mov	r18, r21
    2370:	58 87       	std	Y+8, r21	; 0x08
    2372:	69 87       	std	Y+9, r22	; 0x09
    2374:	7a 87       	std	Y+10, r23	; 0x0a
    2376:	8b 87       	std	Y+11, r24	; 0x0b

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    2378:	4a 85       	ldd	r20, Y+10	; 0x0a
    237a:	5b 85       	ldd	r21, Y+11	; 0x0b
    237c:	45 2b       	or	r20, r21
    237e:	21 f0       	breq	.+8      	; 0x2388 <action_exec+0x32>
    2380:	2f 3f       	cpi	r18, 0xFF	; 255
    2382:	09 f5       	brne	.+66     	; 0x23c6 <action_exec+0x70>
    2384:	9f 3f       	cpi	r25, 0xFF	; 255
    2386:	f9 f4       	brne	.+62     	; 0x23c6 <action_exec+0x70>
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
        hook_matrix_change(event);
    }

    keyrecord_t record = { .event = event };
    2388:	de 01       	movw	r26, r28
    238a:	11 96       	adiw	r26, 0x01	; 1
    238c:	86 e0       	ldi	r24, 0x06	; 6
    238e:	fd 01       	movw	r30, r26
    2390:	11 92       	st	Z+, r1
    2392:	8a 95       	dec	r24
    2394:	e9 f7       	brne	.-6      	; 0x2390 <action_exec+0x3a>
    2396:	85 e0       	ldi	r24, 0x05	; 5
    2398:	fe 01       	movw	r30, r28
    239a:	37 96       	adiw	r30, 0x07	; 7
    239c:	01 90       	ld	r0, Z+
    239e:	0d 92       	st	X+, r0
    23a0:	8a 95       	dec	r24
    23a2:	e1 f7       	brne	.-8      	; 0x239c <action_exec+0x46>

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    23a4:	49 81       	ldd	r20, Y+1	; 0x01
    23a6:	5a 81       	ldd	r21, Y+2	; 0x02
    23a8:	6b 81       	ldd	r22, Y+3	; 0x03
    23aa:	7c 81       	ldd	r23, Y+4	; 0x04
    23ac:	8d 81       	ldd	r24, Y+5	; 0x05
    23ae:	9e 81       	ldd	r25, Y+6	; 0x06
    23b0:	0e 94 05 19 	call	0x320a	; 0x320a <action_tapping_process>
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    23b4:	2b 96       	adiw	r28, 0x0b	; 11
    23b6:	0f b6       	in	r0, 0x3f	; 63
    23b8:	f8 94       	cli
    23ba:	de bf       	out	0x3e, r29	; 62
    23bc:	0f be       	out	0x3f, r0	; 63
    23be:	cd bf       	out	0x3d, r28	; 61
    23c0:	df 91       	pop	r29
    23c2:	cf 91       	pop	r28
    23c4:	08 95       	ret
void action_exec(keyevent_t event)
{
    if (!IS_NOEVENT(event)) {
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
        hook_matrix_change(event);
    23c6:	4f 81       	ldd	r20, Y+7	; 0x07
    23c8:	58 85       	ldd	r21, Y+8	; 0x08
    23ca:	69 85       	ldd	r22, Y+9	; 0x09
    23cc:	7a 85       	ldd	r23, Y+10	; 0x0a
    23ce:	8b 85       	ldd	r24, Y+11	; 0x0b
    23d0:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <hook_matrix_change>
    23d4:	d9 cf       	rjmp	.-78     	; 0x2388 <action_exec+0x32>

000023d6 <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    23d6:	cf 93       	push	r28
    if (code == KC_NO) {
    23d8:	88 23       	and	r24, r24
    23da:	09 f4       	brne	.+2      	; 0x23de <register_code+0x8>
    23dc:	e8 c0       	rjmp	.+464    	; 0x25ae <register_code+0x1d8>
    23de:	c8 2f       	mov	r28, r24
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    23e0:	82 38       	cpi	r24, 0x82	; 130
    23e2:	a1 f4       	brne	.+40     	; 0x240c <register_code+0x36>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is on
        if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
    23e4:	0e 94 57 10 	call	0x20ae	; 0x20ae <host_keyboard_leds>
    23e8:	81 fd       	sbrc	r24, 1
    23ea:	e1 c0       	rjmp	.+450    	; 0x25ae <register_code+0x1d8>
#endif
        add_key(KC_CAPSLOCK);
    23ec:	89 e3       	ldi	r24, 0x39	; 57
    23ee:	0e 94 90 1b 	call	0x3720	; 0x3720 <add_key>
        send_keyboard_report();
    23f2:	0e 94 75 1c 	call	0x38ea	; 0x38ea <send_keyboard_report>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    23f6:	2f ef       	ldi	r18, 0xFF	; 255
    23f8:	81 ee       	ldi	r24, 0xE1	; 225
    23fa:	94 e0       	ldi	r25, 0x04	; 4
    23fc:	21 50       	subi	r18, 0x01	; 1
    23fe:	80 40       	sbci	r24, 0x00	; 0
    2400:	90 40       	sbci	r25, 0x00	; 0
    2402:	e1 f7       	brne	.-8      	; 0x23fc <register_code+0x26>
    2404:	00 c0       	rjmp	.+0      	; 0x2406 <register_code+0x30>
    2406:	00 00       	nop
        wait_ms(100);
        del_key(KC_CAPSLOCK);
    2408:	89 e3       	ldi	r24, 0x39	; 57
    240a:	15 c0       	rjmp	.+42     	; 0x2436 <register_code+0x60>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    240c:	83 38       	cpi	r24, 0x83	; 131
    240e:	c1 f4       	brne	.+48     	; 0x2440 <register_code+0x6a>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
    2410:	0e 94 57 10 	call	0x20ae	; 0x20ae <host_keyboard_leds>
    2414:	80 fd       	sbrc	r24, 0
    2416:	cb c0       	rjmp	.+406    	; 0x25ae <register_code+0x1d8>
#endif
        add_key(KC_NUMLOCK);
    2418:	83 e5       	ldi	r24, 0x53	; 83
    241a:	0e 94 90 1b 	call	0x3720	; 0x3720 <add_key>
        send_keyboard_report();
    241e:	0e 94 75 1c 	call	0x38ea	; 0x38ea <send_keyboard_report>
    2422:	2f ef       	ldi	r18, 0xFF	; 255
    2424:	81 ee       	ldi	r24, 0xE1	; 225
    2426:	94 e0       	ldi	r25, 0x04	; 4
    2428:	21 50       	subi	r18, 0x01	; 1
    242a:	80 40       	sbci	r24, 0x00	; 0
    242c:	90 40       	sbci	r25, 0x00	; 0
    242e:	e1 f7       	brne	.-8      	; 0x2428 <register_code+0x52>
    2430:	00 c0       	rjmp	.+0      	; 0x2432 <register_code+0x5c>
    2432:	00 00       	nop
        wait_ms(100);
        del_key(KC_NUMLOCK);
    2434:	83 e5       	ldi	r24, 0x53	; 83
    2436:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <del_key>
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    243a:	cf 91       	pop	r28
#endif
        add_key(KC_NUMLOCK);
        send_keyboard_report();
        wait_ms(100);
        del_key(KC_NUMLOCK);
        send_keyboard_report();
    243c:	0c 94 75 1c 	jmp	0x38ea	; 0x38ea <send_keyboard_report>
    }

    else if (KC_LOCKING_SCROLL == code) {
    2440:	84 38       	cpi	r24, 0x84	; 132
    2442:	a1 f4       	brne	.+40     	; 0x246c <register_code+0x96>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
    2444:	0e 94 57 10 	call	0x20ae	; 0x20ae <host_keyboard_leds>
    2448:	82 fd       	sbrc	r24, 2
    244a:	b1 c0       	rjmp	.+354    	; 0x25ae <register_code+0x1d8>
#endif
        add_key(KC_SCROLLLOCK);
    244c:	87 e4       	ldi	r24, 0x47	; 71
    244e:	0e 94 90 1b 	call	0x3720	; 0x3720 <add_key>
        send_keyboard_report();
    2452:	0e 94 75 1c 	call	0x38ea	; 0x38ea <send_keyboard_report>
    2456:	2f ef       	ldi	r18, 0xFF	; 255
    2458:	81 ee       	ldi	r24, 0xE1	; 225
    245a:	94 e0       	ldi	r25, 0x04	; 4
    245c:	21 50       	subi	r18, 0x01	; 1
    245e:	80 40       	sbci	r24, 0x00	; 0
    2460:	90 40       	sbci	r25, 0x00	; 0
    2462:	e1 f7       	brne	.-8      	; 0x245c <register_code+0x86>
    2464:	00 c0       	rjmp	.+0      	; 0x2466 <register_code+0x90>
    2466:	00 00       	nop
        wait_ms(100);
        del_key(KC_SCROLLLOCK);
    2468:	87 e4       	ldi	r24, 0x47	; 71
    246a:	e5 cf       	rjmp	.-54     	; 0x2436 <register_code+0x60>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    246c:	8c ef       	ldi	r24, 0xFC	; 252
    246e:	8c 0f       	add	r24, r28
    2470:	81 3a       	cpi	r24, 0xA1	; 161
    2472:	48 f4       	brcc	.+18     	; 0x2486 <register_code+0xb0>
        // TODO: should push command_proc out of this block?
        if (command_proc(code)) return;
    2474:	8c 2f       	mov	r24, r28
    2476:	0e 94 5d 27 	call	0x4eba	; 0x4eba <command_proc>
    247a:	81 11       	cpse	r24, r1
    247c:	98 c0       	rjmp	.+304    	; 0x25ae <register_code+0x1d8>
            oneshot_cancel();
        } else 
*/
#endif
        {
            add_key(code);
    247e:	8c 2f       	mov	r24, r28
    2480:	0e 94 90 1b 	call	0x3720	; 0x3720 <add_key>
    2484:	da cf       	rjmp	.-76     	; 0x243a <register_code+0x64>
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
    2486:	80 e2       	ldi	r24, 0x20	; 32
    2488:	8c 0f       	add	r24, r28
    248a:	88 30       	cpi	r24, 0x08	; 8
    248c:	48 f4       	brcc	.+18     	; 0x24a0 <register_code+0xca>
        add_mods(MOD_BIT(code));
    248e:	c7 70       	andi	r28, 0x07	; 7
    2490:	81 e0       	ldi	r24, 0x01	; 1
    2492:	01 c0       	rjmp	.+2      	; 0x2496 <register_code+0xc0>
    2494:	88 0f       	add	r24, r24
    2496:	ca 95       	dec	r28
    2498:	ea f7       	brpl	.-6      	; 0x2494 <register_code+0xbe>
    249a:	0e 94 3b 1c 	call	0x3876	; 0x3876 <add_mods>
    249e:	cd cf       	rjmp	.-102    	; 0x243a <register_code+0x64>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    24a0:	8b e5       	ldi	r24, 0x5B	; 91
    24a2:	8c 0f       	add	r24, r28
    24a4:	83 30       	cpi	r24, 0x03	; 3
    24a6:	78 f4       	brcc	.+30     	; 0x24c6 <register_code+0xf0>
        host_system_send(KEYCODE2SYSTEM(code));
    24a8:	c5 3a       	cpi	r28, 0xA5	; 165
    24aa:	29 f0       	breq	.+10     	; 0x24b6 <register_code+0xe0>
    24ac:	c6 3a       	cpi	r28, 0xA6	; 166
    24ae:	31 f0       	breq	.+12     	; 0x24bc <register_code+0xe6>
    24b0:	83 e8       	ldi	r24, 0x83	; 131
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	05 c0       	rjmp	.+10     	; 0x24c0 <register_code+0xea>
    24b6:	81 e8       	ldi	r24, 0x81	; 129
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	02 c0       	rjmp	.+4      	; 0x24c0 <register_code+0xea>
    24bc:	82 e8       	ldi	r24, 0x82	; 130
    24be:	90 e0       	ldi	r25, 0x00	; 0
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    24c0:	cf 91       	pop	r28
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    24c2:	0c 94 b7 10 	jmp	0x216e	; 0x216e <host_system_send>
    }
    else if IS_CONSUMER(code) {
    24c6:	88 e5       	ldi	r24, 0x58	; 88
    24c8:	8c 0f       	add	r24, r28
    24ca:	85 31       	cpi	r24, 0x15	; 21
    24cc:	08 f0       	brcs	.+2      	; 0x24d0 <register_code+0xfa>
    24ce:	6f c0       	rjmp	.+222    	; 0x25ae <register_code+0x1d8>
        host_consumer_send(KEYCODE2CONSUMER(code));
    24d0:	c8 3a       	cpi	r28, 0xA8	; 168
    24d2:	61 f1       	breq	.+88     	; 0x252c <register_code+0x156>
    24d4:	c9 3a       	cpi	r28, 0xA9	; 169
    24d6:	69 f1       	breq	.+90     	; 0x2532 <register_code+0x15c>
    24d8:	ca 3a       	cpi	r28, 0xAA	; 170
    24da:	71 f1       	breq	.+92     	; 0x2538 <register_code+0x162>
    24dc:	cb 3a       	cpi	r28, 0xAB	; 171
    24de:	79 f1       	breq	.+94     	; 0x253e <register_code+0x168>
    24e0:	cc 3a       	cpi	r28, 0xAC	; 172
    24e2:	81 f1       	breq	.+96     	; 0x2544 <register_code+0x16e>
    24e4:	cd 3a       	cpi	r28, 0xAD	; 173
    24e6:	89 f1       	breq	.+98     	; 0x254a <register_code+0x174>
    24e8:	ce 3a       	cpi	r28, 0xAE	; 174
    24ea:	91 f1       	breq	.+100    	; 0x2550 <register_code+0x17a>
    24ec:	cf 3a       	cpi	r28, 0xAF	; 175
    24ee:	99 f1       	breq	.+102    	; 0x2556 <register_code+0x180>
    24f0:	c1 3b       	cpi	r28, 0xB1	; 177
    24f2:	a1 f1       	breq	.+104    	; 0x255c <register_code+0x186>
    24f4:	c0 3b       	cpi	r28, 0xB0	; 176
    24f6:	a9 f1       	breq	.+106    	; 0x2562 <register_code+0x18c>
    24f8:	c2 3b       	cpi	r28, 0xB2	; 178
    24fa:	b1 f1       	breq	.+108    	; 0x2568 <register_code+0x192>
    24fc:	c3 3b       	cpi	r28, 0xB3	; 179
    24fe:	b9 f1       	breq	.+110    	; 0x256e <register_code+0x198>
    2500:	c4 3b       	cpi	r28, 0xB4	; 180
    2502:	c1 f1       	breq	.+112    	; 0x2574 <register_code+0x19e>
    2504:	c5 3b       	cpi	r28, 0xB5	; 181
    2506:	c9 f1       	breq	.+114    	; 0x257a <register_code+0x1a4>
    2508:	c6 3b       	cpi	r28, 0xB6	; 182
    250a:	d1 f1       	breq	.+116    	; 0x2580 <register_code+0x1aa>
    250c:	c7 3b       	cpi	r28, 0xB7	; 183
    250e:	d9 f1       	breq	.+118    	; 0x2586 <register_code+0x1b0>
    2510:	c8 3b       	cpi	r28, 0xB8	; 184
    2512:	e1 f1       	breq	.+120    	; 0x258c <register_code+0x1b6>
    2514:	c9 3b       	cpi	r28, 0xB9	; 185
    2516:	e9 f1       	breq	.+122    	; 0x2592 <register_code+0x1bc>
    2518:	ca 3b       	cpi	r28, 0xBA	; 186
    251a:	f1 f1       	breq	.+124    	; 0x2598 <register_code+0x1c2>
    251c:	cb 3b       	cpi	r28, 0xBB	; 187
    251e:	f9 f1       	breq	.+126    	; 0x259e <register_code+0x1c8>
    2520:	cc 3b       	cpi	r28, 0xBC	; 188
    2522:	09 f4       	brne	.+2      	; 0x2526 <register_code+0x150>
    2524:	3f c0       	rjmp	.+126    	; 0x25a4 <register_code+0x1ce>
    2526:	80 e0       	ldi	r24, 0x00	; 0
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	3e c0       	rjmp	.+124    	; 0x25a8 <register_code+0x1d2>
    252c:	82 ee       	ldi	r24, 0xE2	; 226
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	3b c0       	rjmp	.+118    	; 0x25a8 <register_code+0x1d2>
    2532:	89 ee       	ldi	r24, 0xE9	; 233
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	38 c0       	rjmp	.+112    	; 0x25a8 <register_code+0x1d2>
    2538:	8a ee       	ldi	r24, 0xEA	; 234
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	35 c0       	rjmp	.+106    	; 0x25a8 <register_code+0x1d2>
    253e:	85 eb       	ldi	r24, 0xB5	; 181
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	32 c0       	rjmp	.+100    	; 0x25a8 <register_code+0x1d2>
    2544:	86 eb       	ldi	r24, 0xB6	; 182
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	2f c0       	rjmp	.+94     	; 0x25a8 <register_code+0x1d2>
    254a:	83 eb       	ldi	r24, 0xB3	; 179
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	2c c0       	rjmp	.+88     	; 0x25a8 <register_code+0x1d2>
    2550:	84 eb       	ldi	r24, 0xB4	; 180
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	29 c0       	rjmp	.+82     	; 0x25a8 <register_code+0x1d2>
    2556:	87 eb       	ldi	r24, 0xB7	; 183
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	26 c0       	rjmp	.+76     	; 0x25a8 <register_code+0x1d2>
    255c:	8c ec       	ldi	r24, 0xCC	; 204
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	23 c0       	rjmp	.+70     	; 0x25a8 <register_code+0x1d2>
    2562:	8d ec       	ldi	r24, 0xCD	; 205
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	20 c0       	rjmp	.+64     	; 0x25a8 <register_code+0x1d2>
    2568:	83 e8       	ldi	r24, 0x83	; 131
    256a:	91 e0       	ldi	r25, 0x01	; 1
    256c:	1d c0       	rjmp	.+58     	; 0x25a8 <register_code+0x1d2>
    256e:	8a e8       	ldi	r24, 0x8A	; 138
    2570:	91 e0       	ldi	r25, 0x01	; 1
    2572:	1a c0       	rjmp	.+52     	; 0x25a8 <register_code+0x1d2>
    2574:	82 e9       	ldi	r24, 0x92	; 146
    2576:	91 e0       	ldi	r25, 0x01	; 1
    2578:	17 c0       	rjmp	.+46     	; 0x25a8 <register_code+0x1d2>
    257a:	84 e9       	ldi	r24, 0x94	; 148
    257c:	91 e0       	ldi	r25, 0x01	; 1
    257e:	14 c0       	rjmp	.+40     	; 0x25a8 <register_code+0x1d2>
    2580:	81 e2       	ldi	r24, 0x21	; 33
    2582:	92 e0       	ldi	r25, 0x02	; 2
    2584:	11 c0       	rjmp	.+34     	; 0x25a8 <register_code+0x1d2>
    2586:	83 e2       	ldi	r24, 0x23	; 35
    2588:	92 e0       	ldi	r25, 0x02	; 2
    258a:	0e c0       	rjmp	.+28     	; 0x25a8 <register_code+0x1d2>
    258c:	84 e2       	ldi	r24, 0x24	; 36
    258e:	92 e0       	ldi	r25, 0x02	; 2
    2590:	0b c0       	rjmp	.+22     	; 0x25a8 <register_code+0x1d2>
    2592:	85 e2       	ldi	r24, 0x25	; 37
    2594:	92 e0       	ldi	r25, 0x02	; 2
    2596:	08 c0       	rjmp	.+16     	; 0x25a8 <register_code+0x1d2>
    2598:	86 e2       	ldi	r24, 0x26	; 38
    259a:	92 e0       	ldi	r25, 0x02	; 2
    259c:	05 c0       	rjmp	.+10     	; 0x25a8 <register_code+0x1d2>
    259e:	87 e2       	ldi	r24, 0x27	; 39
    25a0:	92 e0       	ldi	r25, 0x02	; 2
    25a2:	02 c0       	rjmp	.+4      	; 0x25a8 <register_code+0x1d2>
    25a4:	8a e2       	ldi	r24, 0x2A	; 42
    25a6:	92 e0       	ldi	r25, 0x02	; 2
    }
}
    25a8:	cf 91       	pop	r28
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    25aa:	0c 94 cd 10 	jmp	0x219a	; 0x219a <host_consumer_send>
    }
}
    25ae:	cf 91       	pop	r28
    25b0:	08 95       	ret

000025b2 <unregister_code>:

void unregister_code(uint8_t code)
{
    if (code == KC_NO) {
    25b2:	88 23       	and	r24, r24
    25b4:	09 f4       	brne	.+2      	; 0x25b8 <unregister_code+0x6>
    25b6:	66 c0       	rjmp	.+204    	; 0x2684 <unregister_code+0xd2>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    25b8:	82 38       	cpi	r24, 0x82	; 130
    25ba:	a1 f4       	brne	.+40     	; 0x25e4 <unregister_code+0x32>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is off
        if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
    25bc:	0e 94 57 10 	call	0x20ae	; 0x20ae <host_keyboard_leds>
    25c0:	81 ff       	sbrs	r24, 1
    25c2:	60 c0       	rjmp	.+192    	; 0x2684 <unregister_code+0xd2>
#endif
        add_key(KC_CAPSLOCK);
    25c4:	89 e3       	ldi	r24, 0x39	; 57
    25c6:	0e 94 90 1b 	call	0x3720	; 0x3720 <add_key>
        send_keyboard_report();
    25ca:	0e 94 75 1c 	call	0x38ea	; 0x38ea <send_keyboard_report>
    25ce:	2f ef       	ldi	r18, 0xFF	; 255
    25d0:	81 ee       	ldi	r24, 0xE1	; 225
    25d2:	94 e0       	ldi	r25, 0x04	; 4
    25d4:	21 50       	subi	r18, 0x01	; 1
    25d6:	80 40       	sbci	r24, 0x00	; 0
    25d8:	90 40       	sbci	r25, 0x00	; 0
    25da:	e1 f7       	brne	.-8      	; 0x25d4 <unregister_code+0x22>
    25dc:	00 c0       	rjmp	.+0      	; 0x25de <unregister_code+0x2c>
    25de:	00 00       	nop
        wait_ms(100);
        del_key(KC_CAPSLOCK);
    25e0:	89 e3       	ldi	r24, 0x39	; 57
    25e2:	15 c0       	rjmp	.+42     	; 0x260e <unregister_code+0x5c>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    25e4:	83 38       	cpi	r24, 0x83	; 131
    25e6:	b9 f4       	brne	.+46     	; 0x2616 <unregister_code+0x64>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
    25e8:	0e 94 57 10 	call	0x20ae	; 0x20ae <host_keyboard_leds>
    25ec:	80 ff       	sbrs	r24, 0
    25ee:	4a c0       	rjmp	.+148    	; 0x2684 <unregister_code+0xd2>
#endif
        add_key(KC_NUMLOCK);
    25f0:	83 e5       	ldi	r24, 0x53	; 83
    25f2:	0e 94 90 1b 	call	0x3720	; 0x3720 <add_key>
        send_keyboard_report();
    25f6:	0e 94 75 1c 	call	0x38ea	; 0x38ea <send_keyboard_report>
    25fa:	2f ef       	ldi	r18, 0xFF	; 255
    25fc:	81 ee       	ldi	r24, 0xE1	; 225
    25fe:	94 e0       	ldi	r25, 0x04	; 4
    2600:	21 50       	subi	r18, 0x01	; 1
    2602:	80 40       	sbci	r24, 0x00	; 0
    2604:	90 40       	sbci	r25, 0x00	; 0
    2606:	e1 f7       	brne	.-8      	; 0x2600 <unregister_code+0x4e>
    2608:	00 c0       	rjmp	.+0      	; 0x260a <unregister_code+0x58>
    260a:	00 00       	nop
        wait_ms(100);
        del_key(KC_NUMLOCK);
    260c:	83 e5       	ldi	r24, 0x53	; 83
    260e:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <del_key>
        send_keyboard_report();
    2612:	0c 94 75 1c 	jmp	0x38ea	; 0x38ea <send_keyboard_report>
    }

    else if (KC_LOCKING_SCROLL == code) {
    2616:	84 38       	cpi	r24, 0x84	; 132
    2618:	a1 f4       	brne	.+40     	; 0x2642 <unregister_code+0x90>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
    261a:	0e 94 57 10 	call	0x20ae	; 0x20ae <host_keyboard_leds>
    261e:	82 ff       	sbrs	r24, 2
    2620:	31 c0       	rjmp	.+98     	; 0x2684 <unregister_code+0xd2>
#endif
        add_key(KC_SCROLLLOCK);
    2622:	87 e4       	ldi	r24, 0x47	; 71
    2624:	0e 94 90 1b 	call	0x3720	; 0x3720 <add_key>
        send_keyboard_report();
    2628:	0e 94 75 1c 	call	0x38ea	; 0x38ea <send_keyboard_report>
    262c:	2f ef       	ldi	r18, 0xFF	; 255
    262e:	81 ee       	ldi	r24, 0xE1	; 225
    2630:	94 e0       	ldi	r25, 0x04	; 4
    2632:	21 50       	subi	r18, 0x01	; 1
    2634:	80 40       	sbci	r24, 0x00	; 0
    2636:	90 40       	sbci	r25, 0x00	; 0
    2638:	e1 f7       	brne	.-8      	; 0x2632 <unregister_code+0x80>
    263a:	00 c0       	rjmp	.+0      	; 0x263c <unregister_code+0x8a>
    263c:	00 00       	nop
        wait_ms(100);
        del_key(KC_SCROLLLOCK);
    263e:	87 e4       	ldi	r24, 0x47	; 71
    2640:	e6 cf       	rjmp	.-52     	; 0x260e <unregister_code+0x5c>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    2642:	9c ef       	ldi	r25, 0xFC	; 252
    2644:	98 0f       	add	r25, r24
    2646:	91 3a       	cpi	r25, 0xA1	; 161
    2648:	10 f3       	brcs	.-60     	; 0x260e <unregister_code+0x5c>
        del_key(code);
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    264a:	90 e2       	ldi	r25, 0x20	; 32
    264c:	98 0f       	add	r25, r24
    264e:	98 30       	cpi	r25, 0x08	; 8
    2650:	50 f4       	brcc	.+20     	; 0x2666 <unregister_code+0xb4>
        del_mods(MOD_BIT(code));
    2652:	87 70       	andi	r24, 0x07	; 7
    2654:	91 e0       	ldi	r25, 0x01	; 1
    2656:	01 c0       	rjmp	.+2      	; 0x265a <unregister_code+0xa8>
    2658:	99 0f       	add	r25, r25
    265a:	8a 95       	dec	r24
    265c:	ea f7       	brpl	.-6      	; 0x2658 <unregister_code+0xa6>
    265e:	89 2f       	mov	r24, r25
    2660:	0e 94 41 1c 	call	0x3882	; 0x3882 <del_mods>
    2664:	d6 cf       	rjmp	.-84     	; 0x2612 <unregister_code+0x60>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    2666:	9b e5       	ldi	r25, 0x5B	; 91
    2668:	98 0f       	add	r25, r24
    266a:	93 30       	cpi	r25, 0x03	; 3
    266c:	20 f4       	brcc	.+8      	; 0x2676 <unregister_code+0xc4>
        host_system_send(0);
    266e:	80 e0       	ldi	r24, 0x00	; 0
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	0c 94 b7 10 	jmp	0x216e	; 0x216e <host_system_send>
    }
    else if IS_CONSUMER(code) {
    2676:	88 5a       	subi	r24, 0xA8	; 168
    2678:	85 31       	cpi	r24, 0x15	; 21
    267a:	20 f4       	brcc	.+8      	; 0x2684 <unregister_code+0xd2>
        host_consumer_send(0);
    267c:	80 e0       	ldi	r24, 0x00	; 0
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	0c 94 cd 10 	jmp	0x219a	; 0x219a <host_consumer_send>
    2684:	08 95       	ret

00002686 <register_mods>:
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
    2686:	88 23       	and	r24, r24
    2688:	21 f0       	breq	.+8      	; 0x2692 <register_mods+0xc>
        add_mods(mods);
    268a:	0e 94 3b 1c 	call	0x3876	; 0x3876 <add_mods>
        send_keyboard_report();
    268e:	0c 94 75 1c 	jmp	0x38ea	; 0x38ea <send_keyboard_report>
    2692:	08 95       	ret

00002694 <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    2694:	88 23       	and	r24, r24
    2696:	21 f0       	breq	.+8      	; 0x26a0 <unregister_mods+0xc>
        del_mods(mods);
    2698:	0e 94 41 1c 	call	0x3882	; 0x3882 <del_mods>
        send_keyboard_report();
    269c:	0c 94 75 1c 	jmp	0x38ea	; 0x38ea <send_keyboard_report>
    26a0:	08 95       	ret

000026a2 <process_action>:
    }
#endif
}

void process_action(keyrecord_t *record)
{
    26a2:	cf 92       	push	r12
    26a4:	df 92       	push	r13
    26a6:	ef 92       	push	r14
    26a8:	ff 92       	push	r15
    26aa:	0f 93       	push	r16
    26ac:	1f 93       	push	r17
    26ae:	cf 93       	push	r28
    26b0:	df 93       	push	r29
    26b2:	00 d0       	rcall	.+0      	; 0x26b4 <process_action+0x12>
    26b4:	00 d0       	rcall	.+0      	; 0x26b6 <process_action+0x14>
    26b6:	00 d0       	rcall	.+0      	; 0x26b8 <process_action+0x16>
    26b8:	cd b7       	in	r28, 0x3d	; 61
    26ba:	de b7       	in	r29, 0x3e	; 62
    keyevent_t event = record->event;
    26bc:	25 e0       	ldi	r18, 0x05	; 5
    26be:	fc 01       	movw	r30, r24
    26c0:	de 01       	movw	r26, r28
    26c2:	11 96       	adiw	r26, 0x01	; 1
    26c4:	01 90       	ld	r0, Z+
    26c6:	0d 92       	st	X+, r0
    26c8:	2a 95       	dec	r18
    26ca:	e1 f7       	brne	.-8      	; 0x26c4 <process_action+0x22>
    26cc:	fc 01       	movw	r30, r24
    26ce:	40 81       	ld	r20, Z
    26d0:	31 81       	ldd	r19, Z+1	; 0x01
    26d2:	f2 80       	ldd	r15, Z+2	; 0x02
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
    26d4:	25 81       	ldd	r18, Z+5	; 0x05
    26d6:	22 95       	swap	r18
    26d8:	2f 70       	andi	r18, 0x0F	; 15
    26da:	63 81       	ldd	r22, Z+3	; 0x03
    26dc:	74 81       	ldd	r23, Z+4	; 0x04
    26de:	67 2b       	or	r22, r23
    26e0:	09 f4       	brne	.+2      	; 0x26e4 <process_action+0x42>
    26e2:	d8 c2       	rjmp	.+1456   	; 0x2c94 <process_action+0x5f2>
    26e4:	3f 3f       	cpi	r19, 0xFF	; 255
    26e6:	19 f4       	brne	.+6      	; 0x26ee <process_action+0x4c>
#endif

    if (IS_NOEVENT(event)) { return; }
    26e8:	4f 3f       	cpi	r20, 0xFF	; 255
    26ea:	09 f4       	brne	.+2      	; 0x26ee <process_action+0x4c>
    26ec:	d3 c2       	rjmp	.+1446   	; 0x2c94 <process_action+0x5f2>
    26ee:	6c 01       	movw	r12, r24

    action_t action = layer_switch_get_action(event.key);
    26f0:	49 83       	std	Y+1, r20	; 0x01
    26f2:	3a 83       	std	Y+2, r19	; 0x02
    26f4:	89 81       	ldd	r24, Y+1	; 0x01
    26f6:	9a 81       	ldd	r25, Y+2	; 0x02
    26f8:	2e 83       	std	Y+6, r18	; 0x06
    26fa:	0e 94 4f 1b 	call	0x369e	; 0x369e <layer_switch_get_action>
    26fe:	18 2f       	mov	r17, r24
    2700:	09 2f       	mov	r16, r25
    dprint("ACTION: "); debug_action(action);
#ifndef NO_ACTION_LAYER
    dprint(" layer_state: "); layer_debug();
    2702:	0e 94 4e 1b 	call	0x369c	; 0x369c <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    2706:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <default_layer_debug>
#endif
    dprintln();

    switch (action.kind.id) {
    270a:	e0 2f       	mov	r30, r16
    270c:	e2 95       	swap	r30
    270e:	ef 70       	andi	r30, 0x0F	; 15
    2710:	f0 e0       	ldi	r31, 0x00	; 0
    2712:	e0 5a       	subi	r30, 0xA0	; 160
    2714:	ff 4f       	sbci	r31, 0xFF	; 255
    2716:	2e 81       	ldd	r18, Y+6	; 0x06
    2718:	0c 94 03 2a 	jmp	0x5406	; 0x5406 <__tablejump2__>
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    271c:	80 2f       	mov	r24, r16
    271e:	80 7f       	andi	r24, 0xF0	; 240
    2720:	90 2f       	mov	r25, r16
    2722:	9f 70       	andi	r25, 0x0F	; 15
    2724:	09 2f       	mov	r16, r25
    2726:	88 23       	and	r24, r24
    2728:	11 f0       	breq	.+4      	; 0x272e <process_action+0x8c>
    272a:	02 95       	swap	r16
    272c:	00 7f       	andi	r16, 0xF0	; 240
                                                                action.key.mods<<4;
                if (event.pressed) {
    272e:	ff 20       	and	r15, r15
    2730:	49 f0       	breq	.+18     	; 0x2744 <process_action+0xa2>
                    if (mods) {
    2732:	00 23       	and	r16, r16
    2734:	09 f4       	brne	.+2      	; 0x2738 <process_action+0x96>
    2736:	5f c2       	rjmp	.+1214   	; 0x2bf6 <process_action+0x554>
                        add_weak_mods(mods);
    2738:	80 2f       	mov	r24, r16
    273a:	0e 94 4e 1c 	call	0x389c	; 0x389c <add_weak_mods>
                        send_keyboard_report();
    273e:	0e 94 75 1c 	call	0x38ea	; 0x38ea <send_keyboard_report>
    2742:	59 c2       	rjmp	.+1202   	; 0x2bf6 <process_action+0x554>
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
    2744:	81 2f       	mov	r24, r17
    2746:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <unregister_code>
                    if (mods) {
    274a:	00 23       	and	r16, r16
    274c:	09 f4       	brne	.+2      	; 0x2750 <process_action+0xae>
    274e:	a2 c2       	rjmp	.+1348   	; 0x2c94 <process_action+0x5f2>
                        del_weak_mods(mods);
    2750:	80 2f       	mov	r24, r16
    2752:	0e 94 54 1c 	call	0x38a8	; 0x38a8 <del_weak_mods>
            break;
#endif
        default:
            break;
    }
}
    2756:	26 96       	adiw	r28, 0x06	; 6
    2758:	0f b6       	in	r0, 0x3f	; 63
    275a:	f8 94       	cli
    275c:	de bf       	out	0x3e, r29	; 62
    275e:	0f be       	out	0x3f, r0	; 63
    2760:	cd bf       	out	0x3d, r28	; 61
    2762:	df 91       	pop	r29
    2764:	cf 91       	pop	r28
    2766:	1f 91       	pop	r17
    2768:	0f 91       	pop	r16
    276a:	ff 90       	pop	r15
    276c:	ef 90       	pop	r14
    276e:	df 90       	pop	r13
    2770:	cf 90       	pop	r12
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
                    if (mods) {
                        del_weak_mods(mods);
                        send_keyboard_report();
    2772:	0c 94 75 1c 	jmp	0x38ea	; 0x38ea <send_keyboard_report>
            break;
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    2776:	80 2f       	mov	r24, r16
    2778:	80 7f       	andi	r24, 0xF0	; 240
    277a:	90 2f       	mov	r25, r16
    277c:	9f 70       	andi	r25, 0x0F	; 15
    277e:	09 2f       	mov	r16, r25
    2780:	80 32       	cpi	r24, 0x20	; 32
    2782:	11 f0       	breq	.+4      	; 0x2788 <process_action+0xe6>
    2784:	02 95       	swap	r16
    2786:	00 7f       	andi	r16, 0xF0	; 240
                                                                    action.key.mods<<4;
                switch (action.layer_tap.code) {
    2788:	11 23       	and	r17, r17
    278a:	19 f0       	breq	.+6      	; 0x2792 <process_action+0xf0>
    278c:	11 30       	cpi	r17, 0x01	; 1
    278e:	01 f1       	breq	.+64     	; 0x27d0 <process_action+0x12e>
    2790:	29 c0       	rjmp	.+82     	; 0x27e4 <process_action+0x142>
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
    2792:	ff 20       	and	r15, r15
    2794:	a9 f0       	breq	.+42     	; 0x27c0 <process_action+0x11e>
                            if (tap_count == 0) {
                                register_mods(mods);
    2796:	80 2f       	mov	r24, r16
                switch (action.layer_tap.code) {
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
                            if (tap_count == 0) {
    2798:	22 23       	and	r18, r18
    279a:	49 f1       	breq	.+82     	; 0x27ee <process_action+0x14c>
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    279c:	21 30       	cpi	r18, 0x01	; 1
    279e:	39 f5       	brne	.+78     	; 0x27ee <process_action+0x14c>
            break;
#endif
        default:
            break;
    }
}
    27a0:	26 96       	adiw	r28, 0x06	; 6
    27a2:	0f b6       	in	r0, 0x3f	; 63
    27a4:	f8 94       	cli
    27a6:	de bf       	out	0x3e, r29	; 62
    27a8:	0f be       	out	0x3f, r0	; 63
    27aa:	cd bf       	out	0x3d, r28	; 61
    27ac:	df 91       	pop	r29
    27ae:	cf 91       	pop	r28
    27b0:	1f 91       	pop	r17
    27b2:	0f 91       	pop	r16
    27b4:	ff 90       	pop	r15
    27b6:	ef 90       	pop	r14
    27b8:	df 90       	pop	r13
    27ba:	cf 90       	pop	r12
                            if (tap_count == 0) {
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    27bc:	0c 94 5e 1c 	jmp	0x38bc	; 0x38bc <set_oneshot_mods>
                            }
                            else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
    27c0:	22 23       	and	r18, r18
    27c2:	19 f0       	breq	.+6      	; 0x27ca <process_action+0x128>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            }
                            else if (tap_count == 1) {
    27c4:	21 30       	cpi	r18, 0x01	; 1
    27c6:	09 f4       	brne	.+2      	; 0x27ca <process_action+0x128>
    27c8:	65 c2       	rjmp	.+1226   	; 0x2c94 <process_action+0x5f2>
                                // Retain Oneshot mods
                            }
                            else {
                                clear_oneshot_mods();
    27ca:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <clear_oneshot_mods>
    27ce:	2c c0       	rjmp	.+88     	; 0x2828 <process_action+0x186>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
    27d0:	ff 20       	and	r15, r15
    27d2:	e9 f0       	breq	.+58     	; 0x280e <process_action+0x16c>
                            if (tap_count <= TAPPING_TOGGLE) {
    27d4:	26 30       	cpi	r18, 0x06	; 6
    27d6:	08 f0       	brcs	.+2      	; 0x27da <process_action+0x138>
    27d8:	5d c2       	rjmp	.+1210   	; 0x2c94 <process_action+0x5f2>
                                if (mods & get_mods()) {
    27da:	0e 94 38 1c 	call	0x3870	; 0x3870 <get_mods>
    27de:	80 23       	and	r24, r16
    27e0:	29 f0       	breq	.+10     	; 0x27ec <process_action+0x14a>
    27e2:	22 c0       	rjmp	.+68     	; 0x2828 <process_action+0x186>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
    27e4:	ff 20       	and	r15, r15
    27e6:	f1 f0       	breq	.+60     	; 0x2824 <process_action+0x182>
                            if (tap_count > 0) {
    27e8:	21 11       	cpse	r18, r1
    27ea:	15 c0       	rjmp	.+42     	; 0x2816 <process_action+0x174>
                                if (mods & get_mods()) {
                                    dprint("MODS_TAP_TOGGLE: toggle mods off\n");
                                    unregister_mods(mods);
                                } else {
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
    27ec:	80 2f       	mov	r24, r16
            break;
#endif
        default:
            break;
    }
}
    27ee:	26 96       	adiw	r28, 0x06	; 6
    27f0:	0f b6       	in	r0, 0x3f	; 63
    27f2:	f8 94       	cli
    27f4:	de bf       	out	0x3e, r29	; 62
    27f6:	0f be       	out	0x3f, r0	; 63
    27f8:	cd bf       	out	0x3d, r28	; 61
    27fa:	df 91       	pop	r29
    27fc:	cf 91       	pop	r28
    27fe:	1f 91       	pop	r17
    2800:	0f 91       	pop	r16
    2802:	ff 90       	pop	r15
    2804:	ef 90       	pop	r14
    2806:	df 90       	pop	r13
    2808:	cf 90       	pop	r12
                                if (mods & get_mods()) {
                                    dprint("MODS_TAP_TOGGLE: toggle mods off\n");
                                    unregister_mods(mods);
                                } else {
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
    280a:	0c 94 43 13 	jmp	0x2686	; 0x2686 <register_mods>
                                }
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
    280e:	25 30       	cpi	r18, 0x05	; 5
    2810:	08 f0       	brcs	.+2      	; 0x2814 <process_action+0x172>
    2812:	40 c2       	rjmp	.+1152   	; 0x2c94 <process_action+0x5f2>
    2814:	09 c0       	rjmp	.+18     	; 0x2828 <process_action+0x186>
                        }
                        break;
                    default:
                        if (event.pressed) {
                            if (tap_count > 0) {
                                if (record->tap.interrupted) {
    2816:	f6 01       	movw	r30, r12
    2818:	85 81       	ldd	r24, Z+5	; 0x05
    281a:	80 ff       	sbrs	r24, 0
    281c:	ec c1       	rjmp	.+984    	; 0x2bf6 <process_action+0x554>
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
    281e:	8f 70       	andi	r24, 0x0F	; 15
    2820:	85 83       	std	Z+5, r24	; 0x05
    2822:	e4 cf       	rjmp	.-56     	; 0x27ec <process_action+0x14a>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
    2824:	21 11       	cpse	r18, r1
    2826:	fb c1       	rjmp	.+1014   	; 0x2c1e <process_action+0x57c>
                                dprint("MODS_TAP: Tap: unregister_code\n");
                                unregister_code(action.key.code);
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                unregister_mods(mods);
    2828:	80 2f       	mov	r24, r16
    282a:	69 c1       	rjmp	.+722    	; 0x2afe <process_action+0x45c>
            break;
#endif
#ifdef EXTRAKEY_ENABLE
        /* other HID usage */
        case ACT_USAGE:
            switch (action.usage.page) {
    282c:	20 2f       	mov	r18, r16
    282e:	26 95       	lsr	r18
    2830:	26 95       	lsr	r18
    2832:	23 70       	andi	r18, 0x03	; 3
    2834:	30 e0       	ldi	r19, 0x00	; 0
    2836:	21 15       	cp	r18, r1
    2838:	31 05       	cpc	r19, r1
    283a:	21 f0       	breq	.+8      	; 0x2844 <process_action+0x1a2>
    283c:	21 30       	cpi	r18, 0x01	; 1
    283e:	31 05       	cpc	r19, r1
    2840:	c9 f0       	breq	.+50     	; 0x2874 <process_action+0x1d2>
    2842:	28 c2       	rjmp	.+1104   	; 0x2c94 <process_action+0x5f2>
                case PAGE_SYSTEM:
                    if (event.pressed) {
    2844:	ff 20       	and	r15, r15
    2846:	21 f0       	breq	.+8      	; 0x2850 <process_action+0x1ae>
                        host_system_send(action.usage.code);
    2848:	81 2f       	mov	r24, r17
    284a:	90 2f       	mov	r25, r16
    284c:	93 70       	andi	r25, 0x03	; 3
    284e:	02 c0       	rjmp	.+4      	; 0x2854 <process_action+0x1b2>
                    } else {
                        host_system_send(0);
    2850:	80 e0       	ldi	r24, 0x00	; 0
    2852:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    2854:	26 96       	adiw	r28, 0x06	; 6
    2856:	0f b6       	in	r0, 0x3f	; 63
    2858:	f8 94       	cli
    285a:	de bf       	out	0x3e, r29	; 62
    285c:	0f be       	out	0x3f, r0	; 63
    285e:	cd bf       	out	0x3d, r28	; 61
    2860:	df 91       	pop	r29
    2862:	cf 91       	pop	r28
    2864:	1f 91       	pop	r17
    2866:	0f 91       	pop	r16
    2868:	ff 90       	pop	r15
    286a:	ef 90       	pop	r14
    286c:	df 90       	pop	r13
    286e:	cf 90       	pop	r12
            switch (action.usage.page) {
                case PAGE_SYSTEM:
                    if (event.pressed) {
                        host_system_send(action.usage.code);
                    } else {
                        host_system_send(0);
    2870:	0c 94 b7 10 	jmp	0x216e	; 0x216e <host_system_send>
                    }
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
    2874:	ff 20       	and	r15, r15
    2876:	21 f0       	breq	.+8      	; 0x2880 <process_action+0x1de>
                        host_consumer_send(action.usage.code);
    2878:	81 2f       	mov	r24, r17
    287a:	90 2f       	mov	r25, r16
    287c:	93 70       	andi	r25, 0x03	; 3
    287e:	02 c0       	rjmp	.+4      	; 0x2884 <process_action+0x1e2>
                    } else {
                        host_consumer_send(0);
    2880:	80 e0       	ldi	r24, 0x00	; 0
    2882:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    2884:	26 96       	adiw	r28, 0x06	; 6
    2886:	0f b6       	in	r0, 0x3f	; 63
    2888:	f8 94       	cli
    288a:	de bf       	out	0x3e, r29	; 62
    288c:	0f be       	out	0x3f, r0	; 63
    288e:	cd bf       	out	0x3d, r28	; 61
    2890:	df 91       	pop	r29
    2892:	cf 91       	pop	r28
    2894:	1f 91       	pop	r17
    2896:	0f 91       	pop	r16
    2898:	ff 90       	pop	r15
    289a:	ef 90       	pop	r14
    289c:	df 90       	pop	r13
    289e:	cf 90       	pop	r12
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
                        host_consumer_send(action.usage.code);
                    } else {
                        host_consumer_send(0);
    28a0:	0c 94 cd 10 	jmp	0x219a	; 0x219a <host_consumer_send>
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
                mousekey_on(action.key.code);
    28a4:	81 2f       	mov	r24, r17
            break;
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
    28a6:	ff 20       	and	r15, r15
    28a8:	19 f0       	breq	.+6      	; 0x28b0 <process_action+0x20e>
                mousekey_on(action.key.code);
    28aa:	0e 94 63 21 	call	0x42c6	; 0x42c6 <mousekey_on>
    28ae:	02 c0       	rjmp	.+4      	; 0x28b4 <process_action+0x212>
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
    28b0:	0e 94 cb 21 	call	0x4396	; 0x4396 <mousekey_off>
            break;
#endif
        default:
            break;
    }
}
    28b4:	26 96       	adiw	r28, 0x06	; 6
    28b6:	0f b6       	in	r0, 0x3f	; 63
    28b8:	f8 94       	cli
    28ba:	de bf       	out	0x3e, r29	; 62
    28bc:	0f be       	out	0x3f, r0	; 63
    28be:	cd bf       	out	0x3d, r28	; 61
    28c0:	df 91       	pop	r29
    28c2:	cf 91       	pop	r28
    28c4:	1f 91       	pop	r17
    28c6:	0f 91       	pop	r16
    28c8:	ff 90       	pop	r15
    28ca:	ef 90       	pop	r14
    28cc:	df 90       	pop	r13
    28ce:	cf 90       	pop	r12
            if (event.pressed) {
                mousekey_on(action.key.code);
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
                mousekey_send();
    28d0:	0c 94 50 22 	jmp	0x44a0	; 0x44a0 <mousekey_send>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
    28d4:	80 2f       	mov	r24, r16
    28d6:	83 70       	andi	r24, 0x03	; 3
    28d8:	09 f0       	breq	.+2      	; 0x28dc <process_action+0x23a>
    28da:	78 c0       	rjmp	.+240    	; 0x29cc <process_action+0x32a>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
    28dc:	f1 10       	cpse	r15, r1
    28de:	da c1       	rjmp	.+948    	; 0x2c94 <process_action+0x5f2>
                    uint8_t shift = action.layer_bitop.part*4;
    28e0:	81 2f       	mov	r24, r17
    28e2:	82 95       	swap	r24
    28e4:	86 95       	lsr	r24
    28e6:	87 70       	andi	r24, 0x07	; 7
    28e8:	88 0f       	add	r24, r24
    28ea:	88 0f       	add	r24, r24
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    28ec:	91 2f       	mov	r25, r17
    28ee:	9f 70       	andi	r25, 0x0F	; 15
    28f0:	c9 2e       	mov	r12, r25
    28f2:	d1 2c       	mov	r13, r1
    28f4:	e1 2c       	mov	r14, r1
    28f6:	f1 2c       	mov	r15, r1
    28f8:	08 2e       	mov	r0, r24
    28fa:	04 c0       	rjmp	.+8      	; 0x2904 <process_action+0x262>
    28fc:	cc 0c       	add	r12, r12
    28fe:	dd 1c       	adc	r13, r13
    2900:	ee 1c       	adc	r14, r14
    2902:	ff 1c       	adc	r15, r15
    2904:	0a 94       	dec	r0
    2906:	d2 f7       	brpl	.-12     	; 0x28fc <process_action+0x25a>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2908:	14 ff       	sbrs	r17, 4
    290a:	12 c0       	rjmp	.+36     	; 0x2930 <process_action+0x28e>
    290c:	4f e0       	ldi	r20, 0x0F	; 15
    290e:	50 e0       	ldi	r21, 0x00	; 0
    2910:	60 e0       	ldi	r22, 0x00	; 0
    2912:	70 e0       	ldi	r23, 0x00	; 0
    2914:	04 c0       	rjmp	.+8      	; 0x291e <process_action+0x27c>
    2916:	44 0f       	add	r20, r20
    2918:	55 1f       	adc	r21, r21
    291a:	66 1f       	adc	r22, r22
    291c:	77 1f       	adc	r23, r23
    291e:	8a 95       	dec	r24
    2920:	d2 f7       	brpl	.-12     	; 0x2916 <process_action+0x274>
    2922:	cb 01       	movw	r24, r22
    2924:	ba 01       	movw	r22, r20
    2926:	60 95       	com	r22
    2928:	70 95       	com	r23
    292a:	80 95       	com	r24
    292c:	90 95       	com	r25
    292e:	03 c0       	rjmp	.+6      	; 0x2936 <process_action+0x294>
    2930:	60 e0       	ldi	r22, 0x00	; 0
    2932:	70 e0       	ldi	r23, 0x00	; 0
    2934:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    2936:	20 2f       	mov	r18, r16
    2938:	26 95       	lsr	r18
    293a:	26 95       	lsr	r18
    293c:	23 70       	andi	r18, 0x03	; 3
    293e:	42 2f       	mov	r20, r18
    2940:	50 e0       	ldi	r21, 0x00	; 0
    2942:	42 30       	cpi	r20, 0x02	; 2
    2944:	51 05       	cpc	r21, r1
    2946:	d1 f0       	breq	.+52     	; 0x297c <process_action+0x2da>
    2948:	43 30       	cpi	r20, 0x03	; 3
    294a:	51 05       	cpc	r21, r1
    294c:	59 f1       	breq	.+86     	; 0x29a4 <process_action+0x302>
    294e:	6c 29       	or	r22, r12
    2950:	7d 29       	or	r23, r13
    2952:	8e 29       	or	r24, r14
    2954:	9f 29       	or	r25, r15
    2956:	41 30       	cpi	r20, 0x01	; 1
    2958:	51 05       	cpc	r21, r1
    295a:	41 f1       	breq	.+80     	; 0x29ac <process_action+0x30a>
            break;
#endif
        default:
            break;
    }
}
    295c:	26 96       	adiw	r28, 0x06	; 6
    295e:	0f b6       	in	r0, 0x3f	; 63
    2960:	f8 94       	cli
    2962:	de bf       	out	0x3e, r29	; 62
    2964:	0f be       	out	0x3f, r0	; 63
    2966:	cd bf       	out	0x3d, r28	; 61
    2968:	df 91       	pop	r29
    296a:	cf 91       	pop	r28
    296c:	1f 91       	pop	r17
    296e:	0f 91       	pop	r16
    2970:	ff 90       	pop	r15
    2972:	ef 90       	pop	r14
    2974:	df 90       	pop	r13
    2976:	cf 90       	pop	r12
                if (!event.pressed) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    2978:	0c 94 73 1a 	jmp	0x34e6	; 0x34e6 <default_layer_and>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    297c:	6c 29       	or	r22, r12
    297e:	7d 29       	or	r23, r13
    2980:	8e 29       	or	r24, r14
    2982:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    2984:	26 96       	adiw	r28, 0x06	; 6
    2986:	0f b6       	in	r0, 0x3f	; 63
    2988:	f8 94       	cli
    298a:	de bf       	out	0x3e, r29	; 62
    298c:	0f be       	out	0x3f, r0	; 63
    298e:	cd bf       	out	0x3d, r28	; 61
    2990:	df 91       	pop	r29
    2992:	cf 91       	pop	r28
    2994:	1f 91       	pop	r17
    2996:	0f 91       	pop	r16
    2998:	ff 90       	pop	r15
    299a:	ef 90       	pop	r14
    299c:	df 90       	pop	r13
    299e:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    29a0:	0c 94 85 1a 	jmp	0x350a	; 0x350a <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    29a4:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <default_layer_and>
    29a8:	c7 01       	movw	r24, r14
    29aa:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    29ac:	26 96       	adiw	r28, 0x06	; 6
    29ae:	0f b6       	in	r0, 0x3f	; 63
    29b0:	f8 94       	cli
    29b2:	de bf       	out	0x3e, r29	; 62
    29b4:	0f be       	out	0x3f, r0	; 63
    29b6:	cd bf       	out	0x3d, r28	; 61
    29b8:	df 91       	pop	r29
    29ba:	cf 91       	pop	r28
    29bc:	1f 91       	pop	r17
    29be:	0f 91       	pop	r16
    29c0:	ff 90       	pop	r15
    29c2:	ef 90       	pop	r14
    29c4:	df 90       	pop	r13
    29c6:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    29c8:	0c 94 61 1a 	jmp	0x34c2	; 0x34c2 <default_layer_or>
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    29cc:	ff 20       	and	r15, r15
    29ce:	19 f0       	breq	.+6      	; 0x29d6 <process_action+0x334>
    29d0:	80 2f       	mov	r24, r16
    29d2:	81 70       	andi	r24, 0x01	; 1
    29d4:	01 c0       	rjmp	.+2      	; 0x29d8 <process_action+0x336>
    29d6:	86 95       	lsr	r24
    29d8:	88 23       	and	r24, r24
    29da:	09 f4       	brne	.+2      	; 0x29de <process_action+0x33c>
    29dc:	5b c1       	rjmp	.+694    	; 0x2c94 <process_action+0x5f2>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
    29de:	81 2f       	mov	r24, r17
    29e0:	82 95       	swap	r24
    29e2:	86 95       	lsr	r24
    29e4:	87 70       	andi	r24, 0x07	; 7
    29e6:	88 0f       	add	r24, r24
    29e8:	88 0f       	add	r24, r24
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    29ea:	91 2f       	mov	r25, r17
    29ec:	9f 70       	andi	r25, 0x0F	; 15
    29ee:	c9 2e       	mov	r12, r25
    29f0:	d1 2c       	mov	r13, r1
    29f2:	e1 2c       	mov	r14, r1
    29f4:	f1 2c       	mov	r15, r1
    29f6:	08 2e       	mov	r0, r24
    29f8:	04 c0       	rjmp	.+8      	; 0x2a02 <process_action+0x360>
    29fa:	cc 0c       	add	r12, r12
    29fc:	dd 1c       	adc	r13, r13
    29fe:	ee 1c       	adc	r14, r14
    2a00:	ff 1c       	adc	r15, r15
    2a02:	0a 94       	dec	r0
    2a04:	d2 f7       	brpl	.-12     	; 0x29fa <process_action+0x358>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2a06:	14 ff       	sbrs	r17, 4
    2a08:	12 c0       	rjmp	.+36     	; 0x2a2e <process_action+0x38c>
    2a0a:	4f e0       	ldi	r20, 0x0F	; 15
    2a0c:	50 e0       	ldi	r21, 0x00	; 0
    2a0e:	60 e0       	ldi	r22, 0x00	; 0
    2a10:	70 e0       	ldi	r23, 0x00	; 0
    2a12:	04 c0       	rjmp	.+8      	; 0x2a1c <process_action+0x37a>
    2a14:	44 0f       	add	r20, r20
    2a16:	55 1f       	adc	r21, r21
    2a18:	66 1f       	adc	r22, r22
    2a1a:	77 1f       	adc	r23, r23
    2a1c:	8a 95       	dec	r24
    2a1e:	d2 f7       	brpl	.-12     	; 0x2a14 <process_action+0x372>
    2a20:	cb 01       	movw	r24, r22
    2a22:	ba 01       	movw	r22, r20
    2a24:	60 95       	com	r22
    2a26:	70 95       	com	r23
    2a28:	80 95       	com	r24
    2a2a:	90 95       	com	r25
    2a2c:	03 c0       	rjmp	.+6      	; 0x2a34 <process_action+0x392>
    2a2e:	60 e0       	ldi	r22, 0x00	; 0
    2a30:	70 e0       	ldi	r23, 0x00	; 0
    2a32:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    2a34:	20 2f       	mov	r18, r16
    2a36:	26 95       	lsr	r18
    2a38:	26 95       	lsr	r18
    2a3a:	23 70       	andi	r18, 0x03	; 3
    2a3c:	42 2f       	mov	r20, r18
    2a3e:	50 e0       	ldi	r21, 0x00	; 0
    2a40:	42 30       	cpi	r20, 0x02	; 2
    2a42:	51 05       	cpc	r21, r1
    2a44:	d1 f0       	breq	.+52     	; 0x2a7a <process_action+0x3d8>
    2a46:	43 30       	cpi	r20, 0x03	; 3
    2a48:	51 05       	cpc	r21, r1
    2a4a:	59 f1       	breq	.+86     	; 0x2aa2 <process_action+0x400>
    2a4c:	6c 29       	or	r22, r12
    2a4e:	7d 29       	or	r23, r13
    2a50:	8e 29       	or	r24, r14
    2a52:	9f 29       	or	r25, r15
    2a54:	41 30       	cpi	r20, 0x01	; 1
    2a56:	51 05       	cpc	r21, r1
    2a58:	41 f1       	breq	.+80     	; 0x2aaa <process_action+0x408>
            break;
#endif
        default:
            break;
    }
}
    2a5a:	26 96       	adiw	r28, 0x06	; 6
    2a5c:	0f b6       	in	r0, 0x3f	; 63
    2a5e:	f8 94       	cli
    2a60:	de bf       	out	0x3e, r29	; 62
    2a62:	0f be       	out	0x3f, r0	; 63
    2a64:	cd bf       	out	0x3d, r28	; 61
    2a66:	df 91       	pop	r29
    2a68:	cf 91       	pop	r28
    2a6a:	1f 91       	pop	r17
    2a6c:	0f 91       	pop	r16
    2a6e:	ff 90       	pop	r15
    2a70:	ef 90       	pop	r14
    2a72:	df 90       	pop	r13
    2a74:	cf 90       	pop	r12
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
    2a76:	0c 94 2a 1b 	jmp	0x3654	; 0x3654 <layer_and>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2a7a:	6c 29       	or	r22, r12
    2a7c:	7d 29       	or	r23, r13
    2a7e:	8e 29       	or	r24, r14
    2a80:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    2a82:	26 96       	adiw	r28, 0x06	; 6
    2a84:	0f b6       	in	r0, 0x3f	; 63
    2a86:	f8 94       	cli
    2a88:	de bf       	out	0x3e, r29	; 62
    2a8a:	0f be       	out	0x3f, r0	; 63
    2a8c:	cd bf       	out	0x3d, r28	; 61
    2a8e:	df 91       	pop	r29
    2a90:	cf 91       	pop	r28
    2a92:	1f 91       	pop	r17
    2a94:	0f 91       	pop	r16
    2a96:	ff 90       	pop	r15
    2a98:	ef 90       	pop	r14
    2a9a:	df 90       	pop	r13
    2a9c:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2a9e:	0c 94 3c 1b 	jmp	0x3678	; 0x3678 <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2aa2:	0e 94 2a 1b 	call	0x3654	; 0x3654 <layer_and>
    2aa6:	c7 01       	movw	r24, r14
    2aa8:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    2aaa:	26 96       	adiw	r28, 0x06	; 6
    2aac:	0f b6       	in	r0, 0x3f	; 63
    2aae:	f8 94       	cli
    2ab0:	de bf       	out	0x3e, r29	; 62
    2ab2:	0f be       	out	0x3f, r0	; 63
    2ab4:	cd bf       	out	0x3d, r28	; 61
    2ab6:	df 91       	pop	r29
    2ab8:	cf 91       	pop	r28
    2aba:	1f 91       	pop	r17
    2abc:	0f 91       	pop	r16
    2abe:	ff 90       	pop	r15
    2ac0:	ef 90       	pop	r14
    2ac2:	df 90       	pop	r13
    2ac4:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2ac6:	0c 94 18 1b 	jmp	0x3630	; 0x3630 <layer_or>
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2aca:	10 3f       	cpi	r17, 0xF0	; 240
    2acc:	41 f1       	breq	.+80     	; 0x2b1e <process_action+0x47c>
    2ace:	18 f4       	brcc	.+6      	; 0x2ad6 <process_action+0x434>
    2ad0:	10 3e       	cpi	r17, 0xE0	; 224
    2ad2:	48 f4       	brcc	.+18     	; 0x2ae6 <process_action+0x444>
    2ad4:	8b c0       	rjmp	.+278    	; 0x2bec <process_action+0x54a>
    2ad6:	12 3f       	cpi	r17, 0xF2	; 242
    2ad8:	09 f4       	brne	.+2      	; 0x2adc <process_action+0x43a>
    2ada:	50 c0       	rjmp	.+160    	; 0x2b7c <process_action+0x4da>
    2adc:	d8 f1       	brcs	.+118    	; 0x2b54 <process_action+0x4b2>
    2ade:	13 3f       	cpi	r17, 0xF3	; 243
    2ae0:	09 f4       	brne	.+2      	; 0x2ae4 <process_action+0x442>
    2ae2:	60 c0       	rjmp	.+192    	; 0x2ba4 <process_action+0x502>
    2ae4:	83 c0       	rjmp	.+262    	; 0x2bec <process_action+0x54a>
    2ae6:	1f 70       	andi	r17, 0x0F	; 15
    2ae8:	80 2f       	mov	r24, r16
    2aea:	8f 71       	andi	r24, 0x1F	; 31
                case 0xe0 ... 0xef:
                    /* layer On/Off with modifiers(left only) */
                    if (event.pressed) {
    2aec:	ff 20       	and	r15, r15
    2aee:	21 f0       	breq	.+8      	; 0x2af8 <process_action+0x456>
                        layer_on(action.layer_tap.val);
    2af0:	0e 94 b1 1a 	call	0x3562	; 0x3562 <layer_on>
                        register_mods(action.layer_tap.code & 0x0f);
    2af4:	81 2f       	mov	r24, r17
    2af6:	7b ce       	rjmp	.-778    	; 0x27ee <process_action+0x14c>
                    } else {
                        layer_off(action.layer_tap.val);
    2af8:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <layer_off>
                        unregister_mods(action.layer_tap.code & 0x0f);
    2afc:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    2afe:	26 96       	adiw	r28, 0x06	; 6
    2b00:	0f b6       	in	r0, 0x3f	; 63
    2b02:	f8 94       	cli
    2b04:	de bf       	out	0x3e, r29	; 62
    2b06:	0f be       	out	0x3f, r0	; 63
    2b08:	cd bf       	out	0x3d, r28	; 61
    2b0a:	df 91       	pop	r29
    2b0c:	cf 91       	pop	r28
    2b0e:	1f 91       	pop	r17
    2b10:	0f 91       	pop	r16
    2b12:	ff 90       	pop	r15
    2b14:	ef 90       	pop	r14
    2b16:	df 90       	pop	r13
    2b18:	cf 90       	pop	r12
                    if (event.pressed) {
                        layer_on(action.layer_tap.val);
                        register_mods(action.layer_tap.code & 0x0f);
                    } else {
                        layer_off(action.layer_tap.val);
                        unregister_mods(action.layer_tap.code & 0x0f);
    2b1a:	0c 94 4a 13 	jmp	0x2694	; 0x2694 <unregister_mods>
                    }
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
    2b1e:	ff 20       	and	r15, r15
    2b20:	a9 f0       	breq	.+42     	; 0x2b4c <process_action+0x4aa>
                        if (tap_count < TAPPING_TOGGLE) {
    2b22:	25 30       	cpi	r18, 0x05	; 5
    2b24:	08 f0       	brcs	.+2      	; 0x2b28 <process_action+0x486>
    2b26:	b6 c0       	rjmp	.+364    	; 0x2c94 <process_action+0x5f2>
                            layer_invert(action.layer_tap.val);
    2b28:	80 2f       	mov	r24, r16
    2b2a:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2b2c:	26 96       	adiw	r28, 0x06	; 6
    2b2e:	0f b6       	in	r0, 0x3f	; 63
    2b30:	f8 94       	cli
    2b32:	de bf       	out	0x3e, r29	; 62
    2b34:	0f be       	out	0x3f, r0	; 63
    2b36:	cd bf       	out	0x3d, r28	; 61
    2b38:	df 91       	pop	r29
    2b3a:	cf 91       	pop	r28
    2b3c:	1f 91       	pop	r17
    2b3e:	0f 91       	pop	r16
    2b40:	ff 90       	pop	r15
    2b42:	ef 90       	pop	r14
    2b44:	df 90       	pop	r13
    2b46:	cf 90       	pop	r12
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
                        if (tap_count < TAPPING_TOGGLE) {
                            layer_invert(action.layer_tap.val);
    2b48:	0c 94 f7 1a 	jmp	0x35ee	; 0x35ee <layer_invert>
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
    2b4c:	26 30       	cpi	r18, 0x06	; 6
    2b4e:	08 f0       	brcs	.+2      	; 0x2b52 <process_action+0x4b0>
    2b50:	a1 c0       	rjmp	.+322    	; 0x2c94 <process_action+0x5f2>
    2b52:	ea cf       	rjmp	.-44     	; 0x2b28 <process_action+0x486>
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2b54:	ff 20       	and	r15, r15
    2b56:	a1 f0       	breq	.+40     	; 0x2b80 <process_action+0x4de>
    2b58:	80 2f       	mov	r24, r16
    2b5a:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2b5c:	26 96       	adiw	r28, 0x06	; 6
    2b5e:	0f b6       	in	r0, 0x3f	; 63
    2b60:	f8 94       	cli
    2b62:	de bf       	out	0x3e, r29	; 62
    2b64:	0f be       	out	0x3f, r0	; 63
    2b66:	cd bf       	out	0x3d, r28	; 61
    2b68:	df 91       	pop	r29
    2b6a:	cf 91       	pop	r28
    2b6c:	1f 91       	pop	r17
    2b6e:	0f 91       	pop	r16
    2b70:	ff 90       	pop	r15
    2b72:	ef 90       	pop	r14
    2b74:	df 90       	pop	r13
    2b76:	cf 90       	pop	r12
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2b78:	0c 94 b1 1a 	jmp	0x3562	; 0x3562 <layer_on>
                                    layer_off(action.layer_tap.val);
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
    2b7c:	ff 20       	and	r15, r15
    2b7e:	61 f3       	breq	.-40     	; 0x2b58 <process_action+0x4b6>
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2b80:	80 2f       	mov	r24, r16
    2b82:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2b84:	26 96       	adiw	r28, 0x06	; 6
    2b86:	0f b6       	in	r0, 0x3f	; 63
    2b88:	f8 94       	cli
    2b8a:	de bf       	out	0x3e, r29	; 62
    2b8c:	0f be       	out	0x3f, r0	; 63
    2b8e:	cd bf       	out	0x3d, r28	; 61
    2b90:	df 91       	pop	r29
    2b92:	cf 91       	pop	r28
    2b94:	1f 91       	pop	r17
    2b96:	0f 91       	pop	r16
    2b98:	ff 90       	pop	r15
    2b9a:	ef 90       	pop	r14
    2b9c:	df 90       	pop	r13
    2b9e:	cf 90       	pop	r12
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2ba0:	0c 94 d2 1a 	jmp	0x35a4	; 0x35a4 <layer_off>
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2ba4:	ff 20       	and	r15, r15
    2ba6:	91 f0       	breq	.+36     	; 0x2bcc <process_action+0x52a>
    2ba8:	80 2f       	mov	r24, r16
    2baa:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2bac:	26 96       	adiw	r28, 0x06	; 6
    2bae:	0f b6       	in	r0, 0x3f	; 63
    2bb0:	f8 94       	cli
    2bb2:	de bf       	out	0x3e, r29	; 62
    2bb4:	0f be       	out	0x3f, r0	; 63
    2bb6:	cd bf       	out	0x3d, r28	; 61
    2bb8:	df 91       	pop	r29
    2bba:	cf 91       	pop	r28
    2bbc:	1f 91       	pop	r17
    2bbe:	0f 91       	pop	r16
    2bc0:	ff 90       	pop	r15
    2bc2:	ef 90       	pop	r14
    2bc4:	df 90       	pop	r13
    2bc6:	cf 90       	pop	r12
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2bc8:	0c 94 9c 1a 	jmp	0x3538	; 0x3538 <layer_move>
            break;
#endif
        default:
            break;
    }
}
    2bcc:	26 96       	adiw	r28, 0x06	; 6
    2bce:	0f b6       	in	r0, 0x3f	; 63
    2bd0:	f8 94       	cli
    2bd2:	de bf       	out	0x3e, r29	; 62
    2bd4:	0f be       	out	0x3f, r0	; 63
    2bd6:	cd bf       	out	0x3d, r28	; 61
    2bd8:	df 91       	pop	r29
    2bda:	cf 91       	pop	r28
    2bdc:	1f 91       	pop	r17
    2bde:	0f 91       	pop	r16
    2be0:	ff 90       	pop	r15
    2be2:	ef 90       	pop	r14
    2be4:	df 90       	pop	r13
    2be6:	cf 90       	pop	r12
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
                                    layer_clear();
    2be8:	0c 94 97 1a 	jmp	0x352e	; 0x352e <layer_clear>
                    break;
                default:
                    /* tap key */
                    if (event.pressed) {
    2bec:	ff 20       	and	r15, r15
    2bee:	a1 f0       	breq	.+40     	; 0x2c18 <process_action+0x576>
                        if (tap_count > 0) {
    2bf0:	22 23       	and	r18, r18
    2bf2:	09 f4       	brne	.+2      	; 0x2bf6 <process_action+0x554>
    2bf4:	b1 cf       	rjmp	.-158    	; 0x2b58 <process_action+0x4b6>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2bf6:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    2bf8:	26 96       	adiw	r28, 0x06	; 6
    2bfa:	0f b6       	in	r0, 0x3f	; 63
    2bfc:	f8 94       	cli
    2bfe:	de bf       	out	0x3e, r29	; 62
    2c00:	0f be       	out	0x3f, r0	; 63
    2c02:	cd bf       	out	0x3d, r28	; 61
    2c04:	df 91       	pop	r29
    2c06:	cf 91       	pop	r28
    2c08:	1f 91       	pop	r17
    2c0a:	0f 91       	pop	r16
    2c0c:	ff 90       	pop	r15
    2c0e:	ef 90       	pop	r14
    2c10:	df 90       	pop	r13
    2c12:	cf 90       	pop	r12
                default:
                    /* tap key */
                    if (event.pressed) {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2c14:	0c 94 eb 11 	jmp	0x23d6	; 0x23d6 <register_code>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
    2c18:	22 23       	and	r18, r18
    2c1a:	09 f4       	brne	.+2      	; 0x2c1e <process_action+0x57c>
    2c1c:	b1 cf       	rjmp	.-158    	; 0x2b80 <process_action+0x4de>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2c1e:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    2c20:	26 96       	adiw	r28, 0x06	; 6
    2c22:	0f b6       	in	r0, 0x3f	; 63
    2c24:	f8 94       	cli
    2c26:	de bf       	out	0x3e, r29	; 62
    2c28:	0f be       	out	0x3f, r0	; 63
    2c2a:	cd bf       	out	0x3d, r28	; 61
    2c2c:	df 91       	pop	r29
    2c2e:	cf 91       	pop	r28
    2c30:	1f 91       	pop	r17
    2c32:	0f 91       	pop	r16
    2c34:	ff 90       	pop	r15
    2c36:	ef 90       	pop	r14
    2c38:	df 90       	pop	r13
    2c3a:	cf 90       	pop	r12
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2c3c:	0c 94 d9 12 	jmp	0x25b2	; 0x25b2 <unregister_code>
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2c40:	40 2f       	mov	r20, r16
    2c42:	4f 70       	andi	r20, 0x0F	; 15
    2c44:	61 2f       	mov	r22, r17
    2c46:	c6 01       	movw	r24, r12
    2c48:	0e 94 74 07 	call	0xee8	; 0xee8 <action_get_macro>
            break;
#endif
        default:
            break;
    }
}
    2c4c:	26 96       	adiw	r28, 0x06	; 6
    2c4e:	0f b6       	in	r0, 0x3f	; 63
    2c50:	f8 94       	cli
    2c52:	de bf       	out	0x3e, r29	; 62
    2c54:	0f be       	out	0x3f, r0	; 63
    2c56:	cd bf       	out	0x3d, r28	; 61
    2c58:	df 91       	pop	r29
    2c5a:	cf 91       	pop	r28
    2c5c:	1f 91       	pop	r17
    2c5e:	0f 91       	pop	r16
    2c60:	ff 90       	pop	r15
    2c62:	ef 90       	pop	r14
    2c64:	df 90       	pop	r13
    2c66:	cf 90       	pop	r12
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2c68:	0c 94 a9 19 	jmp	0x3352	; 0x3352 <action_macro_play>
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2c6c:	40 2f       	mov	r20, r16
    2c6e:	4f 70       	andi	r20, 0x0F	; 15
    2c70:	61 2f       	mov	r22, r17
    2c72:	c6 01       	movw	r24, r12
            break;
#endif
        default:
            break;
    }
}
    2c74:	26 96       	adiw	r28, 0x06	; 6
    2c76:	0f b6       	in	r0, 0x3f	; 63
    2c78:	f8 94       	cli
    2c7a:	de bf       	out	0x3e, r29	; 62
    2c7c:	0f be       	out	0x3f, r0	; 63
    2c7e:	cd bf       	out	0x3d, r28	; 61
    2c80:	df 91       	pop	r29
    2c82:	cf 91       	pop	r28
    2c84:	1f 91       	pop	r17
    2c86:	0f 91       	pop	r16
    2c88:	ff 90       	pop	r15
    2c8a:	ef 90       	pop	r14
    2c8c:	df 90       	pop	r13
    2c8e:	cf 90       	pop	r12
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2c90:	0c 94 75 1e 	jmp	0x3cea	; 0x3cea <action_function>
            break;
#endif
        default:
            break;
    }
}
    2c94:	26 96       	adiw	r28, 0x06	; 6
    2c96:	0f b6       	in	r0, 0x3f	; 63
    2c98:	f8 94       	cli
    2c9a:	de bf       	out	0x3e, r29	; 62
    2c9c:	0f be       	out	0x3f, r0	; 63
    2c9e:	cd bf       	out	0x3d, r28	; 61
    2ca0:	df 91       	pop	r29
    2ca2:	cf 91       	pop	r28
    2ca4:	1f 91       	pop	r17
    2ca6:	0f 91       	pop	r16
    2ca8:	ff 90       	pop	r15
    2caa:	ef 90       	pop	r14
    2cac:	df 90       	pop	r13
    2cae:	cf 90       	pop	r12
    2cb0:	08 95       	ret

00002cb2 <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    2cb2:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <clear_weak_mods>
    clear_keys();
    2cb6:	0e 94 2a 1c 	call	0x3854	; 0x3854 <clear_keys>
    send_keyboard_report();
    2cba:	0e 94 75 1c 	call	0x38ea	; 0x38ea <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    2cbe:	0e 94 82 23 	call	0x4704	; 0x4704 <mousekey_clear>
    mousekey_send();
    2cc2:	0e 94 50 22 	call	0x44a0	; 0x44a0 <mousekey_send>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    2cc6:	80 e0       	ldi	r24, 0x00	; 0
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	0e 94 b7 10 	call	0x216e	; 0x216e <host_system_send>
    host_consumer_send(0);
    2cce:	80 e0       	ldi	r24, 0x00	; 0
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	0c 94 cd 10 	jmp	0x219a	; 0x219a <host_consumer_send>

00002cd6 <clear_keyboard>:
    }
}

void clear_keyboard(void)
{
    clear_mods();
    2cd6:	0e 94 4b 1c 	call	0x3896	; 0x3896 <clear_mods>
    clear_keyboard_but_mods();
    2cda:	0c 94 59 16 	jmp	0x2cb2	; 0x2cb2 <clear_keyboard_but_mods>

00002cde <is_tap_key>:
#endif
}

bool is_tap_key(keypos_t key)
{
    action_t action = layer_switch_get_action(key);
    2cde:	0e 94 4f 1b 	call	0x369e	; 0x369e <layer_switch_get_action>

    switch (action.kind.id) {
    2ce2:	29 2f       	mov	r18, r25
    2ce4:	22 95       	swap	r18
    2ce6:	2f 70       	andi	r18, 0x0F	; 15
    2ce8:	30 e0       	ldi	r19, 0x00	; 0
    2cea:	2c 30       	cpi	r18, 0x0C	; 12
    2cec:	31 05       	cpc	r19, r1
    2cee:	4c f4       	brge	.+18     	; 0x2d02 <is_tap_key+0x24>
    2cf0:	2a 30       	cpi	r18, 0x0A	; 10
    2cf2:	31 05       	cpc	r19, r1
    2cf4:	6c f4       	brge	.+26     	; 0x2d10 <is_tap_key+0x32>
    2cf6:	22 50       	subi	r18, 0x02	; 2
    2cf8:	31 09       	sbc	r19, r1
    2cfa:	22 30       	cpi	r18, 0x02	; 2
    2cfc:	31 05       	cpc	r19, r1
    2cfe:	88 f4       	brcc	.+34     	; 0x2d22 <is_tap_key+0x44>
    2d00:	07 c0       	rjmp	.+14     	; 0x2d10 <is_tap_key+0x32>
    2d02:	2c 30       	cpi	r18, 0x0C	; 12
    2d04:	31 05       	cpc	r19, r1
    2d06:	49 f0       	breq	.+18     	; 0x2d1a <is_tap_key+0x3c>
    2d08:	2f 30       	cpi	r18, 0x0F	; 15
    2d0a:	31 05       	cpc	r19, r1
    2d0c:	31 f0       	breq	.+12     	; 0x2d1a <is_tap_key+0x3c>
    2d0e:	09 c0       	rjmp	.+18     	; 0x2d22 <is_tap_key+0x44>
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2d10:	80 3e       	cpi	r24, 0xE0	; 224
    2d12:	48 f0       	brcs	.+18     	; 0x2d26 <is_tap_key+0x48>
    2d14:	80 3f       	cpi	r24, 0xF0	; 240
    2d16:	29 f4       	brne	.+10     	; 0x2d22 <is_tap_key+0x44>
    2d18:	06 c0       	rjmp	.+12     	; 0x2d26 <is_tap_key+0x48>
                    return true;
            }
            return false;
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    2d1a:	93 fb       	bst	r25, 3
    2d1c:	88 27       	eor	r24, r24
    2d1e:	80 f9       	bld	r24, 0
    2d20:	08 95       	ret
            return false;
    }
    return false;
    2d22:	80 e0       	ldi	r24, 0x00	; 0
    2d24:	08 95       	ret
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
                case 0x00 ... 0xdf:
                case OP_TAP_TOGGLE:
                    return true;
    2d26:	81 e0       	ldi	r24, 0x01	; 1
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
}
    2d28:	08 95       	ret

00002d2a <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    2d2a:	cf 93       	push	r28
    2d2c:	df 93       	push	r29
    2d2e:	00 d0       	rcall	.+0      	; 0x2d30 <debug_event+0x6>
    2d30:	00 d0       	rcall	.+0      	; 0x2d32 <debug_event+0x8>
    2d32:	1f 92       	push	r1
    2d34:	cd b7       	in	r28, 0x3d	; 61
    2d36:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    2d38:	0f 90       	pop	r0
    2d3a:	0f 90       	pop	r0
    2d3c:	0f 90       	pop	r0
    2d3e:	0f 90       	pop	r0
    2d40:	0f 90       	pop	r0
    2d42:	df 91       	pop	r29
    2d44:	cf 91       	pop	r28
    2d46:	08 95       	ret

00002d48 <debug_record>:

void debug_record(keyrecord_t record)
{
    2d48:	cf 93       	push	r28
    2d4a:	df 93       	push	r29
    2d4c:	00 d0       	rcall	.+0      	; 0x2d4e <debug_record+0x6>
    2d4e:	00 d0       	rcall	.+0      	; 0x2d50 <debug_record+0x8>
    2d50:	00 d0       	rcall	.+0      	; 0x2d52 <debug_record+0xa>
    2d52:	cd b7       	in	r28, 0x3d	; 61
    2d54:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    2d56:	26 96       	adiw	r28, 0x06	; 6
    2d58:	0f b6       	in	r0, 0x3f	; 63
    2d5a:	f8 94       	cli
    2d5c:	de bf       	out	0x3e, r29	; 62
    2d5e:	0f be       	out	0x3f, r0	; 63
    2d60:	cd bf       	out	0x3d, r28	; 61
    2d62:	df 91       	pop	r29
    2d64:	cf 91       	pop	r28
    2d66:	08 95       	ret

00002d68 <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    2d68:	1f 93       	push	r17
    2d6a:	cf 93       	push	r28
    2d6c:	df 93       	push	r29
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2d6e:	c0 91 75 01 	lds	r28, 0x0175
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2d72:	16 e0       	ldi	r17, 0x06	; 6
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2d74:	80 91 76 01 	lds	r24, 0x0176
    2d78:	c8 17       	cp	r28, r24
    2d7a:	99 f0       	breq	.+38     	; 0x2da2 <debug_waiting_buffer+0x3a>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2d7c:	d0 e0       	ldi	r29, 0x00	; 0
    2d7e:	1c 9f       	mul	r17, r28
    2d80:	f0 01       	movw	r30, r0
    2d82:	1d 9f       	mul	r17, r29
    2d84:	f0 0d       	add	r31, r0
    2d86:	11 24       	eor	r1, r1
    2d88:	e9 58       	subi	r30, 0x89	; 137
    2d8a:	fe 4f       	sbci	r31, 0xFE	; 254
    2d8c:	40 81       	ld	r20, Z
    2d8e:	51 81       	ldd	r21, Z+1	; 0x01
    2d90:	62 81       	ldd	r22, Z+2	; 0x02
    2d92:	73 81       	ldd	r23, Z+3	; 0x03
    2d94:	84 81       	ldd	r24, Z+4	; 0x04
    2d96:	95 81       	ldd	r25, Z+5	; 0x05
    2d98:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <debug_record>
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2d9c:	21 96       	adiw	r28, 0x01	; 1
    2d9e:	c7 70       	andi	r28, 0x07	; 7
    2da0:	e9 cf       	rjmp	.-46     	; 0x2d74 <debug_waiting_buffer+0xc>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    2da2:	df 91       	pop	r29
    2da4:	cf 91       	pop	r28
    2da6:	1f 91       	pop	r17
    2da8:	08 95       	ret

00002daa <debug_tapping_key>:
/*
 * debug print
 */
static void debug_tapping_key(void)
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    2daa:	40 91 a7 01 	lds	r20, 0x01A7
    2dae:	50 91 a8 01 	lds	r21, 0x01A8
    2db2:	60 91 a9 01 	lds	r22, 0x01A9
    2db6:	70 91 aa 01 	lds	r23, 0x01AA
    2dba:	80 91 ab 01 	lds	r24, 0x01AB
    2dbe:	90 91 ac 01 	lds	r25, 0x01AC
    2dc2:	0c 94 a4 16 	jmp	0x2d48	; 0x2d48 <debug_record>

00002dc6 <waiting_buffer_scan_tap>:

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    2dc6:	80 91 ac 01 	lds	r24, 0x01AC
    2dca:	82 95       	swap	r24
    2dcc:	8f 70       	andi	r24, 0x0F	; 15
    2dce:	09 f0       	breq	.+2      	; 0x2dd2 <waiting_buffer_scan_tap+0xc>
    2dd0:	54 c0       	rjmp	.+168    	; 0x2e7a <waiting_buffer_scan_tap+0xb4>
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
    2dd2:	80 91 a9 01 	lds	r24, 0x01A9
    2dd6:	88 23       	and	r24, r24
    2dd8:	09 f4       	brne	.+2      	; 0x2ddc <waiting_buffer_scan_tap+0x16>
    2dda:	4f c0       	rjmp	.+158    	; 0x2e7a <waiting_buffer_scan_tap+0xb4>

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2ddc:	80 91 75 01 	lds	r24, 0x0175
    2de0:	a0 91 76 01 	lds	r26, 0x0176
    2de4:	60 91 a7 01 	lds	r22, 0x01A7
    2de8:	70 91 a8 01 	lds	r23, 0x01A8
    2dec:	40 91 aa 01 	lds	r20, 0x01AA
    2df0:	50 91 ab 01 	lds	r21, 0x01AB
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2df4:	b6 e0       	ldi	r27, 0x06	; 6
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2df6:	8a 17       	cp	r24, r26
    2df8:	09 f4       	brne	.+2      	; 0x2dfc <waiting_buffer_scan_tap+0x36>
    2dfa:	3f c0       	rjmp	.+126    	; 0x2e7a <waiting_buffer_scan_tap+0xb4>
    2dfc:	90 e0       	ldi	r25, 0x00	; 0
    2dfe:	41 15       	cp	r20, r1
    2e00:	51 05       	cpc	r21, r1
    2e02:	c1 f1       	breq	.+112    	; 0x2e74 <waiting_buffer_scan_tap+0xae>
    2e04:	7f 3f       	cpi	r23, 0xFF	; 255
    2e06:	11 f4       	brne	.+4      	; 0x2e0c <waiting_buffer_scan_tap+0x46>
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2e08:	6f 3f       	cpi	r22, 0xFF	; 255
    2e0a:	a1 f1       	breq	.+104    	; 0x2e74 <waiting_buffer_scan_tap+0xae>
    2e0c:	b8 9f       	mul	r27, r24
    2e0e:	f0 01       	movw	r30, r0
    2e10:	b9 9f       	mul	r27, r25
    2e12:	f0 0d       	add	r31, r0
    2e14:	11 24       	eor	r1, r1
    2e16:	e9 58       	subi	r30, 0x89	; 137
    2e18:	fe 4f       	sbci	r31, 0xFE	; 254
    2e1a:	21 81       	ldd	r18, Z+1	; 0x01
    2e1c:	72 13       	cpse	r23, r18
    2e1e:	2a c0       	rjmp	.+84     	; 0x2e74 <waiting_buffer_scan_tap+0xae>
    2e20:	20 81       	ld	r18, Z
    2e22:	62 13       	cpse	r22, r18
    2e24:	27 c0       	rjmp	.+78     	; 0x2e74 <waiting_buffer_scan_tap+0xae>
    2e26:	22 81       	ldd	r18, Z+2	; 0x02
    2e28:	21 11       	cpse	r18, r1
    2e2a:	24 c0       	rjmp	.+72     	; 0x2e74 <waiting_buffer_scan_tap+0xae>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    2e2c:	23 81       	ldd	r18, Z+3	; 0x03
    2e2e:	34 81       	ldd	r19, Z+4	; 0x04
    2e30:	24 17       	cp	r18, r20
    2e32:	35 07       	cpc	r19, r21
    2e34:	10 f4       	brcc	.+4      	; 0x2e3a <waiting_buffer_scan_tap+0x74>
    2e36:	21 50       	subi	r18, 0x01	; 1
    2e38:	31 09       	sbc	r19, r1
    2e3a:	24 1b       	sub	r18, r20
    2e3c:	35 0b       	sbc	r19, r21
    2e3e:	28 3c       	cpi	r18, 0xC8	; 200
    2e40:	31 05       	cpc	r19, r1
    2e42:	c0 f4       	brcc	.+48     	; 0x2e74 <waiting_buffer_scan_tap+0xae>
            tapping_key.tap.count = 1;
    2e44:	20 91 ac 01 	lds	r18, 0x01AC
    2e48:	2f 70       	andi	r18, 0x0F	; 15
    2e4a:	20 61       	ori	r18, 0x10	; 16
    2e4c:	20 93 ac 01 	sts	0x01AC, r18
            waiting_buffer[i].tap.count = 1;
    2e50:	26 e0       	ldi	r18, 0x06	; 6
    2e52:	28 9f       	mul	r18, r24
    2e54:	f0 01       	movw	r30, r0
    2e56:	29 9f       	mul	r18, r25
    2e58:	f0 0d       	add	r31, r0
    2e5a:	11 24       	eor	r1, r1
    2e5c:	e4 58       	subi	r30, 0x84	; 132
    2e5e:	fe 4f       	sbci	r31, 0xFE	; 254
    2e60:	80 81       	ld	r24, Z
    2e62:	8f 70       	andi	r24, 0x0F	; 15
    2e64:	80 61       	ori	r24, 0x10	; 16
    2e66:	80 83       	st	Z, r24
            process_action(&tapping_key);
    2e68:	87 ea       	ldi	r24, 0xA7	; 167
    2e6a:	91 e0       	ldi	r25, 0x01	; 1
    2e6c:	0e 94 51 13 	call	0x26a2	; 0x26a2 <process_action>

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
    2e70:	0c 94 b4 16 	jmp	0x2d68	; 0x2d68 <debug_waiting_buffer>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2e74:	01 96       	adiw	r24, 0x01	; 1
    2e76:	87 70       	andi	r24, 0x07	; 7
    2e78:	be cf       	rjmp	.-132    	; 0x2df6 <waiting_buffer_scan_tap+0x30>
    2e7a:	08 95       	ret

00002e7c <process_tapping>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    2e7c:	cf 92       	push	r12
    2e7e:	df 92       	push	r13
    2e80:	ef 92       	push	r14
    2e82:	ff 92       	push	r15
    2e84:	0f 93       	push	r16
    2e86:	1f 93       	push	r17
    2e88:	cf 93       	push	r28
    2e8a:	df 93       	push	r29
    2e8c:	cd b7       	in	r28, 0x3d	; 61
    2e8e:	de b7       	in	r29, 0x3e	; 62
    2e90:	62 97       	sbiw	r28, 0x12	; 18
    2e92:	0f b6       	in	r0, 0x3f	; 63
    2e94:	f8 94       	cli
    2e96:	de bf       	out	0x3e, r29	; 62
    2e98:	0f be       	out	0x3f, r0	; 63
    2e9a:	cd bf       	out	0x3d, r28	; 61
    2e9c:	8c 01       	movw	r16, r24
    keyevent_t event = keyp->event;
    2e9e:	85 e0       	ldi	r24, 0x05	; 5
    2ea0:	f8 01       	movw	r30, r16
    2ea2:	de 01       	movw	r26, r28
    2ea4:	1d 96       	adiw	r26, 0x0d	; 13
    2ea6:	01 90       	ld	r0, Z+
    2ea8:	0d 92       	st	X+, r0
    2eaa:	8a 95       	dec	r24
    2eac:	e1 f7       	brne	.-8      	; 0x2ea6 <process_tapping+0x2a>
    2eae:	d8 01       	movw	r26, r16
    2eb0:	4c 91       	ld	r20, X
    2eb2:	11 96       	adiw	r26, 0x01	; 1
    2eb4:	5c 91       	ld	r21, X
    2eb6:	11 97       	sbiw	r26, 0x01	; 1
    2eb8:	12 96       	adiw	r26, 0x02	; 2
    2eba:	6c 91       	ld	r22, X
    2ebc:	12 97       	sbiw	r26, 0x02	; 2
    2ebe:	13 96       	adiw	r26, 0x03	; 3
    2ec0:	cd 90       	ld	r12, X+
    2ec2:	dc 90       	ld	r13, X
    2ec4:	14 97       	sbiw	r26, 0x04	; 4
    2ec6:	30 91 a7 01 	lds	r19, 0x01A7
    2eca:	70 91 a8 01 	lds	r23, 0x01A8
    2ece:	80 91 aa 01 	lds	r24, 0x01AA
    2ed2:	90 91 ab 01 	lds	r25, 0x01AB
    2ed6:	00 97       	sbiw	r24, 0x00	; 0
    2ed8:	09 f4       	brne	.+2      	; 0x2edc <process_tapping+0x60>
    2eda:	6b c1       	rjmp	.+726    	; 0x31b2 <process_tapping+0x336>
    2edc:	7f 3f       	cpi	r23, 0xFF	; 255
    2ede:	19 f4       	brne	.+6      	; 0x2ee6 <process_tapping+0x6a>

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    2ee0:	3f 3f       	cpi	r19, 0xFF	; 255
    2ee2:	09 f4       	brne	.+2      	; 0x2ee6 <process_tapping+0x6a>
    2ee4:	66 c1       	rjmp	.+716    	; 0x31b2 <process_tapping+0x336>
    2ee6:	e0 90 a9 01 	lds	r14, 0x01A9
    2eea:	ee 20       	and	r14, r14
    2eec:	09 f4       	brne	.+2      	; 0x2ef0 <process_tapping+0x74>
    2eee:	c0 c0       	rjmp	.+384    	; 0x3070 <process_tapping+0x1f4>
    2ef0:	20 91 ac 01 	lds	r18, 0x01AC
        if (WITHIN_TAPPING_TERM(event)) {
    2ef4:	c8 16       	cp	r12, r24
    2ef6:	d9 06       	cpc	r13, r25
    2ef8:	28 f0       	brcs	.+10     	; 0x2f04 <process_tapping+0x88>
    2efa:	f6 01       	movw	r30, r12
    2efc:	e8 1b       	sub	r30, r24
    2efe:	f9 0b       	sbc	r31, r25
    2f00:	cf 01       	movw	r24, r30
    2f02:	04 c0       	rjmp	.+8      	; 0x2f0c <process_tapping+0x90>
    2f04:	80 95       	com	r24
    2f06:	90 95       	com	r25
    2f08:	8c 0d       	add	r24, r12
    2f0a:	9d 1d       	adc	r25, r13
    2f0c:	ff 24       	eor	r15, r15
    2f0e:	f3 94       	inc	r15
    2f10:	88 3c       	cpi	r24, 0xC8	; 200
    2f12:	91 05       	cpc	r25, r1
    2f14:	78 f0       	brcs	.+30     	; 0x2f34 <process_tapping+0xb8>
    2f16:	f1 2c       	mov	r15, r1
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
    2f18:	20 7f       	andi	r18, 0xF0	; 240
    2f1a:	09 f0       	breq	.+2      	; 0x2f1e <process_tapping+0xa2>
    2f1c:	c6 c0       	rjmp	.+396    	; 0x30aa <process_tapping+0x22e>
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
    2f1e:	7c 2d       	mov	r23, r12
    2f20:	d9 8a       	std	Y+17, r13	; 0x11
    2f22:	c8 8a       	std	Y+16, r12	; 0x10
    2f24:	89 89       	ldd	r24, Y+17	; 0x11
    2f26:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <debug_event>
                process_action(&tapping_key);
    2f2a:	87 ea       	ldi	r24, 0xA7	; 167
    2f2c:	91 e0       	ldi	r25, 0x01	; 1
    2f2e:	0e 94 51 13 	call	0x26a2	; 0x26a2 <process_action>
    2f32:	b1 c0       	rjmp	.+354    	; 0x3096 <process_tapping+0x21a>
    keyevent_t event = keyp->event;

    // if tapping
    if (IS_TAPPING_PRESSED()) {
        if (WITHIN_TAPPING_TERM(event)) {
            if (tapping_key.tap.count == 0) {
    2f34:	82 2f       	mov	r24, r18
    2f36:	80 7f       	andi	r24, 0xF0	; 240
    2f38:	09 f0       	breq	.+2      	; 0x2f3c <process_tapping+0xc0>
    2f3a:	46 c0       	rjmp	.+140    	; 0x2fc8 <process_tapping+0x14c>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2f3c:	75 13       	cpse	r23, r21
    2f3e:	14 c0       	rjmp	.+40     	; 0x2f68 <process_tapping+0xec>
    2f40:	34 13       	cpse	r19, r20
    2f42:	12 c0       	rjmp	.+36     	; 0x2f68 <process_tapping+0xec>
    2f44:	61 11       	cpse	r22, r1
    2f46:	10 c0       	rjmp	.+32     	; 0x2f68 <process_tapping+0xec>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
    2f48:	2f 70       	andi	r18, 0x0F	; 15
    2f4a:	20 61       	ori	r18, 0x10	; 16
    2f4c:	20 93 ac 01 	sts	0x01AC, r18
                    debug_tapping_key();
    2f50:	0e 94 d5 16 	call	0x2daa	; 0x2daa <debug_tapping_key>
                    process_action(&tapping_key);
    2f54:	87 ea       	ldi	r24, 0xA7	; 167
    2f56:	91 e0       	ldi	r25, 0x01	; 1
    2f58:	0e 94 51 13 	call	0x26a2	; 0x26a2 <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
    2f5c:	80 91 ac 01 	lds	r24, 0x01AC
    2f60:	d8 01       	movw	r26, r16
    2f62:	15 96       	adiw	r26, 0x05	; 5
    2f64:	8c 93       	st	X, r24
    2f66:	2e c0       	rjmp	.+92     	; 0x2fc4 <process_tapping+0x148>
    2f68:	cd 28       	or	r12, r13
    2f6a:	19 f1       	breq	.+70     	; 0x2fb2 <process_tapping+0x136>
    2f6c:	5f 3f       	cpi	r21, 0xFF	; 255
    2f6e:	11 f4       	brne	.+4      	; 0x2f74 <process_tapping+0xf8>
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    2f70:	4f 3f       	cpi	r20, 0xFF	; 255
    2f72:	f9 f0       	breq	.+62     	; 0x2fb2 <process_tapping+0x136>
    2f74:	f6 2e       	mov	r15, r22
    2f76:	61 11       	cpse	r22, r1
    2f78:	1c c0       	rjmp	.+56     	; 0x2fb2 <process_tapping+0x136>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2f7a:	80 91 75 01 	lds	r24, 0x0175
    2f7e:	20 91 76 01 	lds	r18, 0x0176
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    2f82:	36 e0       	ldi	r19, 0x06	; 6
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2f84:	82 17       	cp	r24, r18
    2f86:	09 f4       	brne	.+2      	; 0x2f8a <process_tapping+0x10e>
    2f88:	5a c0       	rjmp	.+180    	; 0x303e <process_tapping+0x1c2>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    2f8a:	90 e0       	ldi	r25, 0x00	; 0
    2f8c:	38 9f       	mul	r19, r24
    2f8e:	f0 01       	movw	r30, r0
    2f90:	39 9f       	mul	r19, r25
    2f92:	f0 0d       	add	r31, r0
    2f94:	11 24       	eor	r1, r1
    2f96:	e9 58       	subi	r30, 0x89	; 137
    2f98:	fe 4f       	sbci	r31, 0xFE	; 254
    2f9a:	71 81       	ldd	r23, Z+1	; 0x01
    2f9c:	57 13       	cpse	r21, r23
    2f9e:	06 c0       	rjmp	.+12     	; 0x2fac <process_tapping+0x130>
    2fa0:	70 81       	ld	r23, Z
    2fa2:	47 13       	cpse	r20, r23
    2fa4:	03 c0       	rjmp	.+6      	; 0x2fac <process_tapping+0x130>
    2fa6:	72 81       	ldd	r23, Z+2	; 0x02
    2fa8:	71 11       	cpse	r23, r1
    2faa:	03 c0       	rjmp	.+6      	; 0x2fb2 <process_tapping+0x136>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2fac:	01 96       	adiw	r24, 0x01	; 1
    2fae:	87 70       	andi	r24, 0x07	; 7
    2fb0:	e9 cf       	rjmp	.-46     	; 0x2f84 <process_tapping+0x108>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
    2fb2:	f6 2e       	mov	r15, r22
    2fb4:	66 23       	and	r22, r22
    2fb6:	09 f4       	brne	.+2      	; 0x2fba <process_tapping+0x13e>
    2fb8:	18 c1       	rjmp	.+560    	; 0x31ea <process_tapping+0x36e>
                        tapping_key.tap.interrupted = true;
    2fba:	80 91 ac 01 	lds	r24, 0x01AC
    2fbe:	81 60       	ori	r24, 0x01	; 1
    2fc0:	80 93 ac 01 	sts	0x01AC, r24
                    }
                    // enqueue 
                    return false;
    2fc4:	f1 2c       	mov	r15, r1
    2fc6:	11 c1       	rjmp	.+546    	; 0x31ea <process_tapping+0x36e>
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2fc8:	75 13       	cpse	r23, r21
    2fca:	08 c0       	rjmp	.+16     	; 0x2fdc <process_tapping+0x160>
    2fcc:	34 13       	cpse	r19, r20
    2fce:	06 c0       	rjmp	.+12     	; 0x2fdc <process_tapping+0x160>
    2fd0:	61 11       	cpse	r22, r1
    2fd2:	04 c0       	rjmp	.+8      	; 0x2fdc <process_tapping+0x160>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
    2fd4:	80 91 ac 01 	lds	r24, 0x01AC
    2fd8:	d8 01       	movw	r26, r16
    2fda:	c3 c0       	rjmp	.+390    	; 0x3162 <process_tapping+0x2e6>
                    process_action(keyp);
                    tapping_key = *keyp;
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    2fdc:	4d 87       	std	Y+13, r20	; 0x0d
    2fde:	5e 87       	std	Y+14, r21	; 0x0e
    2fe0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fe2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fe4:	6a 8b       	std	Y+18, r22	; 0x12
    2fe6:	0e 94 6f 16 	call	0x2cde	; 0x2cde <is_tap_key>
    2fea:	6a 89       	ldd	r22, Y+18	; 0x12
    2fec:	88 23       	and	r24, r24
    2fee:	e1 f1       	breq	.+120    	; 0x3068 <process_tapping+0x1ec>
    2ff0:	66 23       	and	r22, r22
    2ff2:	d1 f1       	breq	.+116    	; 0x3068 <process_tapping+0x1ec>
                    if (tapping_key.tap.count > 1) {
    2ff4:	20 91 ac 01 	lds	r18, 0x01AC
    2ff8:	82 2f       	mov	r24, r18
    2ffa:	82 95       	swap	r24
    2ffc:	8f 70       	andi	r24, 0x0F	; 15
    2ffe:	90 e0       	ldi	r25, 0x00	; 0
    3000:	02 97       	sbiw	r24, 0x02	; 2
    3002:	74 f0       	brlt	.+28     	; 0x3020 <process_tapping+0x1a4>
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    3004:	80 91 a7 01 	lds	r24, 0x01A7
    3008:	90 91 a8 01 	lds	r25, 0x01A8
    300c:	98 87       	std	Y+8, r25	; 0x08
    300e:	8f 83       	std	Y+7, r24	; 0x07
    3010:	19 86       	std	Y+9, r1	; 0x09
    3012:	db 86       	std	Y+11, r13	; 0x0b
    3014:	ca 86       	std	Y+10, r12	; 0x0a
    3016:	2c 87       	std	Y+12, r18	; 0x0c
    3018:	ce 01       	movw	r24, r28
    301a:	07 96       	adiw	r24, 0x07	; 7
    301c:	0e 94 51 13 	call	0x26a2	; 0x26a2 <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last tap(1).\n");
                    }
                    tapping_key = *keyp;
    3020:	86 e0       	ldi	r24, 0x06	; 6
    3022:	f8 01       	movw	r30, r16
    3024:	a7 ea       	ldi	r26, 0xA7	; 167
    3026:	b1 e0       	ldi	r27, 0x01	; 1
    3028:	01 90       	ld	r0, Z+
    302a:	0d 92       	st	X+, r0
    302c:	8a 95       	dec	r24
    302e:	e1 f7       	brne	.-8      	; 0x3028 <process_tapping+0x1ac>
                    waiting_buffer_scan_tap();
    3030:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <waiting_buffer_scan_tap>
                    debug_tapping_key();
    3034:	0e 94 d5 16 	call	0x2daa	; 0x2daa <debug_tapping_key>
                    return true;
    3038:	ff 24       	eor	r15, r15
    303a:	f3 94       	inc	r15
    303c:	d6 c0       	rjmp	.+428    	; 0x31ea <process_tapping+0x36e>
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
    303e:	4d 87       	std	Y+13, r20	; 0x0d
    3040:	5e 87       	std	Y+14, r21	; 0x0e
    3042:	8d 85       	ldd	r24, Y+13	; 0x0d
    3044:	9e 85       	ldd	r25, Y+14	; 0x0e
    3046:	0e 94 4f 1b 	call	0x369e	; 0x369e <layer_switch_get_action>
                    switch (action.kind.id) {
    304a:	29 2f       	mov	r18, r25
    304c:	22 95       	swap	r18
    304e:	2f 70       	andi	r18, 0x0F	; 15
    3050:	30 e0       	ldi	r19, 0x00	; 0
    3052:	22 30       	cpi	r18, 0x02	; 2
    3054:	31 05       	cpc	r19, r1
    3056:	0c f0       	brlt	.+2      	; 0x305a <process_tapping+0x1de>
    3058:	bc c0       	rjmp	.+376    	; 0x31d2 <process_tapping+0x356>
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    305a:	9f 70       	andi	r25, 0x0F	; 15
    305c:	09 f0       	breq	.+2      	; 0x3060 <process_tapping+0x1e4>
    305e:	b6 c0       	rjmp	.+364    	; 0x31cc <process_tapping+0x350>
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
                            if (IS_MOD(action.key.code)) return false;
    3060:	80 5e       	subi	r24, 0xE0	; 224
    3062:	88 30       	cpi	r24, 0x08	; 8
    3064:	08 f4       	brcc	.+2      	; 0x3068 <process_tapping+0x1ec>
    3066:	c1 c0       	rjmp	.+386    	; 0x31ea <process_tapping+0x36e>
                }
                else {
                    if (!IS_NOEVENT(event)) {
                        debug("Tapping: key event while last tap(>0).\n");
                    }
                    process_action(keyp);
    3068:	c8 01       	movw	r24, r16
    306a:	0e 94 51 13 	call	0x26a2	; 0x26a2 <process_action>
    306e:	e4 cf       	rjmp	.-56     	; 0x3038 <process_tapping+0x1bc>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    3070:	c8 16       	cp	r12, r24
    3072:	d9 06       	cpc	r13, r25
    3074:	08 f4       	brcc	.+2      	; 0x3078 <process_tapping+0x1fc>
    3076:	53 c0       	rjmp	.+166    	; 0x311e <process_tapping+0x2a2>
    3078:	f6 01       	movw	r30, r12
    307a:	e8 1b       	sub	r30, r24
    307c:	f9 0b       	sbc	r31, r25
    307e:	cf 01       	movw	r24, r30
    3080:	88 3c       	cpi	r24, 0xC8	; 200
    3082:	91 05       	cpc	r25, r1
    3084:	08 f4       	brcc	.+2      	; 0x3088 <process_tapping+0x20c>
    3086:	50 c0       	rjmp	.+160    	; 0x3128 <process_tapping+0x2ac>
    3088:	f1 2c       	mov	r15, r1
            }
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
    308a:	7c 2d       	mov	r23, r12
    308c:	d9 8a       	std	Y+17, r13	; 0x11
    308e:	c8 8a       	std	Y+16, r12	; 0x10
    3090:	89 89       	ldd	r24, Y+17	; 0x11
    3092:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <debug_event>
        else {
            if (tapping_key.tap.count == 0) {
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
    3096:	e7 ea       	ldi	r30, 0xA7	; 167
    3098:	f1 e0       	ldi	r31, 0x01	; 1
    309a:	86 e0       	ldi	r24, 0x06	; 6
    309c:	df 01       	movw	r26, r30
    309e:	1d 92       	st	X+, r1
    30a0:	8a 95       	dec	r24
    30a2:	e9 f7       	brne	.-6      	; 0x309e <process_tapping+0x222>
                debug_tapping_key();
    30a4:	0e 94 d5 16 	call	0x2daa	; 0x2daa <debug_tapping_key>
                return false;
    30a8:	a0 c0       	rjmp	.+320    	; 0x31ea <process_tapping+0x36e>
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    30aa:	75 13       	cpse	r23, r21
    30ac:	14 c0       	rjmp	.+40     	; 0x30d6 <process_tapping+0x25a>
    30ae:	34 13       	cpse	r19, r20
    30b0:	12 c0       	rjmp	.+36     	; 0x30d6 <process_tapping+0x25a>
    30b2:	61 11       	cpse	r22, r1
    30b4:	10 c0       	rjmp	.+32     	; 0x30d6 <process_tapping+0x25a>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
    30b6:	80 91 ac 01 	lds	r24, 0x01AC
    30ba:	f8 01       	movw	r30, r16
    30bc:	85 83       	std	Z+5, r24	; 0x05
                    process_action(keyp);
    30be:	c8 01       	movw	r24, r16
    30c0:	0e 94 51 13 	call	0x26a2	; 0x26a2 <process_action>
                    tapping_key = (keyrecord_t){};
    30c4:	86 e0       	ldi	r24, 0x06	; 6
    30c6:	e7 ea       	ldi	r30, 0xA7	; 167
    30c8:	f1 e0       	ldi	r31, 0x01	; 1
    30ca:	df 01       	movw	r26, r30
    30cc:	1d 92       	st	X+, r1
    30ce:	8a 95       	dec	r24
    30d0:	e9 f7       	brne	.-6      	; 0x30cc <process_tapping+0x250>
                    return true;
    30d2:	fe 2c       	mov	r15, r14
    30d4:	8a c0       	rjmp	.+276    	; 0x31ea <process_tapping+0x36e>
                }
                else if (is_tap_key(event.key) && event.pressed) {
    30d6:	4d 87       	std	Y+13, r20	; 0x0d
    30d8:	5e 87       	std	Y+14, r21	; 0x0e
    30da:	8d 85       	ldd	r24, Y+13	; 0x0d
    30dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    30de:	6a 8b       	std	Y+18, r22	; 0x12
    30e0:	0e 94 6f 16 	call	0x2cde	; 0x2cde <is_tap_key>
    30e4:	6a 89       	ldd	r22, Y+18	; 0x12
    30e6:	88 23       	and	r24, r24
    30e8:	09 f4       	brne	.+2      	; 0x30ec <process_tapping+0x270>
    30ea:	be cf       	rjmp	.-132    	; 0x3068 <process_tapping+0x1ec>
    30ec:	66 23       	and	r22, r22
    30ee:	09 f4       	brne	.+2      	; 0x30f2 <process_tapping+0x276>
    30f0:	bb cf       	rjmp	.-138    	; 0x3068 <process_tapping+0x1ec>
                    if (tapping_key.tap.count > 1) {
    30f2:	20 91 ac 01 	lds	r18, 0x01AC
    30f6:	82 2f       	mov	r24, r18
    30f8:	82 95       	swap	r24
    30fa:	8f 70       	andi	r24, 0x0F	; 15
    30fc:	90 e0       	ldi	r25, 0x00	; 0
    30fe:	02 97       	sbiw	r24, 0x02	; 2
    3100:	0c f4       	brge	.+2      	; 0x3104 <process_tapping+0x288>
    3102:	8e cf       	rjmp	.-228    	; 0x3020 <process_tapping+0x1a4>
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    3104:	80 91 a7 01 	lds	r24, 0x01A7
    3108:	90 91 a8 01 	lds	r25, 0x01A8
    310c:	9a 83       	std	Y+2, r25	; 0x02
    310e:	89 83       	std	Y+1, r24	; 0x01
    3110:	1b 82       	std	Y+3, r1	; 0x03
    3112:	dd 82       	std	Y+5, r13	; 0x05
    3114:	cc 82       	std	Y+4, r12	; 0x04
    3116:	2e 83       	std	Y+6, r18	; 0x06
    3118:	ce 01       	movw	r24, r28
    311a:	01 96       	adiw	r24, 0x01	; 1
    311c:	7f cf       	rjmp	.-258    	; 0x301c <process_tapping+0x1a0>
    311e:	80 95       	com	r24
    3120:	90 95       	com	r25
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    3122:	8c 0d       	add	r24, r12
    3124:	9d 1d       	adc	r25, r13
    3126:	ac cf       	rjmp	.-168    	; 0x3080 <process_tapping+0x204>
            if (event.pressed) {
    3128:	f6 2e       	mov	r15, r22
    312a:	66 23       	and	r22, r22
    312c:	09 f4       	brne	.+2      	; 0x3130 <process_tapping+0x2b4>
    312e:	9c cf       	rjmp	.-200    	; 0x3068 <process_tapping+0x1ec>
                if (IS_TAPPING_KEY(event.key)) {
    3130:	75 13       	cpse	r23, r21
    3132:	2e c0       	rjmp	.+92     	; 0x3190 <process_tapping+0x314>
    3134:	34 13       	cpse	r19, r20
    3136:	2c c0       	rjmp	.+88     	; 0x3190 <process_tapping+0x314>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    3138:	20 91 ac 01 	lds	r18, 0x01AC
    313c:	20 fd       	sbrc	r18, 0
    313e:	1f c0       	rjmp	.+62     	; 0x317e <process_tapping+0x302>
    3140:	82 2f       	mov	r24, r18
    3142:	82 95       	swap	r24
    3144:	8f 70       	andi	r24, 0x0F	; 15
    3146:	d9 f0       	breq	.+54     	; 0x317e <process_tapping+0x302>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
    3148:	d8 01       	movw	r26, r16
    314a:	15 96       	adiw	r26, 0x05	; 5
    314c:	2c 93       	st	X, r18
    314e:	15 97       	sbiw	r26, 0x05	; 5
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    3150:	8f 30       	cpi	r24, 0x0F	; 15
    3152:	49 f0       	breq	.+18     	; 0x3166 <process_tapping+0x2ea>
    3154:	8f 5f       	subi	r24, 0xFF	; 255
    3156:	98 2f       	mov	r25, r24
    3158:	92 95       	swap	r25
    315a:	90 7f       	andi	r25, 0xF0	; 240
    315c:	82 2f       	mov	r24, r18
    315e:	8f 70       	andi	r24, 0x0F	; 15
    3160:	89 2b       	or	r24, r25
    3162:	15 96       	adiw	r26, 0x05	; 5
    3164:	8c 93       	st	X, r24
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
    3166:	c8 01       	movw	r24, r16
    3168:	0e 94 51 13 	call	0x26a2	; 0x26a2 <process_action>
                        tapping_key = *keyp;
    316c:	86 e0       	ldi	r24, 0x06	; 6
    316e:	f8 01       	movw	r30, r16
    3170:	a7 ea       	ldi	r26, 0xA7	; 167
    3172:	b1 e0       	ldi	r27, 0x01	; 1
    3174:	01 90       	ld	r0, Z+
    3176:	0d 92       	st	X+, r0
    3178:	8a 95       	dec	r24
    317a:	e1 f7       	brne	.-8      	; 0x3174 <process_tapping+0x2f8>
    317c:	93 cf       	rjmp	.-218    	; 0x30a4 <process_tapping+0x228>
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
    317e:	86 e0       	ldi	r24, 0x06	; 6
    3180:	f8 01       	movw	r30, r16
    3182:	a7 ea       	ldi	r26, 0xA7	; 167
    3184:	b1 e0       	ldi	r27, 0x01	; 1
    3186:	01 90       	ld	r0, Z+
    3188:	0d 92       	st	X+, r0
    318a:	8a 95       	dec	r24
    318c:	e1 f7       	brne	.-8      	; 0x3186 <process_tapping+0x30a>
                        return true;
    318e:	2d c0       	rjmp	.+90     	; 0x31ea <process_tapping+0x36e>
                    }
                } else if (is_tap_key(event.key)) {
    3190:	4d 87       	std	Y+13, r20	; 0x0d
    3192:	5e 87       	std	Y+14, r21	; 0x0e
    3194:	8d 85       	ldd	r24, Y+13	; 0x0d
    3196:	9e 85       	ldd	r25, Y+14	; 0x0e
    3198:	0e 94 6f 16 	call	0x2cde	; 0x2cde <is_tap_key>
    319c:	81 11       	cpse	r24, r1
    319e:	40 cf       	rjmp	.-384    	; 0x3020 <process_tapping+0x1a4>
                    debug_tapping_key();
                    return true;
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
    31a0:	80 91 ac 01 	lds	r24, 0x01AC
    31a4:	81 60       	ori	r24, 0x01	; 1
    31a6:	80 93 ac 01 	sts	0x01AC, r24
                    process_action(keyp);
    31aa:	c8 01       	movw	r24, r16
    31ac:	0e 94 51 13 	call	0x26a2	; 0x26a2 <process_action>
                    return true;
    31b0:	1c c0       	rjmp	.+56     	; 0x31ea <process_tapping+0x36e>
            return false;
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event.key)) {
    31b2:	66 23       	and	r22, r22
    31b4:	09 f4       	brne	.+2      	; 0x31b8 <process_tapping+0x33c>
    31b6:	58 cf       	rjmp	.-336    	; 0x3068 <process_tapping+0x1ec>
    31b8:	4d 87       	std	Y+13, r20	; 0x0d
    31ba:	5e 87       	std	Y+14, r21	; 0x0e
    31bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    31be:	9e 85       	ldd	r25, Y+14	; 0x0e
    31c0:	0e 94 6f 16 	call	0x2cde	; 0x2cde <is_tap_key>
    31c4:	88 23       	and	r24, r24
    31c6:	09 f4       	brne	.+2      	; 0x31ca <process_tapping+0x34e>
    31c8:	4f cf       	rjmp	.-354    	; 0x3068 <process_tapping+0x1ec>
    31ca:	2a cf       	rjmp	.-428    	; 0x3020 <process_tapping+0x1a4>
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    31cc:	81 11       	cpse	r24, r1
    31ce:	48 cf       	rjmp	.-368    	; 0x3060 <process_tapping+0x1e4>
    31d0:	0c c0       	rjmp	.+24     	; 0x31ea <process_tapping+0x36e>
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
    31d2:	24 30       	cpi	r18, 0x04	; 4
    31d4:	31 05       	cpc	r19, r1
    31d6:	0c f0       	brlt	.+2      	; 0x31da <process_tapping+0x35e>
    31d8:	47 cf       	rjmp	.-370    	; 0x3068 <process_tapping+0x1ec>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    31da:	9f 70       	andi	r25, 0x0F	; 15
    31dc:	09 f4       	brne	.+2      	; 0x31e0 <process_tapping+0x364>
    31de:	40 cf       	rjmp	.-384    	; 0x3060 <process_tapping+0x1e4>
    31e0:	f8 01       	movw	r30, r16
    31e2:	95 81       	ldd	r25, Z+5	; 0x05
    31e4:	90 7f       	andi	r25, 0xF0	; 240
    31e6:	09 f0       	breq	.+2      	; 0x31ea <process_tapping+0x36e>
    31e8:	3b cf       	rjmp	.-394    	; 0x3060 <process_tapping+0x1e4>
        } else {
            process_action(keyp);
            return true;
        }
    }
}
    31ea:	8f 2d       	mov	r24, r15
    31ec:	62 96       	adiw	r28, 0x12	; 18
    31ee:	0f b6       	in	r0, 0x3f	; 63
    31f0:	f8 94       	cli
    31f2:	de bf       	out	0x3e, r29	; 62
    31f4:	0f be       	out	0x3f, r0	; 63
    31f6:	cd bf       	out	0x3d, r28	; 61
    31f8:	df 91       	pop	r29
    31fa:	cf 91       	pop	r28
    31fc:	1f 91       	pop	r17
    31fe:	0f 91       	pop	r16
    3200:	ff 90       	pop	r15
    3202:	ef 90       	pop	r14
    3204:	df 90       	pop	r13
    3206:	cf 90       	pop	r12
    3208:	08 95       	ret

0000320a <action_tapping_process>:
static void debug_tapping_key(void);
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    320a:	1f 93       	push	r17
    320c:	cf 93       	push	r28
    320e:	df 93       	push	r29
    3210:	cd b7       	in	r28, 0x3d	; 61
    3212:	de b7       	in	r29, 0x3e	; 62
    3214:	2c 97       	sbiw	r28, 0x0c	; 12
    3216:	0f b6       	in	r0, 0x3f	; 63
    3218:	f8 94       	cli
    321a:	de bf       	out	0x3e, r29	; 62
    321c:	0f be       	out	0x3f, r0	; 63
    321e:	cd bf       	out	0x3d, r28	; 61
    3220:	4f 83       	std	Y+7, r20	; 0x07
    3222:	58 87       	std	Y+8, r21	; 0x08
    3224:	69 87       	std	Y+9, r22	; 0x09
    3226:	7a 87       	std	Y+10, r23	; 0x0a
    3228:	8b 87       	std	Y+11, r24	; 0x0b
    322a:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    322c:	ce 01       	movw	r24, r28
    322e:	07 96       	adiw	r24, 0x07	; 7
    3230:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <process_tapping>
    3234:	88 23       	and	r24, r24
    3236:	69 f0       	breq	.+26     	; 0x3252 <action_tapping_process+0x48>
    3238:	8f 81       	ldd	r24, Y+7	; 0x07
    323a:	98 85       	ldd	r25, Y+8	; 0x08

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    323c:	2a 85       	ldd	r18, Y+10	; 0x0a
    323e:	3b 85       	ldd	r19, Y+11	; 0x0b
    3240:	23 2b       	or	r18, r19
    3242:	f1 f1       	breq	.+124    	; 0x32c0 <action_tapping_process+0xb6>
    3244:	9f 3f       	cpi	r25, 0xFF	; 255
    3246:	09 f0       	breq	.+2      	; 0x324a <action_tapping_process+0x40>
    3248:	63 c0       	rjmp	.+198    	; 0x3310 <action_tapping_process+0x106>
    324a:	8f 3f       	cpi	r24, 0xFF	; 255
    324c:	09 f0       	breq	.+2      	; 0x3250 <action_tapping_process+0x46>
    324e:	60 c0       	rjmp	.+192    	; 0x3310 <action_tapping_process+0x106>
    3250:	37 c0       	rjmp	.+110    	; 0x32c0 <action_tapping_process+0xb6>
    3252:	86 e0       	ldi	r24, 0x06	; 6
    3254:	fe 01       	movw	r30, r28
    3256:	37 96       	adiw	r30, 0x07	; 7
    3258:	de 01       	movw	r26, r28
    325a:	11 96       	adiw	r26, 0x01	; 1
    325c:	01 90       	ld	r0, Z+
    325e:	0d 92       	st	X+, r0
    3260:	8a 95       	dec	r24
    3262:	e1 f7       	brne	.-8      	; 0x325c <action_tapping_process+0x52>
    3264:	6f 81       	ldd	r22, Y+7	; 0x07
    3266:	78 85       	ldd	r23, Y+8	; 0x08
    3268:	ea 85       	ldd	r30, Y+10	; 0x0a
    326a:	fb 85       	ldd	r31, Y+11	; 0x0b
    326c:	30 97       	sbiw	r30, 0x00	; 0
    326e:	41 f1       	breq	.+80     	; 0x32c0 <action_tapping_process+0xb6>
    3270:	7f 3f       	cpi	r23, 0xFF	; 255
    3272:	11 f4       	brne	.+4      	; 0x3278 <action_tapping_process+0x6e>
    3274:	6f 3f       	cpi	r22, 0xFF	; 255
    3276:	21 f1       	breq	.+72     	; 0x32c0 <action_tapping_process+0xb6>
{
    if (IS_NOEVENT(record.event)) {
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    3278:	20 91 76 01 	lds	r18, 0x0176
    327c:	30 e0       	ldi	r19, 0x00	; 0
    327e:	c9 01       	movw	r24, r18
    3280:	01 96       	adiw	r24, 0x01	; 1
    3282:	87 70       	andi	r24, 0x07	; 7
    3284:	99 27       	eor	r25, r25
    3286:	40 91 75 01 	lds	r20, 0x0175
    328a:	50 e0       	ldi	r21, 0x00	; 0
    328c:	84 17       	cp	r24, r20
    328e:	95 07       	cpc	r25, r21
    3290:	09 f4       	brne	.+2      	; 0x3294 <action_tapping_process+0x8a>
    3292:	47 c0       	rjmp	.+142    	; 0x3322 <action_tapping_process+0x118>
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
    3294:	69 83       	std	Y+1, r22	; 0x01
    3296:	7a 83       	std	Y+2, r23	; 0x02
    3298:	fd 83       	std	Y+5, r31	; 0x05
    329a:	ec 83       	std	Y+4, r30	; 0x04
    329c:	96 e0       	ldi	r25, 0x06	; 6
    329e:	92 9f       	mul	r25, r18
    32a0:	d0 01       	movw	r26, r0
    32a2:	93 9f       	mul	r25, r19
    32a4:	b0 0d       	add	r27, r0
    32a6:	11 24       	eor	r1, r1
    32a8:	a9 58       	subi	r26, 0x89	; 137
    32aa:	be 4f       	sbci	r27, 0xFE	; 254
    32ac:	fe 01       	movw	r30, r28
    32ae:	31 96       	adiw	r30, 0x01	; 1
    32b0:	01 90       	ld	r0, Z+
    32b2:	0d 92       	st	X+, r0
    32b4:	9a 95       	dec	r25
    32b6:	e1 f7       	brne	.-8      	; 0x32b0 <action_tapping_process+0xa6>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    32b8:	80 93 76 01 	sts	0x0176, r24

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    32bc:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <debug_waiting_buffer>
    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    32c0:	16 e0       	ldi	r17, 0x06	; 6

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    32c2:	80 91 75 01 	lds	r24, 0x0175
    32c6:	90 91 76 01 	lds	r25, 0x0176
    32ca:	89 17       	cp	r24, r25
    32cc:	c1 f1       	breq	.+112    	; 0x333e <action_tapping_process+0x134>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    32ce:	18 9f       	mul	r17, r24
    32d0:	c0 01       	movw	r24, r0
    32d2:	11 24       	eor	r1, r1
    32d4:	89 58       	subi	r24, 0x89	; 137
    32d6:	9e 4f       	sbci	r25, 0xFE	; 254
    32d8:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <process_tapping>
    32dc:	88 23       	and	r24, r24
    32de:	79 f1       	breq	.+94     	; 0x333e <action_tapping_process+0x134>
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    32e0:	e0 91 75 01 	lds	r30, 0x0175
    32e4:	1e 9f       	mul	r17, r30
    32e6:	f0 01       	movw	r30, r0
    32e8:	11 24       	eor	r1, r1
    32ea:	e9 58       	subi	r30, 0x89	; 137
    32ec:	fe 4f       	sbci	r31, 0xFE	; 254
    32ee:	40 81       	ld	r20, Z
    32f0:	51 81       	ldd	r21, Z+1	; 0x01
    32f2:	62 81       	ldd	r22, Z+2	; 0x02
    32f4:	73 81       	ldd	r23, Z+3	; 0x03
    32f6:	84 81       	ldd	r24, Z+4	; 0x04
    32f8:	95 81       	ldd	r25, Z+5	; 0x05
    32fa:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <debug_record>

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    32fe:	80 91 75 01 	lds	r24, 0x0175
    3302:	90 e0       	ldi	r25, 0x00	; 0
    3304:	01 96       	adiw	r24, 0x01	; 1
    3306:	87 70       	andi	r24, 0x07	; 7
    3308:	99 27       	eor	r25, r25
    330a:	80 93 75 01 	sts	0x0175, r24
    330e:	d9 cf       	rjmp	.-78     	; 0x32c2 <action_tapping_process+0xb8>

void action_tapping_process(keyrecord_t record)
{
    if (process_tapping(&record)) {
        if (!IS_NOEVENT(record.event)) {
            debug("processed: "); debug_record(record); debug("\n");
    3310:	4f 81       	ldd	r20, Y+7	; 0x07
    3312:	58 85       	ldd	r21, Y+8	; 0x08
    3314:	69 85       	ldd	r22, Y+9	; 0x09
    3316:	7a 85       	ldd	r23, Y+10	; 0x0a
    3318:	8b 85       	ldd	r24, Y+11	; 0x0b
    331a:	9c 85       	ldd	r25, Y+12	; 0x0c
    331c:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <debug_record>
    3320:	cf cf       	rjmp	.-98     	; 0x32c0 <action_tapping_process+0xb6>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
    3322:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <clear_keyboard>
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
    3326:	10 92 76 01 	sts	0x0176, r1
    waiting_buffer_tail = 0;
    332a:	10 92 75 01 	sts	0x0175, r1
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
    332e:	e7 ea       	ldi	r30, 0xA7	; 167
    3330:	f1 e0       	ldi	r31, 0x01	; 1
    3332:	86 e0       	ldi	r24, 0x06	; 6
    3334:	df 01       	movw	r26, r30
    3336:	1d 92       	st	X+, r1
    3338:	8a 95       	dec	r24
    333a:	e9 f7       	brne	.-6      	; 0x3336 <action_tapping_process+0x12c>
    333c:	c1 cf       	rjmp	.-126    	; 0x32c0 <action_tapping_process+0xb6>
        }
    }
    if (!IS_NOEVENT(record.event)) {
        debug("\n");
    }
}
    333e:	2c 96       	adiw	r28, 0x0c	; 12
    3340:	0f b6       	in	r0, 0x3f	; 63
    3342:	f8 94       	cli
    3344:	de bf       	out	0x3e, r29	; 62
    3346:	0f be       	out	0x3f, r0	; 63
    3348:	cd bf       	out	0x3d, r28	; 61
    334a:	df 91       	pop	r29
    334c:	cf 91       	pop	r28
    334e:	1f 91       	pop	r17
    3350:	08 95       	ret

00003352 <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    3352:	df 92       	push	r13
    3354:	ef 92       	push	r14
    3356:	ff 92       	push	r15
    3358:	0f 93       	push	r16
    335a:	1f 93       	push	r17
    335c:	cf 93       	push	r28
    335e:	df 93       	push	r29
    3360:	fc 01       	movw	r30, r24
    macro_t macro = END;
    uint8_t interval = 0;

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    3362:	89 2b       	or	r24, r25
    3364:	09 f4       	brne	.+2      	; 0x3368 <action_macro_play+0x16>
    3366:	8a c0       	rjmp	.+276    	; 0x347c <action_macro_play+0x12a>
    3368:	e1 2c       	mov	r14, r1
    336a:	f1 2c       	mov	r15, r1
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    336c:	dd 24       	eor	r13, r13
    336e:	d3 94       	inc	r13

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    3370:	ef 01       	movw	r28, r30
    3372:	21 96       	adiw	r28, 0x01	; 1
    3374:	84 91       	lpm	r24, Z
    3376:	85 37       	cpi	r24, 0x75	; 117
    3378:	09 f4       	brne	.+2      	; 0x337c <action_macro_play+0x2a>
    337a:	61 c0       	rjmp	.+194    	; 0x343e <action_macro_play+0xec>
    337c:	58 f4       	brcc	.+22     	; 0x3394 <action_macro_play+0x42>
    337e:	84 37       	cpi	r24, 0x74	; 116
    3380:	08 f0       	brcs	.+2      	; 0x3384 <action_macro_play+0x32>
    3382:	4e c0       	rjmp	.+156    	; 0x3420 <action_macro_play+0xce>
    3384:	84 30       	cpi	r24, 0x04	; 4
    3386:	08 f0       	brcs	.+2      	; 0x338a <action_macro_play+0x38>
    3388:	6a c0       	rjmp	.+212    	; 0x345e <action_macro_play+0x10c>
    338a:	81 30       	cpi	r24, 0x01	; 1
    338c:	d1 f0       	breq	.+52     	; 0x33c2 <action_macro_play+0x70>
    338e:	82 30       	cpi	r24, 0x02	; 2
    3390:	71 f1       	breq	.+92     	; 0x33ee <action_macro_play+0x9c>
    3392:	74 c0       	rjmp	.+232    	; 0x347c <action_macro_play+0x12a>
    3394:	88 37       	cpi	r24, 0x78	; 120
    3396:	09 f4       	brne	.+2      	; 0x339a <action_macro_play+0x48>
    3398:	5d c0       	rjmp	.+186    	; 0x3454 <action_macro_play+0x102>
    339a:	50 f4       	brcc	.+20     	; 0x33b0 <action_macro_play+0x5e>
    339c:	86 37       	cpi	r24, 0x76	; 118
    339e:	09 f4       	brne	.+2      	; 0x33a2 <action_macro_play+0x50>
    33a0:	55 c0       	rjmp	.+170    	; 0x344c <action_macro_play+0xfa>
    33a2:	87 37       	cpi	r24, 0x77	; 119
    33a4:	09 f0       	breq	.+2      	; 0x33a8 <action_macro_play+0x56>
    33a6:	6a c0       	rjmp	.+212    	; 0x347c <action_macro_play+0x12a>
                break;
            case MOD_STORE:
                mod_storage = get_mods();
                break;
            case MOD_RESTORE:
                set_mods(mod_storage);
    33a8:	8e 2d       	mov	r24, r14
    33aa:	0e 94 48 1c 	call	0x3890	; 0x3890 <set_mods>
    33ae:	54 c0       	rjmp	.+168    	; 0x3458 <action_macro_play+0x106>

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    33b0:	9c e7       	ldi	r25, 0x7C	; 124
    33b2:	98 0f       	add	r25, r24
    33b4:	90 37       	cpi	r25, 0x70	; 112
    33b6:	08 f0       	brcs	.+2      	; 0x33ba <action_macro_play+0x68>
    33b8:	61 c0       	rjmp	.+194    	; 0x347c <action_macro_play+0x12a>
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
                break;
            case 0x84 ... 0xF3:
                dprintf("UP(%02X)\n", macro);
                unregister_code(macro&0x7F);
    33ba:	8f 77       	andi	r24, 0x7F	; 127
    33bc:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <unregister_code>
                break;
    33c0:	50 c0       	rjmp	.+160    	; 0x3462 <action_macro_play+0x110>

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
    33c2:	8f 01       	movw	r16, r30
    33c4:	0e 5f       	subi	r16, 0xFE	; 254
    33c6:	1f 4f       	sbci	r17, 0xFF	; 255
    33c8:	fe 01       	movw	r30, r28
    33ca:	84 91       	lpm	r24, Z
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
    33cc:	90 e2       	ldi	r25, 0x20	; 32
    33ce:	98 0f       	add	r25, r24
    33d0:	98 30       	cpi	r25, 0x08	; 8
    33d2:	50 f4       	brcc	.+20     	; 0x33e8 <action_macro_play+0x96>
                    add_weak_mods(MOD_BIT(macro));
    33d4:	87 70       	andi	r24, 0x07	; 7
    33d6:	fd 2d       	mov	r31, r13
    33d8:	01 c0       	rjmp	.+2      	; 0x33dc <action_macro_play+0x8a>
    33da:	ff 0f       	add	r31, r31
    33dc:	8a 95       	dec	r24
    33de:	ea f7       	brpl	.-6      	; 0x33da <action_macro_play+0x88>
    33e0:	8f 2f       	mov	r24, r31
    33e2:	0e 94 4e 1c 	call	0x389c	; 0x389c <add_weak_mods>
    33e6:	14 c0       	rjmp	.+40     	; 0x3410 <action_macro_play+0xbe>
                    send_keyboard_report();
                } else {
                    register_code(macro);
    33e8:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <register_code>
    33ec:	13 c0       	rjmp	.+38     	; 0x3414 <action_macro_play+0xc2>
                }
                break;
            case KEY_UP:
                MACRO_READ();
    33ee:	8f 01       	movw	r16, r30
    33f0:	0e 5f       	subi	r16, 0xFE	; 254
    33f2:	1f 4f       	sbci	r17, 0xFF	; 255
    33f4:	fe 01       	movw	r30, r28
    33f6:	c4 91       	lpm	r28, Z
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
    33f8:	80 e2       	ldi	r24, 0x20	; 32
    33fa:	8c 0f       	add	r24, r28
    33fc:	88 30       	cpi	r24, 0x08	; 8
    33fe:	60 f4       	brcc	.+24     	; 0x3418 <action_macro_play+0xc6>
                    del_weak_mods(MOD_BIT(macro));
    3400:	c7 70       	andi	r28, 0x07	; 7
    3402:	8d 2d       	mov	r24, r13
    3404:	01 c0       	rjmp	.+2      	; 0x3408 <action_macro_play+0xb6>
    3406:	88 0f       	add	r24, r24
    3408:	ca 95       	dec	r28
    340a:	ea f7       	brpl	.-6      	; 0x3406 <action_macro_play+0xb4>
    340c:	0e 94 54 1c 	call	0x38a8	; 0x38a8 <del_weak_mods>
                    send_keyboard_report();
    3410:	0e 94 75 1c 	call	0x38ea	; 0x38ea <send_keyboard_report>
                } else {
                    register_code(macro);
                }
                break;
            case KEY_UP:
                MACRO_READ();
    3414:	e8 01       	movw	r28, r16
    3416:	25 c0       	rjmp	.+74     	; 0x3462 <action_macro_play+0x110>
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    del_weak_mods(MOD_BIT(macro));
                    send_keyboard_report();
                } else {
                    unregister_code(macro);
    3418:	8c 2f       	mov	r24, r28
    341a:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <unregister_code>
    341e:	fa cf       	rjmp	.-12     	; 0x3414 <action_macro_play+0xc2>
                }
                break;
            case WAIT:
                MACRO_READ();
    3420:	9f 01       	movw	r18, r30
    3422:	2e 5f       	subi	r18, 0xFE	; 254
    3424:	3f 4f       	sbci	r19, 0xFF	; 255
    3426:	fe 01       	movw	r30, r28
    3428:	c4 91       	lpm	r28, Z
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    342a:	cc 23       	and	r28, r28
    342c:	69 f0       	breq	.+26     	; 0x3448 <action_macro_play+0xf6>
    342e:	8f e9       	ldi	r24, 0x9F	; 159
    3430:	9f e0       	ldi	r25, 0x0F	; 15
    3432:	01 97       	sbiw	r24, 0x01	; 1
    3434:	f1 f7       	brne	.-4      	; 0x3432 <action_macro_play+0xe0>
    3436:	00 c0       	rjmp	.+0      	; 0x3438 <action_macro_play+0xe6>
    3438:	00 00       	nop
    343a:	c1 50       	subi	r28, 0x01	; 1
    343c:	f6 cf       	rjmp	.-20     	; 0x342a <action_macro_play+0xd8>
                break;
            case INTERVAL:
                interval = MACRO_READ();
    343e:	9f 01       	movw	r18, r30
    3440:	2e 5f       	subi	r18, 0xFE	; 254
    3442:	3f 4f       	sbci	r19, 0xFF	; 255
    3444:	fe 01       	movw	r30, r28
    3446:	f4 90       	lpm	r15, Z
    3448:	e9 01       	movw	r28, r18
                dprintf("INTERVAL(%u)\n", interval);
                break;
    344a:	0b c0       	rjmp	.+22     	; 0x3462 <action_macro_play+0x110>
            case MOD_STORE:
                mod_storage = get_mods();
    344c:	0e 94 38 1c 	call	0x3870	; 0x3870 <get_mods>
    3450:	e8 2e       	mov	r14, r24
                break;
    3452:	07 c0       	rjmp	.+14     	; 0x3462 <action_macro_play+0x110>
            case MOD_RESTORE:
                set_mods(mod_storage);
                send_keyboard_report();
                break;
            case MOD_CLEAR:
                clear_mods();
    3454:	0e 94 4b 1c 	call	0x3896	; 0x3896 <clear_mods>
                send_keyboard_report();
    3458:	0e 94 75 1c 	call	0x38ea	; 0x38ea <send_keyboard_report>
                break;
    345c:	02 c0       	rjmp	.+4      	; 0x3462 <action_macro_play+0x110>
            case 0x04 ... 0x73:
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
    345e:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <register_code>
            case END:
            default:
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    3462:	8f 2d       	mov	r24, r15
    3464:	88 23       	and	r24, r24
    3466:	41 f0       	breq	.+16     	; 0x3478 <action_macro_play+0x126>
    3468:	ef e9       	ldi	r30, 0x9F	; 159
    346a:	ff e0       	ldi	r31, 0x0F	; 15
    346c:	31 97       	sbiw	r30, 0x01	; 1
    346e:	f1 f7       	brne	.-4      	; 0x346c <action_macro_play+0x11a>
    3470:	00 c0       	rjmp	.+0      	; 0x3472 <action_macro_play+0x120>
    3472:	00 00       	nop
    3474:	81 50       	subi	r24, 0x01	; 1
    3476:	f6 cf       	rjmp	.-20     	; 0x3464 <action_macro_play+0x112>
    3478:	fe 01       	movw	r30, r28
    347a:	7a cf       	rjmp	.-268    	; 0x3370 <action_macro_play+0x1e>
    }
}
    347c:	df 91       	pop	r29
    347e:	cf 91       	pop	r28
    3480:	1f 91       	pop	r17
    3482:	0f 91       	pop	r16
    3484:	ff 90       	pop	r15
    3486:	ef 90       	pop	r14
    3488:	df 90       	pop	r13
    348a:	08 95       	ret

0000348c <default_layer_state_set>:

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    348c:	60 93 b1 01 	sts	0x01B1, r22
    3490:	70 93 b2 01 	sts	0x01B2, r23
    3494:	80 93 b3 01 	sts	0x01B3, r24
    3498:	90 93 b4 01 	sts	0x01B4, r25
    hook_default_layer_change(default_layer_state);
    349c:	0e 94 e0 1c 	call	0x39c0	; 0x39c0 <hook_default_layer_change>
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    34a0:	0c 94 59 16 	jmp	0x2cb2	; 0x2cb2 <clear_keyboard_but_mods>

000034a4 <layer_state_set>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    34a4:	60 93 ad 01 	sts	0x01AD, r22
    34a8:	70 93 ae 01 	sts	0x01AE, r23
    34ac:	80 93 af 01 	sts	0x01AF, r24
    34b0:	90 93 b0 01 	sts	0x01B0, r25
    hook_layer_change(layer_state);
    34b4:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <hook_layer_change>
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    34b8:	0c 94 59 16 	jmp	0x2cb2	; 0x2cb2 <clear_keyboard_but_mods>

000034bc <default_layer_debug>:
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void default_layer_debug(void)
{
    34bc:	08 95       	ret

000034be <default_layer_set>:
    dprintf("%08lX(%u)", default_layer_state, biton32(default_layer_state));
}

void default_layer_set(uint32_t state)
{
    default_layer_state_set(state);
    34be:	0c 94 46 1a 	jmp	0x348c	; 0x348c <default_layer_state_set>

000034c2 <default_layer_or>:
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    34c2:	0f 93       	push	r16
    34c4:	1f 93       	push	r17
    default_layer_state_set(default_layer_state | state);
    34c6:	00 91 b1 01 	lds	r16, 0x01B1
    34ca:	10 91 b2 01 	lds	r17, 0x01B2
    34ce:	20 91 b3 01 	lds	r18, 0x01B3
    34d2:	30 91 b4 01 	lds	r19, 0x01B4
    34d6:	60 2b       	or	r22, r16
    34d8:	71 2b       	or	r23, r17
    34da:	82 2b       	or	r24, r18
    34dc:	93 2b       	or	r25, r19
}
    34de:	1f 91       	pop	r17
    34e0:	0f 91       	pop	r16
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
    34e2:	0c 94 46 1a 	jmp	0x348c	; 0x348c <default_layer_state_set>

000034e6 <default_layer_and>:
}
void default_layer_and(uint32_t state)
{
    34e6:	0f 93       	push	r16
    34e8:	1f 93       	push	r17
    default_layer_state_set(default_layer_state & state);
    34ea:	00 91 b1 01 	lds	r16, 0x01B1
    34ee:	10 91 b2 01 	lds	r17, 0x01B2
    34f2:	20 91 b3 01 	lds	r18, 0x01B3
    34f6:	30 91 b4 01 	lds	r19, 0x01B4
    34fa:	60 23       	and	r22, r16
    34fc:	71 23       	and	r23, r17
    34fe:	82 23       	and	r24, r18
    3500:	93 23       	and	r25, r19
}
    3502:	1f 91       	pop	r17
    3504:	0f 91       	pop	r16
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
    3506:	0c 94 46 1a 	jmp	0x348c	; 0x348c <default_layer_state_set>

0000350a <default_layer_xor>:
}
void default_layer_xor(uint32_t state)
{
    350a:	0f 93       	push	r16
    350c:	1f 93       	push	r17
    default_layer_state_set(default_layer_state ^ state);
    350e:	00 91 b1 01 	lds	r16, 0x01B1
    3512:	10 91 b2 01 	lds	r17, 0x01B2
    3516:	20 91 b3 01 	lds	r18, 0x01B3
    351a:	30 91 b4 01 	lds	r19, 0x01B4
    351e:	60 27       	eor	r22, r16
    3520:	71 27       	eor	r23, r17
    3522:	82 27       	eor	r24, r18
    3524:	93 27       	eor	r25, r19
}
    3526:	1f 91       	pop	r17
    3528:	0f 91       	pop	r16
{
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    default_layer_state_set(default_layer_state ^ state);
    352a:	0c 94 46 1a 	jmp	0x348c	; 0x348c <default_layer_state_set>

0000352e <layer_clear>:
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void layer_clear(void)
{
    layer_state_set(0);
    352e:	60 e0       	ldi	r22, 0x00	; 0
    3530:	70 e0       	ldi	r23, 0x00	; 0
    3532:	cb 01       	movw	r24, r22
    3534:	0c 94 52 1a 	jmp	0x34a4	; 0x34a4 <layer_state_set>

00003538 <layer_move>:
}

void layer_move(uint8_t layer)
{
    3538:	0f 93       	push	r16
    353a:	1f 93       	push	r17
    layer_state_set(1UL<<layer);
    353c:	41 e0       	ldi	r20, 0x01	; 1
    353e:	50 e0       	ldi	r21, 0x00	; 0
    3540:	60 e0       	ldi	r22, 0x00	; 0
    3542:	70 e0       	ldi	r23, 0x00	; 0
    3544:	8a 01       	movw	r16, r20
    3546:	9b 01       	movw	r18, r22
    3548:	04 c0       	rjmp	.+8      	; 0x3552 <layer_move+0x1a>
    354a:	00 0f       	add	r16, r16
    354c:	11 1f       	adc	r17, r17
    354e:	22 1f       	adc	r18, r18
    3550:	33 1f       	adc	r19, r19
    3552:	8a 95       	dec	r24
    3554:	d2 f7       	brpl	.-12     	; 0x354a <layer_move+0x12>
    3556:	c9 01       	movw	r24, r18
    3558:	b8 01       	movw	r22, r16
}
    355a:	1f 91       	pop	r17
    355c:	0f 91       	pop	r16
    layer_state_set(0);
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
    355e:	0c 94 52 1a 	jmp	0x34a4	; 0x34a4 <layer_state_set>

00003562 <layer_on>:
}

void layer_on(uint8_t layer)
{
    3562:	0f 93       	push	r16
    3564:	1f 93       	push	r17
    layer_state_set(layer_state | (1UL<<layer));
    3566:	41 e0       	ldi	r20, 0x01	; 1
    3568:	50 e0       	ldi	r21, 0x00	; 0
    356a:	60 e0       	ldi	r22, 0x00	; 0
    356c:	70 e0       	ldi	r23, 0x00	; 0
    356e:	04 c0       	rjmp	.+8      	; 0x3578 <layer_on+0x16>
    3570:	44 0f       	add	r20, r20
    3572:	55 1f       	adc	r21, r21
    3574:	66 1f       	adc	r22, r22
    3576:	77 1f       	adc	r23, r23
    3578:	8a 95       	dec	r24
    357a:	d2 f7       	brpl	.-12     	; 0x3570 <layer_on+0xe>
    357c:	80 91 ad 01 	lds	r24, 0x01AD
    3580:	90 91 ae 01 	lds	r25, 0x01AE
    3584:	a0 91 af 01 	lds	r26, 0x01AF
    3588:	b0 91 b0 01 	lds	r27, 0x01B0
    358c:	8a 01       	movw	r16, r20
    358e:	9b 01       	movw	r18, r22
    3590:	08 2b       	or	r16, r24
    3592:	19 2b       	or	r17, r25
    3594:	2a 2b       	or	r18, r26
    3596:	3b 2b       	or	r19, r27
    3598:	c9 01       	movw	r24, r18
    359a:	b8 01       	movw	r22, r16
}
    359c:	1f 91       	pop	r17
    359e:	0f 91       	pop	r16
    layer_state_set(1UL<<layer);
}

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
    35a0:	0c 94 52 1a 	jmp	0x34a4	; 0x34a4 <layer_state_set>

000035a4 <layer_off>:
}

void layer_off(uint8_t layer)
{
    35a4:	0f 93       	push	r16
    35a6:	1f 93       	push	r17
    layer_state_set(layer_state & ~(1UL<<layer));
    35a8:	41 e0       	ldi	r20, 0x01	; 1
    35aa:	50 e0       	ldi	r21, 0x00	; 0
    35ac:	60 e0       	ldi	r22, 0x00	; 0
    35ae:	70 e0       	ldi	r23, 0x00	; 0
    35b0:	04 c0       	rjmp	.+8      	; 0x35ba <layer_off+0x16>
    35b2:	44 0f       	add	r20, r20
    35b4:	55 1f       	adc	r21, r21
    35b6:	66 1f       	adc	r22, r22
    35b8:	77 1f       	adc	r23, r23
    35ba:	8a 95       	dec	r24
    35bc:	d2 f7       	brpl	.-12     	; 0x35b2 <layer_off+0xe>
    35be:	40 95       	com	r20
    35c0:	50 95       	com	r21
    35c2:	60 95       	com	r22
    35c4:	70 95       	com	r23
    35c6:	80 91 ad 01 	lds	r24, 0x01AD
    35ca:	90 91 ae 01 	lds	r25, 0x01AE
    35ce:	a0 91 af 01 	lds	r26, 0x01AF
    35d2:	b0 91 b0 01 	lds	r27, 0x01B0
    35d6:	8a 01       	movw	r16, r20
    35d8:	9b 01       	movw	r18, r22
    35da:	08 23       	and	r16, r24
    35dc:	19 23       	and	r17, r25
    35de:	2a 23       	and	r18, r26
    35e0:	3b 23       	and	r19, r27
    35e2:	c9 01       	movw	r24, r18
    35e4:	b8 01       	movw	r22, r16
}
    35e6:	1f 91       	pop	r17
    35e8:	0f 91       	pop	r16
    layer_state_set(layer_state | (1UL<<layer));
}

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
    35ea:	0c 94 52 1a 	jmp	0x34a4	; 0x34a4 <layer_state_set>

000035ee <layer_invert>:
}

void layer_invert(uint8_t layer)
{
    35ee:	0f 93       	push	r16
    35f0:	1f 93       	push	r17
    layer_state_set(layer_state ^ (1UL<<layer));
    35f2:	41 e0       	ldi	r20, 0x01	; 1
    35f4:	50 e0       	ldi	r21, 0x00	; 0
    35f6:	60 e0       	ldi	r22, 0x00	; 0
    35f8:	70 e0       	ldi	r23, 0x00	; 0
    35fa:	04 c0       	rjmp	.+8      	; 0x3604 <layer_invert+0x16>
    35fc:	44 0f       	add	r20, r20
    35fe:	55 1f       	adc	r21, r21
    3600:	66 1f       	adc	r22, r22
    3602:	77 1f       	adc	r23, r23
    3604:	8a 95       	dec	r24
    3606:	d2 f7       	brpl	.-12     	; 0x35fc <layer_invert+0xe>
    3608:	80 91 ad 01 	lds	r24, 0x01AD
    360c:	90 91 ae 01 	lds	r25, 0x01AE
    3610:	a0 91 af 01 	lds	r26, 0x01AF
    3614:	b0 91 b0 01 	lds	r27, 0x01B0
    3618:	8a 01       	movw	r16, r20
    361a:	9b 01       	movw	r18, r22
    361c:	08 27       	eor	r16, r24
    361e:	19 27       	eor	r17, r25
    3620:	2a 27       	eor	r18, r26
    3622:	3b 27       	eor	r19, r27
    3624:	c9 01       	movw	r24, r18
    3626:	b8 01       	movw	r22, r16
}
    3628:	1f 91       	pop	r17
    362a:	0f 91       	pop	r16
    layer_state_set(layer_state & ~(1UL<<layer));
}

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
    362c:	0c 94 52 1a 	jmp	0x34a4	; 0x34a4 <layer_state_set>

00003630 <layer_or>:
}

void layer_or(uint32_t state)
{
    3630:	0f 93       	push	r16
    3632:	1f 93       	push	r17
    layer_state_set(layer_state | state);
    3634:	00 91 ad 01 	lds	r16, 0x01AD
    3638:	10 91 ae 01 	lds	r17, 0x01AE
    363c:	20 91 af 01 	lds	r18, 0x01AF
    3640:	30 91 b0 01 	lds	r19, 0x01B0
    3644:	60 2b       	or	r22, r16
    3646:	71 2b       	or	r23, r17
    3648:	82 2b       	or	r24, r18
    364a:	93 2b       	or	r25, r19
}
    364c:	1f 91       	pop	r17
    364e:	0f 91       	pop	r16
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
    3650:	0c 94 52 1a 	jmp	0x34a4	; 0x34a4 <layer_state_set>

00003654 <layer_and>:
}
void layer_and(uint32_t state)
{
    3654:	0f 93       	push	r16
    3656:	1f 93       	push	r17
    layer_state_set(layer_state & state);
    3658:	00 91 ad 01 	lds	r16, 0x01AD
    365c:	10 91 ae 01 	lds	r17, 0x01AE
    3660:	20 91 af 01 	lds	r18, 0x01AF
    3664:	30 91 b0 01 	lds	r19, 0x01B0
    3668:	60 23       	and	r22, r16
    366a:	71 23       	and	r23, r17
    366c:	82 23       	and	r24, r18
    366e:	93 23       	and	r25, r19
}
    3670:	1f 91       	pop	r17
    3672:	0f 91       	pop	r16
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
    3674:	0c 94 52 1a 	jmp	0x34a4	; 0x34a4 <layer_state_set>

00003678 <layer_xor>:
}
void layer_xor(uint32_t state)
{
    3678:	0f 93       	push	r16
    367a:	1f 93       	push	r17
    layer_state_set(layer_state ^ state);
    367c:	00 91 ad 01 	lds	r16, 0x01AD
    3680:	10 91 ae 01 	lds	r17, 0x01AE
    3684:	20 91 af 01 	lds	r18, 0x01AF
    3688:	30 91 b0 01 	lds	r19, 0x01B0
    368c:	60 27       	eor	r22, r16
    368e:	71 27       	eor	r23, r17
    3690:	82 27       	eor	r24, r18
    3692:	93 27       	eor	r25, r19
}
    3694:	1f 91       	pop	r17
    3696:	0f 91       	pop	r16
{
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    layer_state_set(layer_state ^ state);
    3698:	0c 94 52 1a 	jmp	0x34a4	; 0x34a4 <layer_state_set>

0000369c <layer_debug>:
}

void layer_debug(void)
{
    369c:	08 95       	ret

0000369e <layer_switch_get_action>:
#endif



action_t layer_switch_get_action(keypos_t key)
{
    369e:	cf 92       	push	r12
    36a0:	df 92       	push	r13
    36a2:	ef 92       	push	r14
    36a4:	ff 92       	push	r15
    36a6:	0f 93       	push	r16
    36a8:	1f 93       	push	r17
    36aa:	cf 93       	push	r28
    36ac:	df 93       	push	r29
    36ae:	8c 01       	movw	r16, r24
    action_t action = ACTION_TRANSPARENT;

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    36b0:	c0 90 b1 01 	lds	r12, 0x01B1
    36b4:	d0 90 b2 01 	lds	r13, 0x01B2
    36b8:	e0 90 b3 01 	lds	r14, 0x01B3
    36bc:	f0 90 b4 01 	lds	r15, 0x01B4
    36c0:	40 91 ad 01 	lds	r20, 0x01AD
    36c4:	50 91 ae 01 	lds	r21, 0x01AE
    36c8:	60 91 af 01 	lds	r22, 0x01AF
    36cc:	70 91 b0 01 	lds	r23, 0x01B0
    36d0:	c4 2a       	or	r12, r20
    36d2:	d5 2a       	or	r13, r21
    36d4:	e6 2a       	or	r14, r22
    36d6:	f7 2a       	or	r15, r23
    36d8:	cf e1       	ldi	r28, 0x1F	; 31
    36da:	d0 e0       	ldi	r29, 0x00	; 0
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    36dc:	d7 01       	movw	r26, r14
    36de:	c6 01       	movw	r24, r12
    36e0:	0c 2e       	mov	r0, r28
    36e2:	04 c0       	rjmp	.+8      	; 0x36ec <layer_switch_get_action+0x4e>
    36e4:	b6 95       	lsr	r27
    36e6:	a7 95       	ror	r26
    36e8:	97 95       	ror	r25
    36ea:	87 95       	ror	r24
    36ec:	0a 94       	dec	r0
    36ee:	d2 f7       	brpl	.-12     	; 0x36e4 <layer_switch_get_action+0x46>
    36f0:	80 ff       	sbrs	r24, 0
    36f2:	07 c0       	rjmp	.+14     	; 0x3702 <layer_switch_get_action+0x64>
            action = action_for_key(i, key);
    36f4:	b8 01       	movw	r22, r16
    36f6:	8c 2f       	mov	r24, r28
    36f8:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <action_for_key>
            if (action.code != (action_t)ACTION_TRANSPARENT.code) {
    36fc:	81 30       	cpi	r24, 0x01	; 1
    36fe:	91 05       	cpc	r25, r1
    3700:	31 f4       	brne	.+12     	; 0x370e <layer_switch_get_action+0x70>
    3702:	21 97       	sbiw	r28, 0x01	; 1
    3704:	58 f7       	brcc	.-42     	; 0x36dc <layer_switch_get_action+0x3e>
                return action;
            }
        }
    }
    /* fall back to layer 0 */
    action = action_for_key(0, key);
    3706:	b8 01       	movw	r22, r16
    3708:	80 e0       	ldi	r24, 0x00	; 0
    370a:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <action_for_key>
    return action;
#else
    action = action_for_key(biton32(default_layer_state), key);
    return action;
#endif
}
    370e:	df 91       	pop	r29
    3710:	cf 91       	pop	r28
    3712:	1f 91       	pop	r17
    3714:	0f 91       	pop	r16
    3716:	ff 90       	pop	r15
    3718:	ef 90       	pop	r14
    371a:	df 90       	pop	r13
    371c:	cf 90       	pop	r12
    371e:	08 95       	ret

00003720 <add_key>:

/* key */
void add_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    3720:	90 91 0b 01 	lds	r25, 0x010B
    3724:	99 23       	and	r25, r25
    3726:	21 f0       	breq	.+8      	; 0x3730 <add_key+0x10>
    3728:	90 91 0c 01 	lds	r25, 0x010C
    372c:	91 11       	cpse	r25, r1
    372e:	09 c0       	rjmp	.+18     	; 0x3742 <add_key+0x22>
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    3730:	20 91 0d 01 	lds	r18, 0x010D
    3734:	30 91 0e 01 	lds	r19, 0x010E
    3738:	f9 01       	movw	r30, r18
    373a:	32 96       	adiw	r30, 0x02	; 2
    373c:	9f ef       	ldi	r25, 0xFF	; 255
    373e:	40 e0       	ldi	r20, 0x00	; 0
    3740:	30 c0       	rjmp	.+96     	; 0x37a2 <add_key+0x82>
}

#ifdef NKRO_ENABLE
static inline void add_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    3742:	98 2f       	mov	r25, r24
    3744:	96 95       	lsr	r25
    3746:	96 95       	lsr	r25
    3748:	96 95       	lsr	r25
    374a:	9f 31       	cpi	r25, 0x1F	; 31
    374c:	a0 f4       	brcc	.+40     	; 0x3776 <add_key+0x56>
        keyboard_report->nkro.bits[code>>3] |= 1<<(code&7);
    374e:	e0 91 0d 01 	lds	r30, 0x010D
    3752:	f0 91 0e 01 	lds	r31, 0x010E
    3756:	e9 0f       	add	r30, r25
    3758:	f1 1d       	adc	r31, r1
    375a:	87 70       	andi	r24, 0x07	; 7
    375c:	21 e0       	ldi	r18, 0x01	; 1
    375e:	30 e0       	ldi	r19, 0x00	; 0
    3760:	a9 01       	movw	r20, r18
    3762:	02 c0       	rjmp	.+4      	; 0x3768 <add_key+0x48>
    3764:	44 0f       	add	r20, r20
    3766:	55 1f       	adc	r21, r21
    3768:	8a 95       	dec	r24
    376a:	e2 f7       	brpl	.-8      	; 0x3764 <add_key+0x44>
    376c:	ca 01       	movw	r24, r20
    376e:	91 81       	ldd	r25, Z+1	; 0x01
    3770:	89 2b       	or	r24, r25
    3772:	81 83       	std	Z+1, r24	; 0x01
    3774:	08 95       	ret
    } else {
        dprintf("add_key_bit: can't add: %02X\n", code);
    3776:	90 91 d8 01 	lds	r25, 0x01D8
    377a:	90 ff       	sbrs	r25, 0
    377c:	23 c0       	rjmp	.+70     	; 0x37c4 <add_key+0xa4>
    377e:	1f 92       	push	r1
    3780:	8f 93       	push	r24
    3782:	86 e3       	ldi	r24, 0x36	; 54
    3784:	95 e0       	ldi	r25, 0x05	; 5
    3786:	9f 93       	push	r25
    3788:	8f 93       	push	r24
    378a:	0e 94 6b 07 	call	0xed6	; 0xed6 <__xprintf>
    378e:	0f 90       	pop	r0
    3790:	0f 90       	pop	r0
    3792:	0f 90       	pop	r0
    3794:	0f 90       	pop	r0
    3796:	08 95       	ret
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
    3798:	9f 3f       	cpi	r25, 0xFF	; 255
    379a:	39 f0       	breq	.+14     	; 0x37aa <add_key+0x8a>
    379c:	4f 5f       	subi	r20, 0xFF	; 255
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
    379e:	4e 31       	cpi	r20, 0x1E	; 30
    37a0:	41 f0       	breq	.+16     	; 0x37b2 <add_key+0x92>
        if (keyboard_report->keys[i] == code) {
    37a2:	51 91       	ld	r21, Z+
    37a4:	58 13       	cpse	r21, r24
    37a6:	f8 cf       	rjmp	.-16     	; 0x3798 <add_key+0x78>
    37a8:	0d c0       	rjmp	.+26     	; 0x37c4 <add_key+0xa4>
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
    37aa:	51 11       	cpse	r21, r1
    37ac:	f7 cf       	rjmp	.-18     	; 0x379c <add_key+0x7c>
    37ae:	94 2f       	mov	r25, r20
    37b0:	f5 cf       	rjmp	.-22     	; 0x379c <add_key+0x7c>
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
    37b2:	9f 3f       	cpi	r25, 0xFF	; 255
    37b4:	39 f0       	breq	.+14     	; 0x37c4 <add_key+0xa4>
            keyboard_report->keys[empty] = code;
    37b6:	f9 01       	movw	r30, r18
    37b8:	e9 0f       	add	r30, r25
    37ba:	f1 1d       	adc	r31, r1
    37bc:	97 fd       	sbrc	r25, 7
    37be:	fa 95       	dec	r31
    37c0:	82 83       	std	Z+2, r24	; 0x02
    37c2:	08 95       	ret
    37c4:	08 95       	ret

000037c6 <del_key>:
}

void del_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    37c6:	90 91 0b 01 	lds	r25, 0x010B
    37ca:	99 23       	and	r25, r25
    37cc:	21 f0       	breq	.+8      	; 0x37d6 <del_key+0x10>
    37ce:	90 91 0c 01 	lds	r25, 0x010C
    37d2:	91 11       	cpse	r25, r1
    37d4:	09 c0       	rjmp	.+18     	; 0x37e8 <del_key+0x22>
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    37d6:	20 91 0d 01 	lds	r18, 0x010D
    37da:	30 91 0e 01 	lds	r19, 0x010E
    37de:	f9 01       	movw	r30, r18
    37e0:	32 96       	adiw	r30, 0x02	; 2
    37e2:	20 5e       	subi	r18, 0xE0	; 224
    37e4:	3f 4f       	sbci	r19, 0xFF	; 255
    37e6:	30 c0       	rjmp	.+96     	; 0x3848 <del_key+0x82>
    }
}

static inline void del_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    37e8:	98 2f       	mov	r25, r24
    37ea:	96 95       	lsr	r25
    37ec:	96 95       	lsr	r25
    37ee:	96 95       	lsr	r25
    37f0:	9f 31       	cpi	r25, 0x1F	; 31
    37f2:	a8 f4       	brcc	.+42     	; 0x381e <del_key+0x58>
        keyboard_report->nkro.bits[code>>3] &= ~(1<<(code&7));
    37f4:	e0 91 0d 01 	lds	r30, 0x010D
    37f8:	f0 91 0e 01 	lds	r31, 0x010E
    37fc:	e9 0f       	add	r30, r25
    37fe:	f1 1d       	adc	r31, r1
    3800:	87 70       	andi	r24, 0x07	; 7
    3802:	21 e0       	ldi	r18, 0x01	; 1
    3804:	30 e0       	ldi	r19, 0x00	; 0
    3806:	a9 01       	movw	r20, r18
    3808:	02 c0       	rjmp	.+4      	; 0x380e <del_key+0x48>
    380a:	44 0f       	add	r20, r20
    380c:	55 1f       	adc	r21, r21
    380e:	8a 95       	dec	r24
    3810:	e2 f7       	brpl	.-8      	; 0x380a <del_key+0x44>
    3812:	ca 01       	movw	r24, r20
    3814:	80 95       	com	r24
    3816:	91 81       	ldd	r25, Z+1	; 0x01
    3818:	89 23       	and	r24, r25
    381a:	81 83       	std	Z+1, r24	; 0x01
    381c:	08 95       	ret
    } else {
        dprintf("del_key_bit: can't del: %02X\n", code);
    381e:	90 91 d8 01 	lds	r25, 0x01D8
    3822:	90 ff       	sbrs	r25, 0
    3824:	16 c0       	rjmp	.+44     	; 0x3852 <del_key+0x8c>
    3826:	1f 92       	push	r1
    3828:	8f 93       	push	r24
    382a:	88 e1       	ldi	r24, 0x18	; 24
    382c:	95 e0       	ldi	r25, 0x05	; 5
    382e:	9f 93       	push	r25
    3830:	8f 93       	push	r24
    3832:	0e 94 6b 07 	call	0xed6	; 0xed6 <__xprintf>
    3836:	0f 90       	pop	r0
    3838:	0f 90       	pop	r0
    383a:	0f 90       	pop	r0
    383c:	0f 90       	pop	r0
    383e:	08 95       	ret
    3840:	31 96       	adiw	r30, 0x01	; 1
            }
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
    3842:	e2 17       	cp	r30, r18
    3844:	f3 07       	cpc	r31, r19
    3846:	29 f0       	breq	.+10     	; 0x3852 <del_key+0x8c>
        if (keyboard_report->keys[i] == code) {
    3848:	90 81       	ld	r25, Z
    384a:	98 13       	cpse	r25, r24
    384c:	f9 cf       	rjmp	.-14     	; 0x3840 <del_key+0x7a>
            keyboard_report->keys[i] = 0;
    384e:	10 82       	st	Z, r1
    3850:	f7 cf       	rjmp	.-18     	; 0x3840 <del_key+0x7a>
    3852:	08 95       	ret

00003854 <clear_keys>:
#endif
    del_key_byte(key);
}

void clear_keys(void)
{
    3854:	81 e0       	ldi	r24, 0x01	; 1
    3856:	90 e0       	ldi	r25, 0x00	; 0
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        keyboard_report->raw[i] = 0;
    3858:	e0 91 0d 01 	lds	r30, 0x010D
    385c:	f0 91 0e 01 	lds	r31, 0x010E
    3860:	e8 0f       	add	r30, r24
    3862:	f9 1f       	adc	r31, r25
    3864:	10 82       	st	Z, r1
    3866:	01 96       	adiw	r24, 0x01	; 1
}

void clear_keys(void)
{
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    3868:	80 32       	cpi	r24, 0x20	; 32
    386a:	91 05       	cpc	r25, r1
    386c:	a9 f7       	brne	.-22     	; 0x3858 <clear_keys+0x4>
        keyboard_report->raw[i] = 0;
    }
}
    386e:	08 95       	ret

00003870 <get_mods>:


/* modifier */
uint8_t get_mods(void) { return real_mods; }
    3870:	80 91 d7 01 	lds	r24, 0x01D7
    3874:	08 95       	ret

00003876 <add_mods>:
void add_mods(uint8_t mods) { real_mods |= mods; }
    3876:	90 91 d7 01 	lds	r25, 0x01D7
    387a:	89 2b       	or	r24, r25
    387c:	80 93 d7 01 	sts	0x01D7, r24
    3880:	08 95       	ret

00003882 <del_mods>:
void del_mods(uint8_t mods) { real_mods &= ~mods; }
    3882:	80 95       	com	r24
    3884:	90 91 d7 01 	lds	r25, 0x01D7
    3888:	89 23       	and	r24, r25
    388a:	80 93 d7 01 	sts	0x01D7, r24
    388e:	08 95       	ret

00003890 <set_mods>:
void set_mods(uint8_t mods) { real_mods = mods; }
    3890:	80 93 d7 01 	sts	0x01D7, r24
    3894:	08 95       	ret

00003896 <clear_mods>:
void clear_mods(void) { real_mods = 0; }
    3896:	10 92 d7 01 	sts	0x01D7, r1
    389a:	08 95       	ret

0000389c <add_weak_mods>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
    389c:	90 91 d6 01 	lds	r25, 0x01D6
    38a0:	89 2b       	or	r24, r25
    38a2:	80 93 d6 01 	sts	0x01D6, r24
    38a6:	08 95       	ret

000038a8 <del_weak_mods>:
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
    38a8:	80 95       	com	r24
    38aa:	90 91 d6 01 	lds	r25, 0x01D6
    38ae:	89 23       	and	r24, r25
    38b0:	80 93 d6 01 	sts	0x01D6, r24
    38b4:	08 95       	ret

000038b6 <clear_weak_mods>:
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
void clear_weak_mods(void) { weak_mods = 0; }
    38b6:	10 92 d6 01 	sts	0x01D6, r1
    38ba:	08 95       	ret

000038bc <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    38bc:	80 93 b5 01 	sts	0x01B5, r24
    38c0:	08 95       	ret

000038c2 <clear_oneshot_mods>:
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    38c2:	10 92 b5 01 	sts	0x01B5, r1
    38c6:	08 95       	ret

000038c8 <has_anykey>:
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    38c8:	80 91 0d 01 	lds	r24, 0x010D
    38cc:	90 91 0e 01 	lds	r25, 0x010E
    38d0:	fc 01       	movw	r30, r24
    38d2:	31 96       	adiw	r30, 0x01	; 1
    38d4:	9c 01       	movw	r18, r24
    38d6:	20 5e       	subi	r18, 0xE0	; 224
    38d8:	3f 4f       	sbci	r19, 0xFF	; 255
/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    38da:	80 e0       	ldi	r24, 0x00	; 0
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    38dc:	91 91       	ld	r25, Z+
    38de:	91 11       	cpse	r25, r1
            cnt++;
    38e0:	8f 5f       	subi	r24, 0xFF	; 255
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    38e2:	e2 17       	cp	r30, r18
    38e4:	f3 07       	cpc	r31, r19
    38e6:	d1 f7       	brne	.-12     	; 0x38dc <has_anykey+0x14>
        if (keyboard_report->raw[i])
            cnt++;
    }
    return cnt;
}
    38e8:	08 95       	ret

000038ea <send_keyboard_report>:
#endif
#endif


void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    38ea:	e0 91 0d 01 	lds	r30, 0x010D
    38ee:	f0 91 0e 01 	lds	r31, 0x010E
    38f2:	80 91 d7 01 	lds	r24, 0x01D7
    38f6:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    38f8:	e0 91 0d 01 	lds	r30, 0x010D
    38fc:	f0 91 0e 01 	lds	r31, 0x010E
    3900:	90 81       	ld	r25, Z
    3902:	80 91 d6 01 	lds	r24, 0x01D6
    3906:	89 2b       	or	r24, r25
    3908:	80 83       	st	Z, r24
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
    390a:	80 91 b5 01 	lds	r24, 0x01B5
    390e:	88 23       	and	r24, r24
    3910:	61 f0       	breq	.+24     	; 0x392a <send_keyboard_report+0x40>
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
            dprintf("Oneshot: timeout\n");
            clear_oneshot_mods();
        }
#endif
        keyboard_report->mods |= oneshot_mods;
    3912:	e0 91 0d 01 	lds	r30, 0x010D
    3916:	f0 91 0e 01 	lds	r31, 0x010E
    391a:	90 81       	ld	r25, Z
    391c:	89 2b       	or	r24, r25
    391e:	80 83       	st	Z, r24
        if (has_anykey()) {
    3920:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <has_anykey>
    3924:	81 11       	cpse	r24, r1
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    3926:	10 92 b5 01 	sts	0x01B5, r1
        if (has_anykey()) {
            clear_oneshot_mods();
        }
    }
#endif
    host_keyboard_send(keyboard_report);
    392a:	80 91 0d 01 	lds	r24, 0x010D
    392e:	90 91 0e 01 	lds	r25, 0x010E
    3932:	0c 94 63 10 	jmp	0x20c6	; 0x20c6 <host_keyboard_send>

00003936 <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    3936:	90 93 39 01 	sts	0x0139, r25
    393a:	80 93 38 01 	sts	0x0138, r24
    393e:	08 95       	ret

00003940 <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    3940:	82 95       	swap	r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    3942:	98 2f       	mov	r25, r24
    3944:	9c 7c       	andi	r25, 0xCC	; 204
    3946:	39 2f       	mov	r19, r25
    3948:	36 95       	lsr	r19
    394a:	36 95       	lsr	r19
    394c:	28 2f       	mov	r18, r24
    394e:	23 73       	andi	r18, 0x33	; 51
    3950:	44 e0       	ldi	r20, 0x04	; 4
    3952:	24 9f       	mul	r18, r20
    3954:	c0 01       	movw	r24, r0
    3956:	11 24       	eor	r1, r1
    3958:	93 2f       	mov	r25, r19
    395a:	98 2b       	or	r25, r24
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    395c:	29 2f       	mov	r18, r25
    395e:	2a 7a       	andi	r18, 0xAA	; 170
    3960:	26 95       	lsr	r18
    3962:	89 2f       	mov	r24, r25
    3964:	85 75       	andi	r24, 0x55	; 85
    3966:	88 0f       	add	r24, r24
    return bits;
}
    3968:	82 2b       	or	r24, r18
    396a:	08 95       	ret

0000396c <bitrev16>:

uint16_t bitrev16(uint16_t bits)
{
    396c:	1f 93       	push	r17
    396e:	cf 93       	push	r28
    3970:	df 93       	push	r29
    3972:	1f 92       	push	r1
    3974:	cd b7       	in	r28, 0x3d	; 61
    3976:	de b7       	in	r29, 0x3e	; 62
    bits = bitrev(bits & 0x00ff)<<8 | bitrev((bits & 0xff00)>>8);
    3978:	99 83       	std	Y+1, r25	; 0x01
    397a:	0e 94 a0 1c 	call	0x3940	; 0x3940 <bitrev>
    397e:	18 2f       	mov	r17, r24
    3980:	99 81       	ldd	r25, Y+1	; 0x01
    3982:	89 2f       	mov	r24, r25
    3984:	0e 94 a0 1c 	call	0x3940	; 0x3940 <bitrev>
    3988:	21 2f       	mov	r18, r17
    398a:	30 e0       	ldi	r19, 0x00	; 0
    398c:	32 2f       	mov	r19, r18
    398e:	22 27       	eor	r18, r18
    return bits;
}
    3990:	a9 01       	movw	r20, r18
    3992:	48 2b       	or	r20, r24
    3994:	ca 01       	movw	r24, r20
    3996:	0f 90       	pop	r0
    3998:	df 91       	pop	r29
    399a:	cf 91       	pop	r28
    399c:	1f 91       	pop	r17
    399e:	08 95       	ret

000039a0 <hook_keyboard_loop>:
/* -------------------------------------------------
 * Definitions of default hooks
 * ------------------------------------------------- */

__attribute__((weak))
void hook_keyboard_loop(void) {}
    39a0:	08 95       	ret

000039a2 <hook_matrix_change>:

__attribute__((weak))
void hook_matrix_change(keyevent_t event) {
    39a2:	cf 93       	push	r28
    39a4:	df 93       	push	r29
    39a6:	00 d0       	rcall	.+0      	; 0x39a8 <hook_matrix_change+0x6>
    39a8:	00 d0       	rcall	.+0      	; 0x39aa <hook_matrix_change+0x8>
    39aa:	1f 92       	push	r1
    39ac:	cd b7       	in	r28, 0x3d	; 61
    39ae:	de b7       	in	r29, 0x3e	; 62
    (void)event;
}
    39b0:	0f 90       	pop	r0
    39b2:	0f 90       	pop	r0
    39b4:	0f 90       	pop	r0
    39b6:	0f 90       	pop	r0
    39b8:	0f 90       	pop	r0
    39ba:	df 91       	pop	r29
    39bc:	cf 91       	pop	r28
    39be:	08 95       	ret

000039c0 <hook_default_layer_change>:

__attribute__((weak))
void hook_default_layer_change(uint32_t default_layer_state) {
    39c0:	08 95       	ret

000039c2 <hook_layer_change>:
    (void)default_layer_state;
}

__attribute__((weak))
void hook_layer_change(uint32_t layer_state) {
    39c2:	08 95       	ret

000039c4 <hook_keyboard_leds_change>:
    (void)layer_state;
}

__attribute__((weak))
void hook_keyboard_leds_change(uint8_t led_status) {
    keyboard_set_leds(led_status);
    39c4:	0c 94 a9 11 	jmp	0x2352	; 0x2352 <keyboard_set_leds>

000039c8 <hook_bootmagic>:
}

__attribute__((weak))
void hook_bootmagic(void) {}
    39c8:	08 95       	ret

000039ca <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    39ca:	80 91 ed 01 	lds	r24, 0x01ED
    39ce:	84 30       	cpi	r24, 0x04	; 4
    39d0:	21 f1       	breq	.+72     	; 0x3a1a <suspend_power_down+0x50>
#endif
    wdt_timeout = wdto;
    39d2:	10 92 d9 01 	sts	0x01D9, r1

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    39d6:	20 e4       	ldi	r18, 0x40	; 64
    39d8:	88 e1       	ldi	r24, 0x18	; 24
    39da:	90 e0       	ldi	r25, 0x00	; 0
    39dc:	0f b6       	in	r0, 0x3f	; 63
    39de:	f8 94       	cli
    39e0:	a8 95       	wdr
    39e2:	80 93 60 00 	sts	0x0060, r24
    39e6:	0f be       	out	0x3f, r0	; 63
    39e8:	20 93 60 00 	sts	0x0060, r18
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    39ec:	83 b7       	in	r24, 0x33	; 51
    39ee:	81 7f       	andi	r24, 0xF1	; 241
    39f0:	84 60       	ori	r24, 0x04	; 4
    39f2:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    39f4:	83 b7       	in	r24, 0x33	; 51
    39f6:	81 60       	ori	r24, 0x01	; 1
    39f8:	83 bf       	out	0x33, r24	; 51
    sei();
    39fa:	78 94       	sei
    sleep_cpu();
    39fc:	88 95       	sleep
    sleep_disable();
    39fe:	83 b7       	in	r24, 0x33	; 51
    3a00:	8e 7f       	andi	r24, 0xFE	; 254
    3a02:	83 bf       	out	0x33, r24	; 51
    3a04:	0f b6       	in	r0, 0x3f	; 63
    3a06:	f8 94       	cli
    3a08:	a8 95       	wdr
    3a0a:	80 91 60 00 	lds	r24, 0x0060
    3a0e:	88 61       	ori	r24, 0x18	; 24
    3a10:	80 93 60 00 	sts	0x0060, r24
    3a14:	10 92 60 00 	sts	0x0060, r1
    3a18:	0f be       	out	0x3f, r0	; 63
    3a1a:	08 95       	ret

00003a1c <matrix_power_up>:
void suspend_power_down(void)
{
    power_down(WDTO_15MS);
}

__attribute__ ((weak)) void matrix_power_up(void) {}
    3a1c:	08 95       	ret

00003a1e <matrix_power_down>:
__attribute__ ((weak)) void matrix_power_down(void) {}
    3a1e:	08 95       	ret

00003a20 <suspend_wakeup_condition>:
bool suspend_wakeup_condition(void)
{
    3a20:	cf 93       	push	r28
    matrix_power_up();
    3a22:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <matrix_power_up>
    matrix_scan();
    3a26:	0e 94 a8 07 	call	0xf50	; 0xf50 <matrix_scan>
    matrix_power_down();
    3a2a:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3a2e:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    3a30:	8c 2f       	mov	r24, r28
    3a32:	0e 94 45 08 	call	0x108a	; 0x108a <matrix_get_row>
    3a36:	81 11       	cpse	r24, r1
    3a38:	04 c0       	rjmp	.+8      	; 0x3a42 <suspend_wakeup_condition+0x22>
bool suspend_wakeup_condition(void)
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3a3a:	cf 5f       	subi	r28, 0xFF	; 255
    3a3c:	c5 30       	cpi	r28, 0x05	; 5
    3a3e:	c1 f7       	brne	.-16     	; 0x3a30 <suspend_wakeup_condition+0x10>
    3a40:	01 c0       	rjmp	.+2      	; 0x3a44 <suspend_wakeup_condition+0x24>
        if (matrix_get_row(r)) return true;
    3a42:	81 e0       	ldi	r24, 0x01	; 1
    }
    return false;
}
    3a44:	cf 91       	pop	r28
    3a46:	08 95       	ret

00003a48 <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    clear_keyboard();
    3a48:	0c 94 6b 16 	jmp	0x2cd6	; 0x2cd6 <clear_keyboard>

00003a4c <__vector_12>:
}

#ifndef NO_SUSPEND_POWER_DOWN
/* watchdog timeout */
ISR(WDT_vect)
{
    3a4c:	1f 92       	push	r1
    3a4e:	0f 92       	push	r0
    3a50:	0f b6       	in	r0, 0x3f	; 63
    3a52:	0f 92       	push	r0
    3a54:	11 24       	eor	r1, r1
    3a56:	8f 93       	push	r24
    3a58:	9f 93       	push	r25
    3a5a:	af 93       	push	r26
    3a5c:	bf 93       	push	r27
    // compensate timer for sleep
    switch (wdt_timeout) {
    3a5e:	80 91 d9 01 	lds	r24, 0x01D9
    3a62:	81 11       	cpse	r24, r1
    3a64:	13 c0       	rjmp	.+38     	; 0x3a8c <__vector_12+0x40>
        case WDTO_15MS:
            timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
    3a66:	80 91 da 01 	lds	r24, 0x01DA
    3a6a:	90 91 db 01 	lds	r25, 0x01DB
    3a6e:	a0 91 dc 01 	lds	r26, 0x01DC
    3a72:	b0 91 dd 01 	lds	r27, 0x01DD
    3a76:	41 96       	adiw	r24, 0x11	; 17
    3a78:	a1 1d       	adc	r26, r1
    3a7a:	b1 1d       	adc	r27, r1
    3a7c:	80 93 da 01 	sts	0x01DA, r24
    3a80:	90 93 db 01 	sts	0x01DB, r25
    3a84:	a0 93 dc 01 	sts	0x01DC, r26
    3a88:	b0 93 dd 01 	sts	0x01DD, r27
            break;
        default:
            ;
    }
}
    3a8c:	bf 91       	pop	r27
    3a8e:	af 91       	pop	r26
    3a90:	9f 91       	pop	r25
    3a92:	8f 91       	pop	r24
    3a94:	0f 90       	pop	r0
    3a96:	0f be       	out	0x3f, r0	; 63
    3a98:	0f 90       	pop	r0
    3a9a:	1f 90       	pop	r1
    3a9c:	18 95       	reti

00003a9e <timer_init>:
volatile uint32_t timer_count = 0;

void timer_init(void)
{
    // Timer0 CTC mode
    TCCR0A = 0x02;
    3a9e:	82 e0       	ldi	r24, 0x02	; 2
    3aa0:	84 bd       	out	0x24, r24	; 36
#if TIMER_PRESCALER == 1
    TCCR0B = 0x01;
#elif TIMER_PRESCALER == 8
    TCCR0B = 0x02;
#elif TIMER_PRESCALER == 64
    TCCR0B = 0x03;
    3aa2:	93 e0       	ldi	r25, 0x03	; 3
    3aa4:	95 bd       	out	0x25, r25	; 37
    TCCR0B = 0x05;
#else
#   error "Timer prescaler value is NOT vaild."
#endif

    OCR0A = TIMER_RAW_TOP;
    3aa6:	9a ef       	ldi	r25, 0xFA	; 250
    3aa8:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = (1<<OCIE0A);
    3aaa:	80 93 6e 00 	sts	0x006E, r24
    3aae:	08 95       	ret

00003ab0 <timer_read>:
inline
uint16_t timer_read(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    3ab0:	2f b7       	in	r18, 0x3f	; 63
    cli();
    3ab2:	f8 94       	cli
    t = timer_count;
    3ab4:	80 91 da 01 	lds	r24, 0x01DA
    3ab8:	90 91 db 01 	lds	r25, 0x01DB
    3abc:	a0 91 dc 01 	lds	r26, 0x01DC
    3ac0:	b0 91 dd 01 	lds	r27, 0x01DD
    SREG = sreg;
    3ac4:	2f bf       	out	0x3f, r18	; 63

    return (t & 0xFFFF);
}
    3ac6:	08 95       	ret

00003ac8 <timer_read32>:
inline
uint32_t timer_read32(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    3ac8:	2f b7       	in	r18, 0x3f	; 63
    cli();
    3aca:	f8 94       	cli
    t = timer_count;
    3acc:	60 91 da 01 	lds	r22, 0x01DA
    3ad0:	70 91 db 01 	lds	r23, 0x01DB
    3ad4:	80 91 dc 01 	lds	r24, 0x01DC
    3ad8:	90 91 dd 01 	lds	r25, 0x01DD
    SREG = sreg;
    3adc:	2f bf       	out	0x3f, r18	; 63

    return t;
}
    3ade:	08 95       	ret

00003ae0 <timer_elapsed>:

inline
uint16_t timer_elapsed(uint16_t last)
{
    3ae0:	cf 92       	push	r12
    3ae2:	df 92       	push	r13
    3ae4:	ef 92       	push	r14
    3ae6:	ff 92       	push	r15
    3ae8:	0f 93       	push	r16
    3aea:	1f 93       	push	r17
    uint32_t t;

    uint8_t sreg = SREG;
    3aec:	2f b7       	in	r18, 0x3f	; 63
    cli();
    3aee:	f8 94       	cli
    t = timer_count;
    3af0:	40 91 da 01 	lds	r20, 0x01DA
    3af4:	50 91 db 01 	lds	r21, 0x01DB
    3af8:	60 91 dc 01 	lds	r22, 0x01DC
    3afc:	70 91 dd 01 	lds	r23, 0x01DD
    SREG = sreg;
    3b00:	2f bf       	out	0x3f, r18	; 63

    return TIMER_DIFF_16((t & 0xFFFF), last);
    3b02:	6a 01       	movw	r12, r20
    3b04:	7b 01       	movw	r14, r22
    3b06:	ee 24       	eor	r14, r14
    3b08:	ff 24       	eor	r15, r15
    3b0a:	8c 01       	movw	r16, r24
    3b0c:	20 e0       	ldi	r18, 0x00	; 0
    3b0e:	30 e0       	ldi	r19, 0x00	; 0
    3b10:	c0 16       	cp	r12, r16
    3b12:	d1 06       	cpc	r13, r17
    3b14:	e2 06       	cpc	r14, r18
    3b16:	f3 06       	cpc	r15, r19
    3b18:	10 f4       	brcc	.+4      	; 0x3b1e <timer_elapsed+0x3e>
    3b1a:	41 50       	subi	r20, 0x01	; 1
    3b1c:	51 09       	sbc	r21, r1
    3b1e:	9a 01       	movw	r18, r20
    3b20:	28 1b       	sub	r18, r24
    3b22:	39 0b       	sbc	r19, r25
    3b24:	c9 01       	movw	r24, r18
}
    3b26:	1f 91       	pop	r17
    3b28:	0f 91       	pop	r16
    3b2a:	ff 90       	pop	r15
    3b2c:	ef 90       	pop	r14
    3b2e:	df 90       	pop	r13
    3b30:	cf 90       	pop	r12
    3b32:	08 95       	ret

00003b34 <__vector_21>:
    return TIMER_DIFF_32(t, last);
}

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    3b34:	1f 92       	push	r1
    3b36:	0f 92       	push	r0
    3b38:	0f b6       	in	r0, 0x3f	; 63
    3b3a:	0f 92       	push	r0
    3b3c:	11 24       	eor	r1, r1
    3b3e:	8f 93       	push	r24
    3b40:	9f 93       	push	r25
    3b42:	af 93       	push	r26
    3b44:	bf 93       	push	r27
    timer_count++;
    3b46:	80 91 da 01 	lds	r24, 0x01DA
    3b4a:	90 91 db 01 	lds	r25, 0x01DB
    3b4e:	a0 91 dc 01 	lds	r26, 0x01DC
    3b52:	b0 91 dd 01 	lds	r27, 0x01DD
    3b56:	01 96       	adiw	r24, 0x01	; 1
    3b58:	a1 1d       	adc	r26, r1
    3b5a:	b1 1d       	adc	r27, r1
    3b5c:	80 93 da 01 	sts	0x01DA, r24
    3b60:	90 93 db 01 	sts	0x01DB, r25
    3b64:	a0 93 dc 01 	sts	0x01DC, r26
    3b68:	b0 93 dd 01 	sts	0x01DD, r27
}
    3b6c:	bf 91       	pop	r27
    3b6e:	af 91       	pop	r26
    3b70:	9f 91       	pop	r25
    3b72:	8f 91       	pop	r24
    3b74:	0f 90       	pop	r0
    3b76:	0f be       	out	0x3f, r0	; 63
    3b78:	0f 90       	pop	r0
    3b7a:	1f 90       	pop	r1
    3b7c:	18 95       	reti

00003b7e <bootloader_jump>:
uint32_t reset_key  __attribute__ ((section (".noinit")));

/* initialize MCU status by watchdog reset */
void bootloader_jump(void) {
#ifdef PROTOCOL_LUFA
    USB_Disable();
    3b7e:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <USB_Disable>
    cli();
    3b82:	f8 94       	cli
    3b84:	2f ef       	ldi	r18, 0xFF	; 255
    3b86:	87 ea       	ldi	r24, 0xA7	; 167
    3b88:	91 e6       	ldi	r25, 0x61	; 97
    3b8a:	21 50       	subi	r18, 0x01	; 1
    3b8c:	80 40       	sbci	r24, 0x00	; 0
    3b8e:	90 40       	sbci	r25, 0x00	; 0
    3b90:	e1 f7       	brne	.-8      	; 0x3b8a <bootloader_jump+0xc>
    3b92:	00 c0       	rjmp	.+0      	; 0x3b94 <bootloader_jump+0x16>
    3b94:	00 00       	nop
    UCSR1B = 0;
    _delay_ms(5);
#endif

    // watchdog reset
    reset_key = BOOTLOADER_RESET_KEY;
    3b96:	87 e0       	ldi	r24, 0x07	; 7
    3b98:	90 eb       	ldi	r25, 0xB0	; 176
    3b9a:	dc 01       	movw	r26, r24
    3b9c:	80 93 f7 01 	sts	0x01F7, r24
    3ba0:	90 93 f8 01 	sts	0x01F8, r25
    3ba4:	a0 93 f9 01 	sts	0x01F9, r26
    3ba8:	b0 93 fa 01 	sts	0x01FA, r27
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    3bac:	9c e0       	ldi	r25, 0x0C	; 12
    3bae:	88 e1       	ldi	r24, 0x18	; 24
    3bb0:	0f b6       	in	r0, 0x3f	; 63
    3bb2:	f8 94       	cli
    3bb4:	a8 95       	wdr
    3bb6:	80 93 60 00 	sts	0x0060, r24
    3bba:	0f be       	out	0x3f, r0	; 63
    3bbc:	90 93 60 00 	sts	0x0060, r25
    wdt_enable(WDTO_250MS);
    for (;;);
    3bc0:	ff cf       	rjmp	.-2      	; 0x3bc0 <bootloader_jump+0x42>

00003bc2 <keycode_to_action>:


/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    switch (keycode) {
    3bc2:	8d 3b       	cpi	r24, 0xBD	; 189
    3bc4:	60 f4       	brcc	.+24     	; 0x3bde <keycode_to_action+0x1c>
    3bc6:	88 3a       	cpi	r24, 0xA8	; 168
    3bc8:	90 f5       	brcc	.+100    	; 0x3c2e <keycode_to_action+0x6c>
    3bca:	85 3a       	cpi	r24, 0xA5	; 165
    3bcc:	28 f5       	brcc	.+74     	; 0x3c18 <keycode_to_action+0x56>
    3bce:	84 30       	cpi	r24, 0x04	; 4
    3bd0:	08 f5       	brcc	.+66     	; 0x3c14 <keycode_to_action+0x52>
    3bd2:	81 30       	cpi	r24, 0x01	; 1
    3bd4:	09 f0       	breq	.+2      	; 0x3bd8 <keycode_to_action+0x16>
    3bd6:	86 c0       	rjmp	.+268    	; 0x3ce4 <keycode_to_action+0x122>
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            return (action_t)ACTION_MOUSEKEY(keycode);
            break;
        case KC_TRNS:
            return (action_t)ACTION_TRANSPARENT;
    3bd8:	81 e0       	ldi	r24, 0x01	; 1
    3bda:	90 e0       	ldi	r25, 0x00	; 0
    3bdc:	08 95       	ret


/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    switch (keycode) {
    3bde:	88 3e       	cpi	r24, 0xE8	; 232
    3be0:	98 f4       	brcc	.+38     	; 0x3c08 <keycode_to_action+0x46>
    3be2:	80 3e       	cpi	r24, 0xE0	; 224
    3be4:	b8 f4       	brcc	.+46     	; 0x3c14 <keycode_to_action+0x52>
    3be6:	8f 3b       	cpi	r24, 0xBF	; 191
    3be8:	09 f0       	breq	.+2      	; 0x3bec <keycode_to_action+0x2a>
    3bea:	7c c0       	rjmp	.+248    	; 0x3ce4 <keycode_to_action+0x122>
            break;
        case KC_TRNS:
            return (action_t)ACTION_TRANSPARENT;
            break;
        case KC_BOOTLOADER:
            clear_keyboard();
    3bec:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <clear_keyboard>
    3bf0:	2f ef       	ldi	r18, 0xFF	; 255
    3bf2:	80 e7       	ldi	r24, 0x70	; 112
    3bf4:	92 e0       	ldi	r25, 0x02	; 2
    3bf6:	21 50       	subi	r18, 0x01	; 1
    3bf8:	80 40       	sbci	r24, 0x00	; 0
    3bfa:	90 40       	sbci	r25, 0x00	; 0
    3bfc:	e1 f7       	brne	.-8      	; 0x3bf6 <keycode_to_action+0x34>
    3bfe:	00 c0       	rjmp	.+0      	; 0x3c00 <keycode_to_action+0x3e>
    3c00:	00 00       	nop
            wait_ms(50);
            bootloader_jump(); // not return
    3c02:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <bootloader_jump>
    3c06:	6e c0       	rjmp	.+220    	; 0x3ce4 <keycode_to_action+0x122>


/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    switch (keycode) {
    3c08:	80 3f       	cpi	r24, 0xF0	; 240
    3c0a:	08 f4       	brcc	.+2      	; 0x3c0e <keycode_to_action+0x4c>
    3c0c:	6b c0       	rjmp	.+214    	; 0x3ce4 <keycode_to_action+0x122>
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            return (action_t)ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            return (action_t)ACTION_MOUSEKEY(keycode);
    3c0e:	90 e0       	ldi	r25, 0x00	; 0
    3c10:	90 65       	ori	r25, 0x50	; 80
    3c12:	08 95       	ret
static action_t keycode_to_action(uint8_t keycode)
{
    switch (keycode) {
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            return (action_t)ACTION_KEY(keycode);
    3c14:	90 e0       	ldi	r25, 0x00	; 0
    3c16:	08 95       	ret
            break;
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            return (action_t)ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    3c18:	85 3a       	cpi	r24, 0xA5	; 165
    3c1a:	21 f0       	breq	.+8      	; 0x3c24 <keycode_to_action+0x62>
    3c1c:	86 3a       	cpi	r24, 0xA6	; 166
    3c1e:	21 f0       	breq	.+8      	; 0x3c28 <keycode_to_action+0x66>
    3c20:	33 e8       	ldi	r19, 0x83	; 131
    3c22:	03 c0       	rjmp	.+6      	; 0x3c2a <keycode_to_action+0x68>
    3c24:	31 e8       	ldi	r19, 0x81	; 129
    3c26:	01 c0       	rjmp	.+2      	; 0x3c2a <keycode_to_action+0x68>
    3c28:	32 e8       	ldi	r19, 0x82	; 130
    3c2a:	20 e4       	ldi	r18, 0x40	; 64
    3c2c:	58 c0       	rjmp	.+176    	; 0x3cde <keycode_to_action+0x11c>
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            return (action_t)ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    3c2e:	88 3a       	cpi	r24, 0xA8	; 168
    3c30:	51 f1       	breq	.+84     	; 0x3c86 <keycode_to_action+0xc4>
    3c32:	89 3a       	cpi	r24, 0xA9	; 169
    3c34:	59 f1       	breq	.+86     	; 0x3c8c <keycode_to_action+0xca>
    3c36:	8a 3a       	cpi	r24, 0xAA	; 170
    3c38:	59 f1       	breq	.+86     	; 0x3c90 <keycode_to_action+0xce>
    3c3a:	8b 3a       	cpi	r24, 0xAB	; 171
    3c3c:	59 f1       	breq	.+86     	; 0x3c94 <keycode_to_action+0xd2>
    3c3e:	8c 3a       	cpi	r24, 0xAC	; 172
    3c40:	59 f1       	breq	.+86     	; 0x3c98 <keycode_to_action+0xd6>
    3c42:	8d 3a       	cpi	r24, 0xAD	; 173
    3c44:	59 f1       	breq	.+86     	; 0x3c9c <keycode_to_action+0xda>
    3c46:	8e 3a       	cpi	r24, 0xAE	; 174
    3c48:	59 f1       	breq	.+86     	; 0x3ca0 <keycode_to_action+0xde>
    3c4a:	8f 3a       	cpi	r24, 0xAF	; 175
    3c4c:	59 f1       	breq	.+86     	; 0x3ca4 <keycode_to_action+0xe2>
    3c4e:	81 3b       	cpi	r24, 0xB1	; 177
    3c50:	59 f1       	breq	.+86     	; 0x3ca8 <keycode_to_action+0xe6>
    3c52:	80 3b       	cpi	r24, 0xB0	; 176
    3c54:	59 f1       	breq	.+86     	; 0x3cac <keycode_to_action+0xea>
    3c56:	82 3b       	cpi	r24, 0xB2	; 178
    3c58:	59 f1       	breq	.+86     	; 0x3cb0 <keycode_to_action+0xee>
    3c5a:	83 3b       	cpi	r24, 0xB3	; 179
    3c5c:	59 f1       	breq	.+86     	; 0x3cb4 <keycode_to_action+0xf2>
    3c5e:	84 3b       	cpi	r24, 0xB4	; 180
    3c60:	59 f1       	breq	.+86     	; 0x3cb8 <keycode_to_action+0xf6>
    3c62:	85 3b       	cpi	r24, 0xB5	; 181
    3c64:	59 f1       	breq	.+86     	; 0x3cbc <keycode_to_action+0xfa>
    3c66:	86 3b       	cpi	r24, 0xB6	; 182
    3c68:	61 f1       	breq	.+88     	; 0x3cc2 <keycode_to_action+0x100>
    3c6a:	87 3b       	cpi	r24, 0xB7	; 183
    3c6c:	61 f1       	breq	.+88     	; 0x3cc6 <keycode_to_action+0x104>
    3c6e:	88 3b       	cpi	r24, 0xB8	; 184
    3c70:	61 f1       	breq	.+88     	; 0x3cca <keycode_to_action+0x108>
    3c72:	89 3b       	cpi	r24, 0xB9	; 185
    3c74:	61 f1       	breq	.+88     	; 0x3cce <keycode_to_action+0x10c>
    3c76:	8a 3b       	cpi	r24, 0xBA	; 186
    3c78:	61 f1       	breq	.+88     	; 0x3cd2 <keycode_to_action+0x110>
    3c7a:	8b 3b       	cpi	r24, 0xBB	; 187
    3c7c:	61 f1       	breq	.+88     	; 0x3cd6 <keycode_to_action+0x114>
    3c7e:	8c 3b       	cpi	r24, 0xBC	; 188
    3c80:	61 f1       	breq	.+88     	; 0x3cda <keycode_to_action+0x118>
    3c82:	30 e0       	ldi	r19, 0x00	; 0
    3c84:	01 c0       	rjmp	.+2      	; 0x3c88 <keycode_to_action+0xc6>
    3c86:	32 ee       	ldi	r19, 0xE2	; 226
    3c88:	24 e4       	ldi	r18, 0x44	; 68
    3c8a:	29 c0       	rjmp	.+82     	; 0x3cde <keycode_to_action+0x11c>
    3c8c:	39 ee       	ldi	r19, 0xE9	; 233
    3c8e:	fc cf       	rjmp	.-8      	; 0x3c88 <keycode_to_action+0xc6>
    3c90:	3a ee       	ldi	r19, 0xEA	; 234
    3c92:	fa cf       	rjmp	.-12     	; 0x3c88 <keycode_to_action+0xc6>
    3c94:	35 eb       	ldi	r19, 0xB5	; 181
    3c96:	f8 cf       	rjmp	.-16     	; 0x3c88 <keycode_to_action+0xc6>
    3c98:	36 eb       	ldi	r19, 0xB6	; 182
    3c9a:	f6 cf       	rjmp	.-20     	; 0x3c88 <keycode_to_action+0xc6>
    3c9c:	33 eb       	ldi	r19, 0xB3	; 179
    3c9e:	f4 cf       	rjmp	.-24     	; 0x3c88 <keycode_to_action+0xc6>
    3ca0:	34 eb       	ldi	r19, 0xB4	; 180
    3ca2:	f2 cf       	rjmp	.-28     	; 0x3c88 <keycode_to_action+0xc6>
    3ca4:	37 eb       	ldi	r19, 0xB7	; 183
    3ca6:	f0 cf       	rjmp	.-32     	; 0x3c88 <keycode_to_action+0xc6>
    3ca8:	3c ec       	ldi	r19, 0xCC	; 204
    3caa:	ee cf       	rjmp	.-36     	; 0x3c88 <keycode_to_action+0xc6>
    3cac:	3d ec       	ldi	r19, 0xCD	; 205
    3cae:	ec cf       	rjmp	.-40     	; 0x3c88 <keycode_to_action+0xc6>
    3cb0:	33 e8       	ldi	r19, 0x83	; 131
    3cb2:	05 c0       	rjmp	.+10     	; 0x3cbe <keycode_to_action+0xfc>
    3cb4:	3a e8       	ldi	r19, 0x8A	; 138
    3cb6:	03 c0       	rjmp	.+6      	; 0x3cbe <keycode_to_action+0xfc>
    3cb8:	32 e9       	ldi	r19, 0x92	; 146
    3cba:	01 c0       	rjmp	.+2      	; 0x3cbe <keycode_to_action+0xfc>
    3cbc:	34 e9       	ldi	r19, 0x94	; 148
    3cbe:	25 e4       	ldi	r18, 0x45	; 69
    3cc0:	0e c0       	rjmp	.+28     	; 0x3cde <keycode_to_action+0x11c>
    3cc2:	31 e2       	ldi	r19, 0x21	; 33
    3cc4:	0b c0       	rjmp	.+22     	; 0x3cdc <keycode_to_action+0x11a>
    3cc6:	33 e2       	ldi	r19, 0x23	; 35
    3cc8:	09 c0       	rjmp	.+18     	; 0x3cdc <keycode_to_action+0x11a>
    3cca:	34 e2       	ldi	r19, 0x24	; 36
    3ccc:	07 c0       	rjmp	.+14     	; 0x3cdc <keycode_to_action+0x11a>
    3cce:	35 e2       	ldi	r19, 0x25	; 37
    3cd0:	05 c0       	rjmp	.+10     	; 0x3cdc <keycode_to_action+0x11a>
    3cd2:	36 e2       	ldi	r19, 0x26	; 38
    3cd4:	03 c0       	rjmp	.+6      	; 0x3cdc <keycode_to_action+0x11a>
    3cd6:	37 e2       	ldi	r19, 0x27	; 39
    3cd8:	01 c0       	rjmp	.+2      	; 0x3cdc <keycode_to_action+0x11a>
    3cda:	3a e2       	ldi	r19, 0x2A	; 42
    3cdc:	26 e4       	ldi	r18, 0x46	; 70
    3cde:	83 2f       	mov	r24, r19
    3ce0:	92 2f       	mov	r25, r18
    3ce2:	08 95       	ret
            clear_keyboard();
            wait_ms(50);
            bootloader_jump(); // not return
            break;
        default:
            return (action_t)ACTION_NO;
    3ce4:	80 e0       	ldi	r24, 0x00	; 0
    3ce6:	90 e0       	ldi	r25, 0x00	; 0
            break;
    }
    return (action_t)ACTION_NO;
}
    3ce8:	08 95       	ret

00003cea <action_function>:
}

/* Function */
__attribute__ ((weak))
void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    3cea:	08 95       	ret

00003cec <keymap_key_to_keycode>:

__attribute__ ((weak))
uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
#if defined(__AVR__)
    return pgm_read_byte(&keymaps[(layer)][(key.row)][(key.col)]);
    3cec:	95 e0       	ldi	r25, 0x05	; 5
    3cee:	79 9f       	mul	r23, r25
    3cf0:	f0 01       	movw	r30, r0
    3cf2:	11 24       	eor	r1, r1
    3cf4:	99 e1       	ldi	r25, 0x19	; 25
    3cf6:	89 9f       	mul	r24, r25
    3cf8:	e0 0d       	add	r30, r0
    3cfa:	f1 1d       	adc	r31, r1
    3cfc:	11 24       	eor	r1, r1
    3cfe:	e6 0f       	add	r30, r22
    3d00:	f1 1d       	adc	r31, r1
    3d02:	e4 5c       	subi	r30, 0xC4	; 196
    3d04:	fd 4f       	sbci	r31, 0xFD	; 253
    3d06:	84 91       	lpm	r24, Z
#else
    return keymaps[(layer)][(key.row)][(key.col)];
#endif
}
    3d08:	08 95       	ret

00003d0a <keymap_fn_to_action>:

__attribute__ ((weak))
action_t keymap_fn_to_action(uint8_t keycode)
{
#if defined(__AVR__)
    return (action_t)pgm_read_word(&fn_actions[FN_INDEX(keycode)]);
    3d0a:	e8 2f       	mov	r30, r24
    3d0c:	f0 e0       	ldi	r31, 0x00	; 0
    3d0e:	ee 0f       	add	r30, r30
    3d10:	ff 1f       	adc	r31, r31
    3d12:	e4 55       	subi	r30, 0x54	; 84
    3d14:	ff 4f       	sbci	r31, 0xFF	; 255
#else
    return fn_actions[FN_INDEX(keycode)];
#endif
}
    3d16:	85 91       	lpm	r24, Z+
    3d18:	94 91       	lpm	r25, Z
    3d1a:	08 95       	ret

00003d1c <action_for_key>:

/* converts key to action */
__attribute__ ((weak))
action_t action_for_key(uint8_t layer, keypos_t key)
{
    uint8_t keycode = keymap_key_to_keycode(layer, key);
    3d1c:	0e 94 76 1e 	call	0x3cec	; 0x3cec <keymap_key_to_keycode>
    switch (keycode) {
    3d20:	80 3e       	cpi	r24, 0xE0	; 224
    3d22:	a8 f4       	brcc	.+42     	; 0x3d4e <action_for_key+0x32>
    3d24:	80 3c       	cpi	r24, 0xC0	; 192
    3d26:	00 f5       	brcc	.+64     	; 0x3d68 <action_for_key+0x4c>
    3d28:	81 33       	cpi	r24, 0x31	; 49
    3d2a:	09 f4       	brne	.+2      	; 0x3d2e <action_for_key+0x12>
    3d2c:	5c c0       	rjmp	.+184    	; 0x3de6 <action_for_key+0xca>
    3d2e:	38 f4       	brcc	.+14     	; 0x3d3e <action_for_key+0x22>
    3d30:	89 32       	cpi	r24, 0x29	; 41
    3d32:	09 f4       	brne	.+2      	; 0x3d36 <action_for_key+0x1a>
    3d34:	52 c0       	rjmp	.+164    	; 0x3dda <action_for_key+0xbe>
    3d36:	8a 32       	cpi	r24, 0x2A	; 42
    3d38:	09 f4       	brne	.+2      	; 0x3d3c <action_for_key+0x20>
    3d3a:	5b c0       	rjmp	.+182    	; 0x3df2 <action_for_key+0xd6>
    3d3c:	5f c0       	rjmp	.+190    	; 0x3dfc <action_for_key+0xe0>
    3d3e:	89 33       	cpi	r24, 0x39	; 57
    3d40:	b1 f0       	breq	.+44     	; 0x3d6e <action_for_key+0x52>
    3d42:	82 38       	cpi	r24, 0x82	; 130
    3d44:	a1 f0       	breq	.+40     	; 0x3d6e <action_for_key+0x52>
    3d46:	85 33       	cpi	r24, 0x35	; 53
    3d48:	09 f4       	brne	.+2      	; 0x3d4c <action_for_key+0x30>
    3d4a:	41 c0       	rjmp	.+130    	; 0x3dce <action_for_key+0xb2>
    3d4c:	57 c0       	rjmp	.+174    	; 0x3dfc <action_for_key+0xe0>
    3d4e:	83 3e       	cpi	r24, 0xE3	; 227
    3d50:	41 f1       	breq	.+80     	; 0x3da2 <action_for_key+0x86>
    3d52:	28 f4       	brcc	.+10     	; 0x3d5e <action_for_key+0x42>
    3d54:	80 3e       	cpi	r24, 0xE0	; 224
    3d56:	99 f0       	breq	.+38     	; 0x3d7e <action_for_key+0x62>
    3d58:	82 3e       	cpi	r24, 0xE2	; 226
    3d5a:	b9 f0       	breq	.+46     	; 0x3d8a <action_for_key+0x6e>
    3d5c:	4f c0       	rjmp	.+158    	; 0x3dfc <action_for_key+0xe0>
    3d5e:	86 3e       	cpi	r24, 0xE6	; 230
    3d60:	31 f1       	breq	.+76     	; 0x3dae <action_for_key+0x92>
    3d62:	87 3e       	cpi	r24, 0xE7	; 231
    3d64:	71 f1       	breq	.+92     	; 0x3dc2 <action_for_key+0xa6>
    3d66:	4a c0       	rjmp	.+148    	; 0x3dfc <action_for_key+0xe0>
        case KC_FN0 ... KC_FN31:
            return keymap_fn_to_action(keycode);
    3d68:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <keymap_fn_to_action>
    3d6c:	08 95       	ret
#ifdef BOOTMAGIC_ENABLE
        case KC_CAPSLOCK:
        case KC_LOCKING_CAPS:
            if (keymap_config.swap_control_capslock || keymap_config.capslock_to_control) {
    3d6e:	90 91 f6 01 	lds	r25, 0x01F6
    3d72:	90 fd       	sbrc	r25, 0
    3d74:	02 c0       	rjmp	.+4      	; 0x3d7a <action_for_key+0x5e>
    3d76:	91 ff       	sbrs	r25, 1
    3d78:	41 c0       	rjmp	.+130    	; 0x3dfc <action_for_key+0xe0>
                return keycode_to_action(KC_LCTL);
    3d7a:	80 ee       	ldi	r24, 0xE0	; 224
    3d7c:	3f c0       	rjmp	.+126    	; 0x3dfc <action_for_key+0xe0>
            }
            return keycode_to_action(keycode);
        case KC_LCTL:
            if (keymap_config.swap_control_capslock) {
    3d7e:	80 91 f6 01 	lds	r24, 0x01F6
    3d82:	80 ff       	sbrs	r24, 0
    3d84:	fa cf       	rjmp	.-12     	; 0x3d7a <action_for_key+0x5e>
                return keycode_to_action(KC_CAPSLOCK);
    3d86:	89 e3       	ldi	r24, 0x39	; 57
    3d88:	39 c0       	rjmp	.+114    	; 0x3dfc <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LCTL);
        case KC_LALT:
            if (keymap_config.swap_lalt_lgui) {
    3d8a:	80 91 f6 01 	lds	r24, 0x01F6
    3d8e:	82 ff       	sbrs	r24, 2
    3d90:	0c c0       	rjmp	.+24     	; 0x3daa <action_for_key+0x8e>
                if (keymap_config.no_gui) {
    3d92:	80 91 f6 01 	lds	r24, 0x01F6
    3d96:	84 ff       	sbrs	r24, 4
    3d98:	02 c0       	rjmp	.+4      	; 0x3d9e <action_for_key+0x82>
                    return keycode_to_action(KC_NO);
    3d9a:	80 e0       	ldi	r24, 0x00	; 0
    3d9c:	2f c0       	rjmp	.+94     	; 0x3dfc <action_for_key+0xe0>
                }
                return keycode_to_action(KC_LGUI);
    3d9e:	83 ee       	ldi	r24, 0xE3	; 227
    3da0:	2d c0       	rjmp	.+90     	; 0x3dfc <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LALT);
        case KC_LGUI:
            if (keymap_config.swap_lalt_lgui) {
    3da2:	80 91 f6 01 	lds	r24, 0x01F6
    3da6:	82 ff       	sbrs	r24, 2
    3da8:	f4 cf       	rjmp	.-24     	; 0x3d92 <action_for_key+0x76>
                if (keymap_config.no_gui) {
                    return keycode_to_action(KC_NO);
                }
                return keycode_to_action(KC_LGUI);
            }
            return keycode_to_action(KC_LALT);
    3daa:	82 ee       	ldi	r24, 0xE2	; 226
    3dac:	27 c0       	rjmp	.+78     	; 0x3dfc <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(KC_NO);
            }
            return keycode_to_action(KC_LGUI);
        case KC_RALT:
            if (keymap_config.swap_ralt_rgui) {
    3dae:	80 91 f6 01 	lds	r24, 0x01F6
    3db2:	83 ff       	sbrs	r24, 3
    3db4:	0a c0       	rjmp	.+20     	; 0x3dca <action_for_key+0xae>
                if (keymap_config.no_gui) {
    3db6:	80 91 f6 01 	lds	r24, 0x01F6
    3dba:	84 fd       	sbrc	r24, 4
    3dbc:	ee cf       	rjmp	.-36     	; 0x3d9a <action_for_key+0x7e>
                    return keycode_to_action(KC_NO);
                }
                return keycode_to_action(KC_RGUI);
    3dbe:	87 ee       	ldi	r24, 0xE7	; 231
    3dc0:	1d c0       	rjmp	.+58     	; 0x3dfc <action_for_key+0xe0>
            }
            return keycode_to_action(KC_RALT);
        case KC_RGUI:
            if (keymap_config.swap_ralt_rgui) {
    3dc2:	80 91 f6 01 	lds	r24, 0x01F6
    3dc6:	83 ff       	sbrs	r24, 3
    3dc8:	f6 cf       	rjmp	.-20     	; 0x3db6 <action_for_key+0x9a>
                if (keymap_config.no_gui) {
                    return keycode_to_action(KC_NO);
                }
                return keycode_to_action(KC_RGUI);
            }
            return keycode_to_action(KC_RALT);
    3dca:	86 ee       	ldi	r24, 0xE6	; 230
    3dcc:	17 c0       	rjmp	.+46     	; 0x3dfc <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(KC_NO);
            }
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
    3dce:	80 91 f6 01 	lds	r24, 0x01F6
    3dd2:	85 ff       	sbrs	r24, 5
    3dd4:	06 c0       	rjmp	.+12     	; 0x3de2 <action_for_key+0xc6>
                return keycode_to_action(KC_ESC);
    3dd6:	89 e2       	ldi	r24, 0x29	; 41
    3dd8:	11 c0       	rjmp	.+34     	; 0x3dfc <action_for_key+0xe0>
            }
            return keycode_to_action(KC_GRAVE);
        case KC_ESC:
            if (keymap_config.swap_grave_esc) {
    3dda:	80 91 f6 01 	lds	r24, 0x01F6
    3dde:	85 ff       	sbrs	r24, 5
    3de0:	fa cf       	rjmp	.-12     	; 0x3dd6 <action_for_key+0xba>
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_ESC);
            }
            return keycode_to_action(KC_GRAVE);
    3de2:	85 e3       	ldi	r24, 0x35	; 53
    3de4:	0b c0       	rjmp	.+22     	; 0x3dfc <action_for_key+0xe0>
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_GRAVE);
            }
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
    3de6:	80 91 f6 01 	lds	r24, 0x01F6
    3dea:	86 ff       	sbrs	r24, 6
    3dec:	06 c0       	rjmp	.+12     	; 0x3dfa <action_for_key+0xde>
                return keycode_to_action(KC_BSPACE);
    3dee:	8a e2       	ldi	r24, 0x2A	; 42
    3df0:	05 c0       	rjmp	.+10     	; 0x3dfc <action_for_key+0xe0>
            }
            return keycode_to_action(KC_BSLASH);
        case KC_BSPACE:
            if (keymap_config.swap_backslash_backspace) {
    3df2:	80 91 f6 01 	lds	r24, 0x01F6
    3df6:	86 ff       	sbrs	r24, 6
    3df8:	fa cf       	rjmp	.-12     	; 0x3dee <action_for_key+0xd2>
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
                return keycode_to_action(KC_BSPACE);
            }
            return keycode_to_action(KC_BSLASH);
    3dfa:	81 e3       	ldi	r24, 0x31	; 49
                return keycode_to_action(KC_BSLASH);
            }
            return keycode_to_action(KC_BSPACE);
#endif
        default:
            return keycode_to_action(keycode);
    3dfc:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <keycode_to_action>
    }
}
    3e00:	08 95       	ret

00003e02 <scan_key>:
        default_layer_set((uint32_t)default_layer);
    }
}

static bool scan_key(uint16_t code)
{
    3e02:	cf 92       	push	r12
    3e04:	df 92       	push	r13
    3e06:	ef 92       	push	r14
    3e08:	ff 92       	push	r15
    3e0a:	0f 93       	push	r16
    3e0c:	1f 93       	push	r17
    3e0e:	cf 93       	push	r28
    3e10:	6c 01       	movw	r12, r24
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3e12:	c0 e0       	ldi	r28, 0x00	; 0
        matrix_row_t matrix_row = matrix_get_row(r);
    3e14:	8c 2f       	mov	r24, r28
    3e16:	0e 94 45 08 	call	0x108a	; 0x108a <matrix_get_row>
    3e1a:	00 e0       	ldi	r16, 0x00	; 0
    3e1c:	10 e0       	ldi	r17, 0x00	; 0
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    3e1e:	e8 2e       	mov	r14, r24
    3e20:	f1 2c       	mov	r15, r1
    3e22:	c7 01       	movw	r24, r14
    3e24:	00 2e       	mov	r0, r16
    3e26:	02 c0       	rjmp	.+4      	; 0x3e2c <scan_key+0x2a>
    3e28:	95 95       	asr	r25
    3e2a:	87 95       	ror	r24
    3e2c:	0a 94       	dec	r0
    3e2e:	e2 f7       	brpl	.-8      	; 0x3e28 <scan_key+0x26>
    3e30:	80 ff       	sbrs	r24, 0
    3e32:	16 c0       	rjmp	.+44     	; 0x3e60 <scan_key+0x5e>
                // read key from Layer 0
                action_t action = action_for_key(0, (keypos_t){ .row = r, .col = c });
    3e34:	60 2f       	mov	r22, r16
    3e36:	7c 2f       	mov	r23, r28
    3e38:	80 e0       	ldi	r24, 0x00	; 0
    3e3a:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <action_for_key>
    3e3e:	9c 01       	movw	r18, r24
                if (action.code == code ||
    3e40:	8c 15       	cp	r24, r12
    3e42:	9d 05       	cpc	r25, r13
    3e44:	59 f0       	breq	.+22     	; 0x3e5c <scan_key+0x5a>
    3e46:	83 2f       	mov	r24, r19
    3e48:	80 7e       	andi	r24, 0xE0	; 224
    3e4a:	93 2f       	mov	r25, r19
    3e4c:	90 7c       	andi	r25, 0xC0	; 192
    3e4e:	11 f0       	breq	.+4      	; 0x3e54 <scan_key+0x52>
                    ((action.kind.id == ACT_LMODS ||
                      action.kind.id == ACT_RMODS ||
                      action.kind.id == ACT_LMODS_TAP ||
                      action.kind.id == ACT_RMODS_TAP ||
    3e50:	80 3a       	cpi	r24, 0xA0	; 160
    3e52:	31 f4       	brne	.+12     	; 0x3e60 <scan_key+0x5e>
                      action.kind.id == ACT_LAYER_TAP ||
                      action.kind.id == ACT_LAYER_TAP_EXT) &&
                     action.key.code == code)) {
    3e54:	30 e0       	ldi	r19, 0x00	; 0
                    ((action.kind.id == ACT_LMODS ||
                      action.kind.id == ACT_RMODS ||
                      action.kind.id == ACT_LMODS_TAP ||
                      action.kind.id == ACT_RMODS_TAP ||
                      action.kind.id == ACT_LAYER_TAP ||
                      action.kind.id == ACT_LAYER_TAP_EXT) &&
    3e56:	2c 15       	cp	r18, r12
    3e58:	3d 05       	cpc	r19, r13
    3e5a:	11 f4       	brne	.+4      	; 0x3e60 <scan_key+0x5e>
                     action.key.code == code)) {
                    return true;
    3e5c:	81 e0       	ldi	r24, 0x01	; 1
    3e5e:	09 c0       	rjmp	.+18     	; 0x3e72 <scan_key+0x70>
    3e60:	0f 5f       	subi	r16, 0xFF	; 255
    3e62:	1f 4f       	sbci	r17, 0xFF	; 255

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    3e64:	05 30       	cpi	r16, 0x05	; 5
    3e66:	11 05       	cpc	r17, r1
    3e68:	e1 f6       	brne	.-72     	; 0x3e22 <scan_key+0x20>
    }
}

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3e6a:	cf 5f       	subi	r28, 0xFF	; 255
    3e6c:	c5 30       	cpi	r28, 0x05	; 5
    3e6e:	91 f6       	brne	.-92     	; 0x3e14 <scan_key+0x12>
                    return true;
                }
            }
        }
    }
    return false;
    3e70:	80 e0       	ldi	r24, 0x00	; 0
}
    3e72:	cf 91       	pop	r28
    3e74:	1f 91       	pop	r17
    3e76:	0f 91       	pop	r16
    3e78:	ff 90       	pop	r15
    3e7a:	ef 90       	pop	r14
    3e7c:	df 90       	pop	r13
    3e7e:	cf 90       	pop	r12
    3e80:	08 95       	ret

00003e82 <bootmagic_scan_key>:

bool bootmagic_scan_key(uint16_t code)
{
    3e82:	cf 93       	push	r28
    3e84:	df 93       	push	r29
    3e86:	ec 01       	movw	r28, r24
    if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;
    3e88:	8c e2       	ldi	r24, 0x2C	; 44
    3e8a:	90 e0       	ldi	r25, 0x00	; 0
    3e8c:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <scan_key>
    3e90:	88 23       	and	r24, r24
    3e92:	29 f0       	breq	.+10     	; 0x3e9e <bootmagic_scan_key+0x1c>

    return scan_key(code);
    3e94:	ce 01       	movw	r24, r28
}
    3e96:	df 91       	pop	r29
    3e98:	cf 91       	pop	r28

bool bootmagic_scan_key(uint16_t code)
{
    if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;

    return scan_key(code);
    3e9a:	0c 94 01 1f 	jmp	0x3e02	; 0x3e02 <scan_key>
}
    3e9e:	80 e0       	ldi	r24, 0x00	; 0
    3ea0:	df 91       	pop	r29
    3ea2:	cf 91       	pop	r28
    3ea4:	08 95       	ret

00003ea6 <bootmagic>:
#include "hook.h"

keymap_config_t keymap_config;

void bootmagic(void)
{
    3ea6:	cf 93       	push	r28
    /* check signature */
    if (!eeconfig_is_enabled()) {
    3ea8:	0e 94 bb 20 	call	0x4176	; 0x4176 <eeconfig_is_enabled>
    3eac:	81 11       	cpse	r24, r1
    3eae:	02 c0       	rjmp	.+4      	; 0x3eb4 <bootmagic+0xe>
        eeconfig_init();
    3eb0:	0e 94 a1 20 	call	0x4142	; 0x4142 <eeconfig_init>
    }

    /* do scans in case of bounce */
    print("bootmagic scan: ... ");
    3eb4:	8b e5       	ldi	r24, 0x5B	; 91
    3eb6:	95 e0       	ldi	r25, 0x05	; 5
    3eb8:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    uint8_t scan = 100;
    while (scan--) { matrix_scan(); wait_ms(10); }
    3ebc:	c5 e6       	ldi	r28, 0x65	; 101
    3ebe:	c1 50       	subi	r28, 0x01	; 1
    3ec0:	49 f0       	breq	.+18     	; 0x3ed4 <bootmagic+0x2e>
    3ec2:	0e 94 a8 07 	call	0xf50	; 0xf50 <matrix_scan>
    3ec6:	8f e3       	ldi	r24, 0x3F	; 63
    3ec8:	9c e9       	ldi	r25, 0x9C	; 156
    3eca:	01 97       	sbiw	r24, 0x01	; 1
    3ecc:	f1 f7       	brne	.-4      	; 0x3eca <bootmagic+0x24>
    3ece:	00 c0       	rjmp	.+0      	; 0x3ed0 <bootmagic+0x2a>
    3ed0:	00 00       	nop
    3ed2:	f5 cf       	rjmp	.-22     	; 0x3ebe <bootmagic+0x18>
    print("done.\n");
    3ed4:	84 e5       	ldi	r24, 0x54	; 84
    3ed6:	95 e0       	ldi	r25, 0x05	; 5
    3ed8:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>

    /* bootmagic skip */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SKIP)) {
    3edc:	89 e2       	ldi	r24, 0x29	; 41
    3ede:	90 e0       	ldi	r25, 0x00	; 0
    3ee0:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <bootmagic_scan_key>
    3ee4:	81 11       	cpse	r24, r1
    3ee6:	2b c1       	rjmp	.+598    	; 0x413e <bootmagic+0x298>
        return;
    }

    /* eeconfig clear */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
    3ee8:	8a e2       	ldi	r24, 0x2A	; 42
    3eea:	90 e0       	ldi	r25, 0x00	; 0
    3eec:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <bootmagic_scan_key>
    3ef0:	81 11       	cpse	r24, r1
        eeconfig_init();
    3ef2:	0e 94 a1 20 	call	0x4142	; 0x4142 <eeconfig_init>
    }

    /* bootloader */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_BOOTLOADER)) {
    3ef6:	85 e0       	ldi	r24, 0x05	; 5
    3ef8:	90 e0       	ldi	r25, 0x00	; 0
    3efa:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <bootmagic_scan_key>
    3efe:	81 11       	cpse	r24, r1
        bootloader_jump();
    3f00:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <bootloader_jump>
    }

    /* user-defined checks */
    hook_bootmagic();
    3f04:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <hook_bootmagic>

    /* debug enable */
    debug_config.raw = eeconfig_read_debug();
    3f08:	0e 94 c6 20 	call	0x418c	; 0x418c <eeconfig_read_debug>
    3f0c:	80 93 d8 01 	sts	0x01D8, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
    3f10:	87 e0       	ldi	r24, 0x07	; 7
    3f12:	90 e0       	ldi	r25, 0x00	; 0
    3f14:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <bootmagic_scan_key>
    3f18:	88 23       	and	r24, r24
    3f1a:	c1 f1       	breq	.+112    	; 0x3f8c <bootmagic+0xe6>
        if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
    3f1c:	8b e1       	ldi	r24, 0x1B	; 27
    3f1e:	90 e0       	ldi	r25, 0x00	; 0
    3f20:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <bootmagic_scan_key>
    3f24:	88 23       	and	r24, r24
    3f26:	51 f0       	breq	.+20     	; 0x3f3c <bootmagic+0x96>
            debug_config.matrix = !debug_config.matrix;
    3f28:	80 91 d8 01 	lds	r24, 0x01D8
    3f2c:	81 fb       	bst	r24, 1
    3f2e:	22 27       	eor	r18, r18
    3f30:	20 f9       	bld	r18, 0
    3f32:	91 e0       	ldi	r25, 0x01	; 1
    3f34:	92 27       	eor	r25, r18
    3f36:	90 fb       	bst	r25, 0
    3f38:	81 f9       	bld	r24, 1
    3f3a:	0f c0       	rjmp	.+30     	; 0x3f5a <bootmagic+0xb4>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
    3f3c:	8e e0       	ldi	r24, 0x0E	; 14
    3f3e:	90 e0       	ldi	r25, 0x00	; 0
    3f40:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <bootmagic_scan_key>
    3f44:	88 23       	and	r24, r24
    3f46:	61 f0       	breq	.+24     	; 0x3f60 <bootmagic+0xba>
            debug_config.keyboard = !debug_config.keyboard;
    3f48:	80 91 d8 01 	lds	r24, 0x01D8
    3f4c:	82 fb       	bst	r24, 2
    3f4e:	22 27       	eor	r18, r18
    3f50:	20 f9       	bld	r18, 0
    3f52:	91 e0       	ldi	r25, 0x01	; 1
    3f54:	92 27       	eor	r25, r18
    3f56:	90 fb       	bst	r25, 0
    3f58:	82 f9       	bld	r24, 2
    3f5a:	80 93 d8 01 	sts	0x01D8, r24
    3f5e:	16 c0       	rjmp	.+44     	; 0x3f8c <bootmagic+0xe6>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
    3f60:	80 e1       	ldi	r24, 0x10	; 16
    3f62:	90 e0       	ldi	r25, 0x00	; 0
    3f64:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <bootmagic_scan_key>
    3f68:	90 91 d8 01 	lds	r25, 0x01D8
    3f6c:	88 23       	and	r24, r24
    3f6e:	41 f0       	breq	.+16     	; 0x3f80 <bootmagic+0xda>
            debug_config.mouse = !debug_config.mouse;
    3f70:	93 fb       	bst	r25, 3
    3f72:	22 27       	eor	r18, r18
    3f74:	20 f9       	bld	r18, 0
    3f76:	81 e0       	ldi	r24, 0x01	; 1
    3f78:	82 27       	eor	r24, r18
    3f7a:	80 fb       	bst	r24, 0
    3f7c:	93 f9       	bld	r25, 3
    3f7e:	04 c0       	rjmp	.+8      	; 0x3f88 <bootmagic+0xe2>
        } else {
            debug_config.enable = !debug_config.enable;
    3f80:	89 2f       	mov	r24, r25
    3f82:	80 95       	com	r24
    3f84:	80 fb       	bst	r24, 0
    3f86:	90 f9       	bld	r25, 0
    3f88:	90 93 d8 01 	sts	0x01D8, r25
        }
    }
    eeconfig_write_debug(debug_config.raw);
    3f8c:	80 91 d8 01 	lds	r24, 0x01D8
    3f90:	0e 94 ca 20 	call	0x4194	; 0x4194 <eeconfig_write_debug>

    /* keymap config */
    keymap_config.raw = eeconfig_read_keymap();
    3f94:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <eeconfig_read_keymap>
    3f98:	80 93 f6 01 	sts	0x01F6, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
    3f9c:	80 ee       	ldi	r24, 0xE0	; 224
    3f9e:	90 e0       	ldi	r25, 0x00	; 0
    3fa0:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <bootmagic_scan_key>
    3fa4:	88 23       	and	r24, r24
    3fa6:	41 f0       	breq	.+16     	; 0x3fb8 <bootmagic+0x112>
        keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
    3fa8:	80 91 f6 01 	lds	r24, 0x01F6
    3fac:	98 2f       	mov	r25, r24
    3fae:	90 95       	com	r25
    3fb0:	90 fb       	bst	r25, 0
    3fb2:	80 f9       	bld	r24, 0
    3fb4:	80 93 f6 01 	sts	0x01F6, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
    3fb8:	89 e3       	ldi	r24, 0x39	; 57
    3fba:	90 e0       	ldi	r25, 0x00	; 0
    3fbc:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <bootmagic_scan_key>
    3fc0:	88 23       	and	r24, r24
    3fc2:	59 f0       	breq	.+22     	; 0x3fda <bootmagic+0x134>
        keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
    3fc4:	80 91 f6 01 	lds	r24, 0x01F6
    3fc8:	81 fb       	bst	r24, 1
    3fca:	22 27       	eor	r18, r18
    3fcc:	20 f9       	bld	r18, 0
    3fce:	91 e0       	ldi	r25, 0x01	; 1
    3fd0:	92 27       	eor	r25, r18
    3fd2:	90 fb       	bst	r25, 0
    3fd4:	81 f9       	bld	r24, 1
    3fd6:	80 93 f6 01 	sts	0x01F6, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
    3fda:	82 ee       	ldi	r24, 0xE2	; 226
    3fdc:	90 e0       	ldi	r25, 0x00	; 0
    3fde:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <bootmagic_scan_key>
    3fe2:	88 23       	and	r24, r24
    3fe4:	59 f0       	breq	.+22     	; 0x3ffc <bootmagic+0x156>
        keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
    3fe6:	80 91 f6 01 	lds	r24, 0x01F6
    3fea:	82 fb       	bst	r24, 2
    3fec:	22 27       	eor	r18, r18
    3fee:	20 f9       	bld	r18, 0
    3ff0:	91 e0       	ldi	r25, 0x01	; 1
    3ff2:	92 27       	eor	r25, r18
    3ff4:	90 fb       	bst	r25, 0
    3ff6:	82 f9       	bld	r24, 2
    3ff8:	80 93 f6 01 	sts	0x01F6, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
    3ffc:	86 ee       	ldi	r24, 0xE6	; 230
    3ffe:	90 e0       	ldi	r25, 0x00	; 0
    4000:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <bootmagic_scan_key>
    4004:	88 23       	and	r24, r24
    4006:	59 f0       	breq	.+22     	; 0x401e <bootmagic+0x178>
        keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
    4008:	80 91 f6 01 	lds	r24, 0x01F6
    400c:	83 fb       	bst	r24, 3
    400e:	22 27       	eor	r18, r18
    4010:	20 f9       	bld	r18, 0
    4012:	91 e0       	ldi	r25, 0x01	; 1
    4014:	92 27       	eor	r25, r18
    4016:	90 fb       	bst	r25, 0
    4018:	83 f9       	bld	r24, 3
    401a:	80 93 f6 01 	sts	0x01F6, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_NO_GUI)) {
    401e:	83 ee       	ldi	r24, 0xE3	; 227
    4020:	90 e0       	ldi	r25, 0x00	; 0
    4022:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <bootmagic_scan_key>
    4026:	88 23       	and	r24, r24
    4028:	59 f0       	breq	.+22     	; 0x4040 <bootmagic+0x19a>
        keymap_config.no_gui = !keymap_config.no_gui;
    402a:	80 91 f6 01 	lds	r24, 0x01F6
    402e:	84 fb       	bst	r24, 4
    4030:	22 27       	eor	r18, r18
    4032:	20 f9       	bld	r18, 0
    4034:	91 e0       	ldi	r25, 0x01	; 1
    4036:	92 27       	eor	r25, r18
    4038:	90 fb       	bst	r25, 0
    403a:	84 f9       	bld	r24, 4
    403c:	80 93 f6 01 	sts	0x01F6, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
    4040:	85 e3       	ldi	r24, 0x35	; 53
    4042:	90 e0       	ldi	r25, 0x00	; 0
    4044:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <bootmagic_scan_key>
    4048:	88 23       	and	r24, r24
    404a:	59 f0       	breq	.+22     	; 0x4062 <bootmagic+0x1bc>
        keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
    404c:	80 91 f6 01 	lds	r24, 0x01F6
    4050:	85 fb       	bst	r24, 5
    4052:	22 27       	eor	r18, r18
    4054:	20 f9       	bld	r18, 0
    4056:	91 e0       	ldi	r25, 0x01	; 1
    4058:	92 27       	eor	r25, r18
    405a:	90 fb       	bst	r25, 0
    405c:	85 f9       	bld	r24, 5
    405e:	80 93 f6 01 	sts	0x01F6, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
    4062:	81 e3       	ldi	r24, 0x31	; 49
    4064:	90 e0       	ldi	r25, 0x00	; 0
    4066:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <bootmagic_scan_key>
    406a:	88 23       	and	r24, r24
    406c:	59 f0       	breq	.+22     	; 0x4084 <bootmagic+0x1de>
        keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
    406e:	80 91 f6 01 	lds	r24, 0x01F6
    4072:	86 fb       	bst	r24, 6
    4074:	22 27       	eor	r18, r18
    4076:	20 f9       	bld	r18, 0
    4078:	91 e0       	ldi	r25, 0x01	; 1
    407a:	92 27       	eor	r25, r18
    407c:	90 fb       	bst	r25, 0
    407e:	86 f9       	bld	r24, 6
    4080:	80 93 f6 01 	sts	0x01F6, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_HOST_NKRO)) {
    4084:	81 e1       	ldi	r24, 0x11	; 17
    4086:	90 e0       	ldi	r25, 0x00	; 0
    4088:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <bootmagic_scan_key>
    408c:	88 23       	and	r24, r24
    408e:	59 f0       	breq	.+22     	; 0x40a6 <bootmagic+0x200>
        keymap_config.nkro = !keymap_config.nkro;
    4090:	80 91 f6 01 	lds	r24, 0x01F6
    4094:	87 fb       	bst	r24, 7
    4096:	22 27       	eor	r18, r18
    4098:	20 f9       	bld	r18, 0
    409a:	91 e0       	ldi	r25, 0x01	; 1
    409c:	92 27       	eor	r25, r18
    409e:	90 fb       	bst	r25, 0
    40a0:	87 f9       	bld	r24, 7
    40a2:	80 93 f6 01 	sts	0x01F6, r24
    }
    eeconfig_write_keymap(keymap_config.raw);
    40a6:	80 91 f6 01 	lds	r24, 0x01F6
    40aa:	0e 94 dc 20 	call	0x41b8	; 0x41b8 <eeconfig_write_keymap>

#ifdef NKRO_ENABLE
    keyboard_nkro = keymap_config.nkro;
    40ae:	80 91 f6 01 	lds	r24, 0x01F6
    40b2:	87 fb       	bst	r24, 7
    40b4:	88 27       	eor	r24, r24
    40b6:	80 f9       	bld	r24, 0
    40b8:	80 93 0c 01 	sts	0x010C, r24
#endif

    /* default layer */
    uint8_t default_layer = 0;
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
    40bc:	87 e2       	ldi	r24, 0x27	; 39
    40be:	90 e0       	ldi	r25, 0x00	; 0
    40c0:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <bootmagic_scan_key>
    40c4:	c8 2f       	mov	r28, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
    40c6:	8e e1       	ldi	r24, 0x1E	; 30
    40c8:	90 e0       	ldi	r25, 0x00	; 0
    40ca:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <bootmagic_scan_key>
    40ce:	81 11       	cpse	r24, r1
    40d0:	c2 60       	ori	r28, 0x02	; 2
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
    40d2:	8f e1       	ldi	r24, 0x1F	; 31
    40d4:	90 e0       	ldi	r25, 0x00	; 0
    40d6:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <bootmagic_scan_key>
    40da:	81 11       	cpse	r24, r1
    40dc:	c4 60       	ori	r28, 0x04	; 4
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
    40de:	80 e2       	ldi	r24, 0x20	; 32
    40e0:	90 e0       	ldi	r25, 0x00	; 0
    40e2:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <bootmagic_scan_key>
    40e6:	81 11       	cpse	r24, r1
    40e8:	c8 60       	ori	r28, 0x08	; 8
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
    40ea:	81 e2       	ldi	r24, 0x21	; 33
    40ec:	90 e0       	ldi	r25, 0x00	; 0
    40ee:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <bootmagic_scan_key>
    40f2:	81 11       	cpse	r24, r1
    40f4:	c0 61       	ori	r28, 0x10	; 16
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
    40f6:	82 e2       	ldi	r24, 0x22	; 34
    40f8:	90 e0       	ldi	r25, 0x00	; 0
    40fa:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <bootmagic_scan_key>
    40fe:	81 11       	cpse	r24, r1
    4100:	c0 62       	ori	r28, 0x20	; 32
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
    4102:	83 e2       	ldi	r24, 0x23	; 35
    4104:	90 e0       	ldi	r25, 0x00	; 0
    4106:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <bootmagic_scan_key>
    410a:	81 11       	cpse	r24, r1
    410c:	c0 64       	ori	r28, 0x40	; 64
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
    410e:	84 e2       	ldi	r24, 0x24	; 36
    4110:	90 e0       	ldi	r25, 0x00	; 0
    4112:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <bootmagic_scan_key>
    4116:	88 23       	and	r24, r24
    4118:	11 f0       	breq	.+4      	; 0x411e <bootmagic+0x278>
    411a:	c0 68       	ori	r28, 0x80	; 128
    411c:	02 c0       	rjmp	.+4      	; 0x4122 <bootmagic+0x27c>
    if (default_layer) {
    411e:	cc 23       	and	r28, r28
    4120:	29 f0       	breq	.+10     	; 0x412c <bootmagic+0x286>
        eeconfig_write_default_layer(default_layer);
    4122:	8c 2f       	mov	r24, r28
    4124:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <eeconfig_write_default_layer>
        default_layer_set((uint32_t)default_layer);
    4128:	6c 2f       	mov	r22, r28
    412a:	03 c0       	rjmp	.+6      	; 0x4132 <bootmagic+0x28c>
    } else {
        default_layer = eeconfig_read_default_layer();
    412c:	0e 94 cf 20 	call	0x419e	; 0x419e <eeconfig_read_default_layer>
        default_layer_set((uint32_t)default_layer);
    4130:	68 2f       	mov	r22, r24
    4132:	70 e0       	ldi	r23, 0x00	; 0
    4134:	80 e0       	ldi	r24, 0x00	; 0
    4136:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    4138:	cf 91       	pop	r28
    if (default_layer) {
        eeconfig_write_default_layer(default_layer);
        default_layer_set((uint32_t)default_layer);
    } else {
        default_layer = eeconfig_read_default_layer();
        default_layer_set((uint32_t)default_layer);
    413a:	0c 94 5f 1a 	jmp	0x34be	; 0x34be <default_layer_set>
    }
}
    413e:	cf 91       	pop	r28
    4140:	08 95       	ret

00004142 <eeconfig_init>:
#include <avr/eeprom.h>
#include "eeconfig.h"

void eeconfig_init(void)
{
    eeprom_write_word(EECONFIG_MAGIC,          EECONFIG_MAGIC_NUMBER);
    4142:	6d ee       	ldi	r22, 0xED	; 237
    4144:	7e ef       	ldi	r23, 0xFE	; 254
    4146:	80 e0       	ldi	r24, 0x00	; 0
    4148:	90 e0       	ldi	r25, 0x00	; 0
    414a:	0e 94 39 2a 	call	0x5472	; 0x5472 <eeprom_write_word>
    eeprom_write_byte(EECONFIG_DEBUG,          0);
    414e:	60 e0       	ldi	r22, 0x00	; 0
    4150:	82 e0       	ldi	r24, 0x02	; 2
    4152:	90 e0       	ldi	r25, 0x00	; 0
    4154:	0e 94 2b 2a 	call	0x5456	; 0x5456 <eeprom_write_byte>
    eeprom_write_byte(EECONFIG_DEFAULT_LAYER,  0);
    4158:	60 e0       	ldi	r22, 0x00	; 0
    415a:	83 e0       	ldi	r24, 0x03	; 3
    415c:	90 e0       	ldi	r25, 0x00	; 0
    415e:	0e 94 2b 2a 	call	0x5456	; 0x5456 <eeprom_write_byte>
    eeprom_write_byte(EECONFIG_KEYMAP,         0);
    4162:	60 e0       	ldi	r22, 0x00	; 0
    4164:	84 e0       	ldi	r24, 0x04	; 4
    4166:	90 e0       	ldi	r25, 0x00	; 0
    4168:	0e 94 2b 2a 	call	0x5456	; 0x5456 <eeprom_write_byte>
    eeprom_write_byte(EECONFIG_MOUSEKEY_ACCEL, 0);
    416c:	60 e0       	ldi	r22, 0x00	; 0
    416e:	85 e0       	ldi	r24, 0x05	; 5
    4170:	90 e0       	ldi	r25, 0x00	; 0
    4172:	0c 94 2b 2a 	jmp	0x5456	; 0x5456 <eeprom_write_byte>

00004176 <eeconfig_is_enabled>:
    eeprom_write_word(EECONFIG_MAGIC, 0xFFFF);
}

bool eeconfig_is_enabled(void)
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
    4176:	80 e0       	ldi	r24, 0x00	; 0
    4178:	90 e0       	ldi	r25, 0x00	; 0
    417a:	0e 94 25 2a 	call	0x544a	; 0x544a <eeprom_read_word>
    417e:	21 e0       	ldi	r18, 0x01	; 1
    4180:	8d 3e       	cpi	r24, 0xED	; 237
    4182:	9e 4f       	sbci	r25, 0xFE	; 254
    4184:	09 f0       	breq	.+2      	; 0x4188 <eeconfig_is_enabled+0x12>
    4186:	20 e0       	ldi	r18, 0x00	; 0
}
    4188:	82 2f       	mov	r24, r18
    418a:	08 95       	ret

0000418c <eeconfig_read_debug>:

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
    418c:	82 e0       	ldi	r24, 0x02	; 2
    418e:	90 e0       	ldi	r25, 0x00	; 0
    4190:	0c 94 1d 2a 	jmp	0x543a	; 0x543a <eeprom_read_byte>

00004194 <eeconfig_write_debug>:
void eeconfig_write_debug(uint8_t val) { eeprom_write_byte(EECONFIG_DEBUG, val); }
    4194:	68 2f       	mov	r22, r24
    4196:	82 e0       	ldi	r24, 0x02	; 2
    4198:	90 e0       	ldi	r25, 0x00	; 0
    419a:	0c 94 2b 2a 	jmp	0x5456	; 0x5456 <eeprom_write_byte>

0000419e <eeconfig_read_default_layer>:

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
    419e:	83 e0       	ldi	r24, 0x03	; 3
    41a0:	90 e0       	ldi	r25, 0x00	; 0
    41a2:	0c 94 1d 2a 	jmp	0x543a	; 0x543a <eeprom_read_byte>

000041a6 <eeconfig_write_default_layer>:
void eeconfig_write_default_layer(uint8_t val) { eeprom_write_byte(EECONFIG_DEFAULT_LAYER, val); }
    41a6:	68 2f       	mov	r22, r24
    41a8:	83 e0       	ldi	r24, 0x03	; 3
    41aa:	90 e0       	ldi	r25, 0x00	; 0
    41ac:	0c 94 2b 2a 	jmp	0x5456	; 0x5456 <eeprom_write_byte>

000041b0 <eeconfig_read_keymap>:

uint8_t eeconfig_read_keymap(void)      { return eeprom_read_byte(EECONFIG_KEYMAP); }
    41b0:	84 e0       	ldi	r24, 0x04	; 4
    41b2:	90 e0       	ldi	r25, 0x00	; 0
    41b4:	0c 94 1d 2a 	jmp	0x543a	; 0x543a <eeprom_read_byte>

000041b8 <eeconfig_write_keymap>:
void eeconfig_write_keymap(uint8_t val) { eeprom_write_byte(EECONFIG_KEYMAP, val); }
    41b8:	68 2f       	mov	r22, r24
    41ba:	84 e0       	ldi	r24, 0x04	; 4
    41bc:	90 e0       	ldi	r25, 0x00	; 0
    41be:	0c 94 2b 2a 	jmp	0x5456	; 0x5456 <eeprom_write_byte>

000041c2 <move_unit>:


static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    41c2:	80 91 e0 01 	lds	r24, 0x01E0
    41c6:	80 ff       	sbrs	r24, 0
    41c8:	0b c0       	rjmp	.+22     	; 0x41e0 <move_unit+0x1e>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    41ca:	60 91 12 01 	lds	r22, 0x0112
    41ce:	85 e0       	ldi	r24, 0x05	; 5
    41d0:	68 9f       	mul	r22, r24
    41d2:	b0 01       	movw	r22, r0
    41d4:	11 24       	eor	r1, r1
    41d6:	75 95       	asr	r23
    41d8:	67 95       	ror	r22
    41da:	75 95       	asr	r23
    41dc:	67 95       	ror	r22
    41de:	2b c0       	rjmp	.+86     	; 0x4236 <move_unit+0x74>
    } else if (mousekey_accel & (1<<1)) {
    41e0:	81 ff       	sbrs	r24, 1
    41e2:	09 c0       	rjmp	.+18     	; 0x41f6 <move_unit+0x34>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    41e4:	60 91 12 01 	lds	r22, 0x0112
    41e8:	85 e0       	ldi	r24, 0x05	; 5
    41ea:	68 9f       	mul	r22, r24
    41ec:	b0 01       	movw	r22, r0
    41ee:	11 24       	eor	r1, r1
    41f0:	75 95       	asr	r23
    41f2:	67 95       	ror	r22
    41f4:	20 c0       	rjmp	.+64     	; 0x4236 <move_unit+0x74>
    } else if (mousekey_accel & (1<<2)) {
    41f6:	82 ff       	sbrs	r24, 2
    41f8:	07 c0       	rjmp	.+14     	; 0x4208 <move_unit+0x46>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    41fa:	60 91 12 01 	lds	r22, 0x0112
    41fe:	85 e0       	ldi	r24, 0x05	; 5
    4200:	68 9f       	mul	r22, r24
    4202:	b0 01       	movw	r22, r0
    4204:	11 24       	eor	r1, r1
    4206:	17 c0       	rjmp	.+46     	; 0x4236 <move_unit+0x74>
    } else if (mousekey_repeat == 0) {
    4208:	90 91 e1 01 	lds	r25, 0x01E1
    420c:	99 23       	and	r25, r25
    420e:	d1 f0       	breq	.+52     	; 0x4244 <move_unit+0x82>
        unit = MOUSEKEY_MOVE_DELTA;
    } else if (mousekey_repeat >= mk_time_to_max) {
    4210:	60 91 11 01 	lds	r22, 0x0111
    4214:	96 17       	cp	r25, r22
    4216:	88 f7       	brcc	.-30     	; 0x41fa <move_unit+0x38>
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    4218:	20 91 12 01 	lds	r18, 0x0112
    421c:	85 e0       	ldi	r24, 0x05	; 5
    421e:	28 9f       	mul	r18, r24
    4220:	90 01       	movw	r18, r0
    4222:	11 24       	eor	r1, r1
    4224:	92 9f       	mul	r25, r18
    4226:	a0 01       	movw	r20, r0
    4228:	93 9f       	mul	r25, r19
    422a:	50 0d       	add	r21, r0
    422c:	11 24       	eor	r1, r1
    422e:	70 e0       	ldi	r23, 0x00	; 0
    4230:	ca 01       	movw	r24, r20
    4232:	0e 94 ef 29 	call	0x53de	; 0x53de <__divmodhi4>
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    4236:	60 38       	cpi	r22, 0x80	; 128
    4238:	71 05       	cpc	r23, r1
    423a:	40 f4       	brcc	.+16     	; 0x424c <move_unit+0x8a>
    423c:	61 15       	cp	r22, r1
    423e:	71 05       	cpc	r23, r1
    4240:	39 f0       	breq	.+14     	; 0x4250 <move_unit+0x8e>
    4242:	02 c0       	rjmp	.+4      	; 0x4248 <move_unit+0x86>
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_MOVE_DELTA;
    4244:	65 e0       	ldi	r22, 0x05	; 5
    4246:	70 e0       	ldi	r23, 0x00	; 0
    } else if (mousekey_repeat >= mk_time_to_max) {
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    4248:	86 2f       	mov	r24, r22
    424a:	08 95       	ret
    424c:	8f e7       	ldi	r24, 0x7F	; 127
    424e:	08 95       	ret
    4250:	81 e0       	ldi	r24, 0x01	; 1
}
    4252:	08 95       	ret

00004254 <wheel_unit>:

static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    4254:	80 91 e0 01 	lds	r24, 0x01E0
    4258:	80 ff       	sbrs	r24, 0
    425a:	08 c0       	rjmp	.+16     	; 0x426c <wheel_unit+0x18>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    425c:	60 91 10 01 	lds	r22, 0x0110
    4260:	70 e0       	ldi	r23, 0x00	; 0
    4262:	75 95       	asr	r23
    4264:	67 95       	ror	r22
    4266:	75 95       	asr	r23
    4268:	67 95       	ror	r22
    426a:	21 c0       	rjmp	.+66     	; 0x42ae <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<1)) {
    426c:	81 ff       	sbrs	r24, 1
    426e:	06 c0       	rjmp	.+12     	; 0x427c <wheel_unit+0x28>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    4270:	60 91 10 01 	lds	r22, 0x0110
    4274:	70 e0       	ldi	r23, 0x00	; 0
    4276:	75 95       	asr	r23
    4278:	67 95       	ror	r22
    427a:	19 c0       	rjmp	.+50     	; 0x42ae <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<2)) {
    427c:	82 ff       	sbrs	r24, 2
    427e:	04 c0       	rjmp	.+8      	; 0x4288 <wheel_unit+0x34>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    4280:	60 91 10 01 	lds	r22, 0x0110
    4284:	70 e0       	ldi	r23, 0x00	; 0
    4286:	10 c0       	rjmp	.+32     	; 0x42a8 <wheel_unit+0x54>
    } else if (mousekey_repeat == 0) {
    4288:	90 91 e1 01 	lds	r25, 0x01E1
    428c:	99 23       	and	r25, r25
    428e:	c1 f0       	breq	.+48     	; 0x42c0 <wheel_unit+0x6c>
        unit = MOUSEKEY_WHEEL_DELTA;
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
    4290:	60 91 0f 01 	lds	r22, 0x010F
    4294:	96 17       	cp	r25, r22
    4296:	a0 f7       	brcc	.-24     	; 0x4280 <wheel_unit+0x2c>
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    4298:	80 91 10 01 	lds	r24, 0x0110
    429c:	89 9f       	mul	r24, r25
    429e:	c0 01       	movw	r24, r0
    42a0:	11 24       	eor	r1, r1
    42a2:	70 e0       	ldi	r23, 0x00	; 0
    42a4:	0e 94 ef 29 	call	0x53de	; 0x53de <__divmodhi4>
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    42a8:	60 38       	cpi	r22, 0x80	; 128
    42aa:	71 05       	cpc	r23, r1
    42ac:	28 f4       	brcc	.+10     	; 0x42b8 <wheel_unit+0x64>
    42ae:	61 15       	cp	r22, r1
    42b0:	71 05       	cpc	r23, r1
    42b2:	21 f0       	breq	.+8      	; 0x42bc <wheel_unit+0x68>
    42b4:	86 2f       	mov	r24, r22
    42b6:	08 95       	ret
    42b8:	8f e7       	ldi	r24, 0x7F	; 127
    42ba:	08 95       	ret
    42bc:	81 e0       	ldi	r24, 0x01	; 1
    42be:	08 95       	ret
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_WHEEL_DELTA;
    42c0:	61 e0       	ldi	r22, 0x01	; 1
    42c2:	70 e0       	ldi	r23, 0x00	; 0
    42c4:	f4 cf       	rjmp	.-24     	; 0x42ae <wheel_unit+0x5a>

000042c6 <mousekey_on>:
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    42c6:	80 3f       	cpi	r24, 0xF0	; 240
    42c8:	21 f4       	brne	.+8      	; 0x42d2 <mousekey_on+0xc>
    42ca:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <move_unit>
    42ce:	81 95       	neg	r24
    42d0:	04 c0       	rjmp	.+8      	; 0x42da <mousekey_on+0x14>
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    42d2:	81 3f       	cpi	r24, 0xF1	; 241
    42d4:	29 f4       	brne	.+10     	; 0x42e0 <mousekey_on+0x1a>
    42d6:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <move_unit>
    42da:	80 93 e4 01 	sts	0x01E4, r24
    42de:	08 95       	ret
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    42e0:	82 3f       	cpi	r24, 0xF2	; 242
    42e2:	21 f4       	brne	.+8      	; 0x42ec <mousekey_on+0x26>
    42e4:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <move_unit>
    42e8:	81 95       	neg	r24
    42ea:	04 c0       	rjmp	.+8      	; 0x42f4 <mousekey_on+0x2e>
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    42ec:	83 3f       	cpi	r24, 0xF3	; 243
    42ee:	29 f4       	brne	.+10     	; 0x42fa <mousekey_on+0x34>
    42f0:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <move_unit>
    42f4:	80 93 e3 01 	sts	0x01E3, r24
    42f8:	08 95       	ret
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    42fa:	89 3f       	cpi	r24, 0xF9	; 249
    42fc:	19 f4       	brne	.+6      	; 0x4304 <mousekey_on+0x3e>
    42fe:	0e 94 2a 21 	call	0x4254	; 0x4254 <wheel_unit>
    4302:	05 c0       	rjmp	.+10     	; 0x430e <mousekey_on+0x48>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    4304:	8a 3f       	cpi	r24, 0xFA	; 250
    4306:	31 f4       	brne	.+12     	; 0x4314 <mousekey_on+0x4e>
    4308:	0e 94 2a 21 	call	0x4254	; 0x4254 <wheel_unit>
    430c:	81 95       	neg	r24
    430e:	80 93 e5 01 	sts	0x01E5, r24
    4312:	08 95       	ret
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    4314:	8b 3f       	cpi	r24, 0xFB	; 251
    4316:	21 f4       	brne	.+8      	; 0x4320 <mousekey_on+0x5a>
    4318:	0e 94 2a 21 	call	0x4254	; 0x4254 <wheel_unit>
    431c:	81 95       	neg	r24
    431e:	04 c0       	rjmp	.+8      	; 0x4328 <mousekey_on+0x62>
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    4320:	8c 3f       	cpi	r24, 0xFC	; 252
    4322:	29 f4       	brne	.+10     	; 0x432e <mousekey_on+0x68>
    4324:	0e 94 2a 21 	call	0x4254	; 0x4254 <wheel_unit>
    4328:	80 93 e6 01 	sts	0x01E6, r24
    432c:	08 95       	ret
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    432e:	84 3f       	cpi	r24, 0xF4	; 244
    4330:	21 f4       	brne	.+8      	; 0x433a <mousekey_on+0x74>
    4332:	80 91 e2 01 	lds	r24, 0x01E2
    4336:	81 60       	ori	r24, 0x01	; 1
    4338:	17 c0       	rjmp	.+46     	; 0x4368 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    433a:	85 3f       	cpi	r24, 0xF5	; 245
    433c:	21 f4       	brne	.+8      	; 0x4346 <mousekey_on+0x80>
    433e:	80 91 e2 01 	lds	r24, 0x01E2
    4342:	82 60       	ori	r24, 0x02	; 2
    4344:	11 c0       	rjmp	.+34     	; 0x4368 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    4346:	86 3f       	cpi	r24, 0xF6	; 246
    4348:	21 f4       	brne	.+8      	; 0x4352 <mousekey_on+0x8c>
    434a:	80 91 e2 01 	lds	r24, 0x01E2
    434e:	84 60       	ori	r24, 0x04	; 4
    4350:	0b c0       	rjmp	.+22     	; 0x4368 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    4352:	87 3f       	cpi	r24, 0xF7	; 247
    4354:	21 f4       	brne	.+8      	; 0x435e <mousekey_on+0x98>
    4356:	80 91 e2 01 	lds	r24, 0x01E2
    435a:	88 60       	ori	r24, 0x08	; 8
    435c:	05 c0       	rjmp	.+10     	; 0x4368 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    435e:	88 3f       	cpi	r24, 0xF8	; 248
    4360:	31 f4       	brne	.+12     	; 0x436e <mousekey_on+0xa8>
    4362:	80 91 e2 01 	lds	r24, 0x01E2
    4366:	80 61       	ori	r24, 0x10	; 16
    4368:	80 93 e2 01 	sts	0x01E2, r24
    436c:	08 95       	ret
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
    436e:	8d 3f       	cpi	r24, 0xFD	; 253
    4370:	21 f4       	brne	.+8      	; 0x437a <mousekey_on+0xb4>
    4372:	80 91 e0 01 	lds	r24, 0x01E0
    4376:	81 60       	ori	r24, 0x01	; 1
    4378:	0b c0       	rjmp	.+22     	; 0x4390 <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    437a:	8e 3f       	cpi	r24, 0xFE	; 254
    437c:	21 f4       	brne	.+8      	; 0x4386 <mousekey_on+0xc0>
    437e:	80 91 e0 01 	lds	r24, 0x01E0
    4382:	82 60       	ori	r24, 0x02	; 2
    4384:	05 c0       	rjmp	.+10     	; 0x4390 <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    4386:	8f 3f       	cpi	r24, 0xFF	; 255
    4388:	29 f4       	brne	.+10     	; 0x4394 <mousekey_on+0xce>
    438a:	80 91 e0 01 	lds	r24, 0x01E0
    438e:	84 60       	ori	r24, 0x04	; 4
    4390:	80 93 e0 01 	sts	0x01E0, r24
    4394:	08 95       	ret

00004396 <mousekey_off>:
}

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    4396:	80 3f       	cpi	r24, 0xF0	; 240
    4398:	39 f4       	brne	.+14     	; 0x43a8 <mousekey_off+0x12>
    439a:	80 91 e4 01 	lds	r24, 0x01E4
    439e:	87 ff       	sbrs	r24, 7
    43a0:	6c c0       	rjmp	.+216    	; 0x447a <mousekey_off+0xe4>
    43a2:	10 92 e4 01 	sts	0x01E4, r1
    43a6:	69 c0       	rjmp	.+210    	; 0x447a <mousekey_off+0xe4>
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    43a8:	81 3f       	cpi	r24, 0xF1	; 241
    43aa:	29 f4       	brne	.+10     	; 0x43b6 <mousekey_off+0x20>
    43ac:	80 91 e4 01 	lds	r24, 0x01E4
    43b0:	18 16       	cp	r1, r24
    43b2:	bc f3       	brlt	.-18     	; 0x43a2 <mousekey_off+0xc>
    43b4:	62 c0       	rjmp	.+196    	; 0x447a <mousekey_off+0xe4>
    43b6:	90 91 e3 01 	lds	r25, 0x01E3
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    43ba:	82 3f       	cpi	r24, 0xF2	; 242
    43bc:	29 f4       	brne	.+10     	; 0x43c8 <mousekey_off+0x32>
    43be:	97 ff       	sbrs	r25, 7
    43c0:	5c c0       	rjmp	.+184    	; 0x447a <mousekey_off+0xe4>
    43c2:	10 92 e3 01 	sts	0x01E3, r1
    43c6:	59 c0       	rjmp	.+178    	; 0x447a <mousekey_off+0xe4>
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    43c8:	83 3f       	cpi	r24, 0xF3	; 243
    43ca:	19 f4       	brne	.+6      	; 0x43d2 <mousekey_off+0x3c>
    43cc:	19 16       	cp	r1, r25
    43ce:	cc f3       	brlt	.-14     	; 0x43c2 <mousekey_off+0x2c>
    43d0:	54 c0       	rjmp	.+168    	; 0x447a <mousekey_off+0xe4>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    43d2:	89 3f       	cpi	r24, 0xF9	; 249
    43d4:	41 f4       	brne	.+16     	; 0x43e6 <mousekey_off+0x50>
    43d6:	80 91 e5 01 	lds	r24, 0x01E5
    43da:	18 16       	cp	r1, r24
    43dc:	0c f0       	brlt	.+2      	; 0x43e0 <mousekey_off+0x4a>
    43de:	4d c0       	rjmp	.+154    	; 0x447a <mousekey_off+0xe4>
    43e0:	10 92 e5 01 	sts	0x01E5, r1
    43e4:	4a c0       	rjmp	.+148    	; 0x447a <mousekey_off+0xe4>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    43e6:	8a 3f       	cpi	r24, 0xFA	; 250
    43e8:	29 f4       	brne	.+10     	; 0x43f4 <mousekey_off+0x5e>
    43ea:	80 91 e5 01 	lds	r24, 0x01E5
    43ee:	87 ff       	sbrs	r24, 7
    43f0:	44 c0       	rjmp	.+136    	; 0x447a <mousekey_off+0xe4>
    43f2:	f6 cf       	rjmp	.-20     	; 0x43e0 <mousekey_off+0x4a>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    43f4:	8b 3f       	cpi	r24, 0xFB	; 251
    43f6:	39 f4       	brne	.+14     	; 0x4406 <mousekey_off+0x70>
    43f8:	80 91 e6 01 	lds	r24, 0x01E6
    43fc:	87 ff       	sbrs	r24, 7
    43fe:	3d c0       	rjmp	.+122    	; 0x447a <mousekey_off+0xe4>
    4400:	10 92 e6 01 	sts	0x01E6, r1
    4404:	3a c0       	rjmp	.+116    	; 0x447a <mousekey_off+0xe4>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    4406:	8c 3f       	cpi	r24, 0xFC	; 252
    4408:	29 f4       	brne	.+10     	; 0x4414 <mousekey_off+0x7e>
    440a:	80 91 e6 01 	lds	r24, 0x01E6
    440e:	18 16       	cp	r1, r24
    4410:	bc f3       	brlt	.-18     	; 0x4400 <mousekey_off+0x6a>
    4412:	33 c0       	rjmp	.+102    	; 0x447a <mousekey_off+0xe4>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    4414:	84 3f       	cpi	r24, 0xF4	; 244
    4416:	21 f4       	brne	.+8      	; 0x4420 <mousekey_off+0x8a>
    4418:	80 91 e2 01 	lds	r24, 0x01E2
    441c:	8e 7f       	andi	r24, 0xFE	; 254
    441e:	17 c0       	rjmp	.+46     	; 0x444e <mousekey_off+0xb8>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    4420:	85 3f       	cpi	r24, 0xF5	; 245
    4422:	21 f4       	brne	.+8      	; 0x442c <mousekey_off+0x96>
    4424:	80 91 e2 01 	lds	r24, 0x01E2
    4428:	8d 7f       	andi	r24, 0xFD	; 253
    442a:	11 c0       	rjmp	.+34     	; 0x444e <mousekey_off+0xb8>
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    442c:	86 3f       	cpi	r24, 0xF6	; 246
    442e:	21 f4       	brne	.+8      	; 0x4438 <mousekey_off+0xa2>
    4430:	80 91 e2 01 	lds	r24, 0x01E2
    4434:	8b 7f       	andi	r24, 0xFB	; 251
    4436:	0b c0       	rjmp	.+22     	; 0x444e <mousekey_off+0xb8>
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    4438:	87 3f       	cpi	r24, 0xF7	; 247
    443a:	21 f4       	brne	.+8      	; 0x4444 <mousekey_off+0xae>
    443c:	80 91 e2 01 	lds	r24, 0x01E2
    4440:	87 7f       	andi	r24, 0xF7	; 247
    4442:	05 c0       	rjmp	.+10     	; 0x444e <mousekey_off+0xb8>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    4444:	88 3f       	cpi	r24, 0xF8	; 248
    4446:	31 f4       	brne	.+12     	; 0x4454 <mousekey_off+0xbe>
    4448:	80 91 e2 01 	lds	r24, 0x01E2
    444c:	8f 7e       	andi	r24, 0xEF	; 239
    444e:	80 93 e2 01 	sts	0x01E2, r24
    4452:	13 c0       	rjmp	.+38     	; 0x447a <mousekey_off+0xe4>
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    4454:	8d 3f       	cpi	r24, 0xFD	; 253
    4456:	21 f4       	brne	.+8      	; 0x4460 <mousekey_off+0xca>
    4458:	80 91 e0 01 	lds	r24, 0x01E0
    445c:	8e 7f       	andi	r24, 0xFE	; 254
    445e:	0b c0       	rjmp	.+22     	; 0x4476 <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    4460:	8e 3f       	cpi	r24, 0xFE	; 254
    4462:	21 f4       	brne	.+8      	; 0x446c <mousekey_off+0xd6>
    4464:	80 91 e0 01 	lds	r24, 0x01E0
    4468:	8d 7f       	andi	r24, 0xFD	; 253
    446a:	05 c0       	rjmp	.+10     	; 0x4476 <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    446c:	8f 3f       	cpi	r24, 0xFF	; 255
    446e:	29 f4       	brne	.+10     	; 0x447a <mousekey_off+0xe4>
    4470:	80 91 e0 01 	lds	r24, 0x01E0
    4474:	8b 7f       	andi	r24, 0xFB	; 251
    4476:	80 93 e0 01 	sts	0x01E0, r24

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    447a:	80 91 e3 01 	lds	r24, 0x01E3
    447e:	81 11       	cpse	r24, r1
    4480:	0e c0       	rjmp	.+28     	; 0x449e <mousekey_off+0x108>
    4482:	80 91 e4 01 	lds	r24, 0x01E4
    4486:	81 11       	cpse	r24, r1
    4488:	0a c0       	rjmp	.+20     	; 0x449e <mousekey_off+0x108>
    448a:	80 91 e5 01 	lds	r24, 0x01E5
    448e:	81 11       	cpse	r24, r1
    4490:	06 c0       	rjmp	.+12     	; 0x449e <mousekey_off+0x108>
    4492:	80 91 e6 01 	lds	r24, 0x01E6
    4496:	81 11       	cpse	r24, r1
    4498:	02 c0       	rjmp	.+4      	; 0x449e <mousekey_off+0x108>
        mousekey_repeat = 0;
    449a:	10 92 e1 01 	sts	0x01E1, r1
    449e:	08 95       	ret

000044a0 <mousekey_send>:
    mousekey_accel = 0;
}

static void mousekey_debug(void)
{
    if (!debug_mouse) return;
    44a0:	80 91 d8 01 	lds	r24, 0x01D8
    44a4:	83 ff       	sbrs	r24, 3
    44a6:	7e c0       	rjmp	.+252    	; 0x45a4 <mousekey_send+0x104>
    print("mousekey [btn|x y v h](rep/acl): [");
    44a8:	87 e9       	ldi	r24, 0x97	; 151
    44aa:	95 e0       	ldi	r25, 0x05	; 5
    44ac:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    phex(mouse_report.buttons); print("|");
    44b0:	80 91 e2 01 	lds	r24, 0x01E2
    44b4:	1f 92       	push	r1
    44b6:	8f 93       	push	r24
    44b8:	82 e9       	ldi	r24, 0x92	; 146
    44ba:	95 e0       	ldi	r25, 0x05	; 5
    44bc:	9f 93       	push	r25
    44be:	8f 93       	push	r24
    44c0:	0e 94 6b 07 	call	0xed6	; 0xed6 <__xprintf>
    44c4:	80 e9       	ldi	r24, 0x90	; 144
    44c6:	95 e0       	ldi	r25, 0x05	; 5
    44c8:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    print_decs(mouse_report.x); print(" ");
    44cc:	80 91 e3 01 	lds	r24, 0x01E3
    44d0:	28 2f       	mov	r18, r24
    44d2:	08 2e       	mov	r0, r24
    44d4:	00 0c       	add	r0, r0
    44d6:	33 0b       	sbc	r19, r19
    44d8:	3f 93       	push	r19
    44da:	8f 93       	push	r24
    44dc:	8d e8       	ldi	r24, 0x8D	; 141
    44de:	95 e0       	ldi	r25, 0x05	; 5
    44e0:	9f 93       	push	r25
    44e2:	8f 93       	push	r24
    44e4:	0e 94 6b 07 	call	0xed6	; 0xed6 <__xprintf>
    44e8:	8b e8       	ldi	r24, 0x8B	; 139
    44ea:	95 e0       	ldi	r25, 0x05	; 5
    44ec:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    print_decs(mouse_report.y); print(" ");
    44f0:	80 91 e4 01 	lds	r24, 0x01E4
    44f4:	28 2f       	mov	r18, r24
    44f6:	08 2e       	mov	r0, r24
    44f8:	00 0c       	add	r0, r0
    44fa:	33 0b       	sbc	r19, r19
    44fc:	3f 93       	push	r19
    44fe:	8f 93       	push	r24
    4500:	88 e8       	ldi	r24, 0x88	; 136
    4502:	95 e0       	ldi	r25, 0x05	; 5
    4504:	9f 93       	push	r25
    4506:	8f 93       	push	r24
    4508:	0e 94 6b 07 	call	0xed6	; 0xed6 <__xprintf>
    450c:	86 e8       	ldi	r24, 0x86	; 134
    450e:	95 e0       	ldi	r25, 0x05	; 5
    4510:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    print_decs(mouse_report.v); print(" ");
    4514:	80 91 e5 01 	lds	r24, 0x01E5
    4518:	28 2f       	mov	r18, r24
    451a:	08 2e       	mov	r0, r24
    451c:	00 0c       	add	r0, r0
    451e:	33 0b       	sbc	r19, r19
    4520:	3f 93       	push	r19
    4522:	8f 93       	push	r24
    4524:	83 e8       	ldi	r24, 0x83	; 131
    4526:	95 e0       	ldi	r25, 0x05	; 5
    4528:	9f 93       	push	r25
    452a:	8f 93       	push	r24
    452c:	0e 94 6b 07 	call	0xed6	; 0xed6 <__xprintf>
    4530:	81 e8       	ldi	r24, 0x81	; 129
    4532:	95 e0       	ldi	r25, 0x05	; 5
    4534:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    print_decs(mouse_report.h); print("](");
    4538:	80 91 e6 01 	lds	r24, 0x01E6
    453c:	28 2f       	mov	r18, r24
    453e:	08 2e       	mov	r0, r24
    4540:	00 0c       	add	r0, r0
    4542:	33 0b       	sbc	r19, r19
    4544:	3f 93       	push	r19
    4546:	8f 93       	push	r24
    4548:	8e e7       	ldi	r24, 0x7E	; 126
    454a:	95 e0       	ldi	r25, 0x05	; 5
    454c:	9f 93       	push	r25
    454e:	8f 93       	push	r24
    4550:	0e 94 6b 07 	call	0xed6	; 0xed6 <__xprintf>
    4554:	8b e7       	ldi	r24, 0x7B	; 123
    4556:	95 e0       	ldi	r25, 0x05	; 5
    4558:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    print_dec(mousekey_repeat); print("/");
    455c:	80 91 e1 01 	lds	r24, 0x01E1
    4560:	1f 92       	push	r1
    4562:	8f 93       	push	r24
    4564:	88 e7       	ldi	r24, 0x78	; 120
    4566:	95 e0       	ldi	r25, 0x05	; 5
    4568:	9f 93       	push	r25
    456a:	8f 93       	push	r24
    456c:	0e 94 6b 07 	call	0xed6	; 0xed6 <__xprintf>
    4570:	86 e7       	ldi	r24, 0x76	; 118
    4572:	95 e0       	ldi	r25, 0x05	; 5
    4574:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    print_dec(mousekey_accel); print(")\n");
    4578:	80 91 e0 01 	lds	r24, 0x01E0
    457c:	1f 92       	push	r1
    457e:	8f 93       	push	r24
    4580:	83 e7       	ldi	r24, 0x73	; 115
    4582:	95 e0       	ldi	r25, 0x05	; 5
    4584:	9f 93       	push	r25
    4586:	8f 93       	push	r24
    4588:	0e 94 6b 07 	call	0xed6	; 0xed6 <__xprintf>
    458c:	80 e7       	ldi	r24, 0x70	; 112
    458e:	95 e0       	ldi	r25, 0x05	; 5
    4590:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    4594:	8d b7       	in	r24, 0x3d	; 61
    4596:	9e b7       	in	r25, 0x3e	; 62
    4598:	4c 96       	adiw	r24, 0x1c	; 28
    459a:	0f b6       	in	r0, 0x3f	; 63
    459c:	f8 94       	cli
    459e:	9e bf       	out	0x3e, r25	; 62
    45a0:	0f be       	out	0x3f, r0	; 63
    45a2:	8d bf       	out	0x3d, r24	; 61
}

void mousekey_send(void)
{
    mousekey_debug();
    host_mouse_send(&mouse_report);
    45a4:	82 ee       	ldi	r24, 0xE2	; 226
    45a6:	91 e0       	ldi	r25, 0x01	; 1
    45a8:	0e 94 ac 10 	call	0x2158	; 0x2158 <host_mouse_send>
    last_timer = timer_read();
    45ac:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <timer_read>
    45b0:	90 93 df 01 	sts	0x01DF, r25
    45b4:	80 93 de 01 	sts	0x01DE, r24
    45b8:	08 95       	ret

000045ba <mousekey_task>:
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
}

void mousekey_task(void)
{
    45ba:	1f 93       	push	r17
    45bc:	cf 93       	push	r28
    45be:	df 93       	push	r29
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
    45c0:	80 91 de 01 	lds	r24, 0x01DE
    45c4:	90 91 df 01 	lds	r25, 0x01DF
    45c8:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <timer_elapsed>
    45cc:	ac 01       	movw	r20, r24
    45ce:	90 91 e1 01 	lds	r25, 0x01E1
    45d2:	99 23       	and	r25, r25
    45d4:	21 f0       	breq	.+8      	; 0x45de <mousekey_task+0x24>
    45d6:	20 91 13 01 	lds	r18, 0x0113
    45da:	30 e0       	ldi	r19, 0x00	; 0
    45dc:	06 c0       	rjmp	.+12     	; 0x45ea <mousekey_task+0x30>
    45de:	20 91 14 01 	lds	r18, 0x0114
    45e2:	8a e0       	ldi	r24, 0x0A	; 10
    45e4:	28 9f       	mul	r18, r24
    45e6:	90 01       	movw	r18, r0
    45e8:	11 24       	eor	r1, r1
    45ea:	42 17       	cp	r20, r18
    45ec:	53 07       	cpc	r21, r19
    45ee:	08 f4       	brcc	.+2      	; 0x45f2 <mousekey_task+0x38>
    45f0:	85 c0       	rjmp	.+266    	; 0x46fc <mousekey_task+0x142>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    45f2:	80 91 e3 01 	lds	r24, 0x01E3
    45f6:	c0 91 e4 01 	lds	r28, 0x01E4
    45fa:	d0 91 e5 01 	lds	r29, 0x01E5
    45fe:	10 91 e6 01 	lds	r17, 0x01E6
    4602:	81 11       	cpse	r24, r1
    4604:	07 c0       	rjmp	.+14     	; 0x4614 <mousekey_task+0x5a>
    4606:	c1 11       	cpse	r28, r1
    4608:	75 c0       	rjmp	.+234    	; 0x46f4 <mousekey_task+0x13a>
    460a:	d1 11       	cpse	r29, r1
    460c:	73 c0       	rjmp	.+230    	; 0x46f4 <mousekey_task+0x13a>
    460e:	11 11       	cpse	r17, r1
    4610:	71 c0       	rjmp	.+226    	; 0x46f4 <mousekey_task+0x13a>
    4612:	74 c0       	rjmp	.+232    	; 0x46fc <mousekey_task+0x142>
        return;

    if (mousekey_repeat != UINT8_MAX)
    4614:	9f 3f       	cpi	r25, 0xFF	; 255
    4616:	19 f0       	breq	.+6      	; 0x461e <mousekey_task+0x64>
        mousekey_repeat++;
    4618:	9f 5f       	subi	r25, 0xFF	; 255
    461a:	90 93 e1 01 	sts	0x01E1, r25


    if (mouse_report.x > 0) mouse_report.x = move_unit();
    461e:	18 16       	cp	r1, r24
    4620:	24 f4       	brge	.+8      	; 0x462a <mousekey_task+0x70>
    4622:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <move_unit>
    4626:	80 93 e3 01 	sts	0x01E3, r24
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
    462a:	80 91 e3 01 	lds	r24, 0x01E3
    462e:	87 ff       	sbrs	r24, 7
    4630:	05 c0       	rjmp	.+10     	; 0x463c <mousekey_task+0x82>
    4632:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <move_unit>
    4636:	81 95       	neg	r24
    4638:	80 93 e3 01 	sts	0x01E3, r24
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    463c:	1c 16       	cp	r1, r28
    463e:	24 f4       	brge	.+8      	; 0x4648 <mousekey_task+0x8e>
    4640:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <move_unit>
    4644:	80 93 e4 01 	sts	0x01E4, r24
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
    4648:	80 91 e4 01 	lds	r24, 0x01E4
    464c:	87 ff       	sbrs	r24, 7
    464e:	05 c0       	rjmp	.+10     	; 0x465a <mousekey_task+0xa0>
    4650:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <move_unit>
    4654:	81 95       	neg	r24
    4656:	80 93 e4 01 	sts	0x01E4, r24

    /* diagonal move [1/sqrt(2) = 0.7] */
    if (mouse_report.x && mouse_report.y) {
    465a:	60 91 e3 01 	lds	r22, 0x01E3
    465e:	66 23       	and	r22, r22
    4660:	31 f1       	breq	.+76     	; 0x46ae <mousekey_task+0xf4>
    4662:	c0 91 e4 01 	lds	r28, 0x01E4
    4666:	cc 23       	and	r28, r28
    4668:	11 f1       	breq	.+68     	; 0x46ae <mousekey_task+0xf4>
        mouse_report.x *= 0.7;
    466a:	06 2e       	mov	r0, r22
    466c:	00 0c       	add	r0, r0
    466e:	77 0b       	sbc	r23, r23
    4670:	88 0b       	sbc	r24, r24
    4672:	99 0b       	sbc	r25, r25
    4674:	0e 94 ea 28 	call	0x51d4	; 0x51d4 <__floatsisf>
    4678:	23 e3       	ldi	r18, 0x33	; 51
    467a:	33 e3       	ldi	r19, 0x33	; 51
    467c:	43 e3       	ldi	r20, 0x33	; 51
    467e:	5f e3       	ldi	r21, 0x3F	; 63
    4680:	0e 94 4e 29 	call	0x529c	; 0x529c <__mulsf3>
    4684:	0e 94 b2 28 	call	0x5164	; 0x5164 <__fixsfsi>
    4688:	60 93 e3 01 	sts	0x01E3, r22
        mouse_report.y *= 0.7;
    468c:	6c 2f       	mov	r22, r28
    468e:	cc 0f       	add	r28, r28
    4690:	77 0b       	sbc	r23, r23
    4692:	88 0b       	sbc	r24, r24
    4694:	99 0b       	sbc	r25, r25
    4696:	0e 94 ea 28 	call	0x51d4	; 0x51d4 <__floatsisf>
    469a:	23 e3       	ldi	r18, 0x33	; 51
    469c:	33 e3       	ldi	r19, 0x33	; 51
    469e:	43 e3       	ldi	r20, 0x33	; 51
    46a0:	5f e3       	ldi	r21, 0x3F	; 63
    46a2:	0e 94 4e 29 	call	0x529c	; 0x529c <__mulsf3>
    46a6:	0e 94 b2 28 	call	0x5164	; 0x5164 <__fixsfsi>
    46aa:	60 93 e4 01 	sts	0x01E4, r22
    }

    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    46ae:	1d 16       	cp	r1, r29
    46b0:	24 f4       	brge	.+8      	; 0x46ba <mousekey_task+0x100>
    46b2:	0e 94 2a 21 	call	0x4254	; 0x4254 <wheel_unit>
    46b6:	80 93 e5 01 	sts	0x01E5, r24
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    46ba:	80 91 e5 01 	lds	r24, 0x01E5
    46be:	87 ff       	sbrs	r24, 7
    46c0:	05 c0       	rjmp	.+10     	; 0x46cc <mousekey_task+0x112>
    46c2:	0e 94 2a 21 	call	0x4254	; 0x4254 <wheel_unit>
    46c6:	81 95       	neg	r24
    46c8:	80 93 e5 01 	sts	0x01E5, r24
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    46cc:	11 16       	cp	r1, r17
    46ce:	24 f4       	brge	.+8      	; 0x46d8 <mousekey_task+0x11e>
    46d0:	0e 94 2a 21 	call	0x4254	; 0x4254 <wheel_unit>
    46d4:	80 93 e6 01 	sts	0x01E6, r24
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
    46d8:	80 91 e6 01 	lds	r24, 0x01E6
    46dc:	87 ff       	sbrs	r24, 7
    46de:	05 c0       	rjmp	.+10     	; 0x46ea <mousekey_task+0x130>
    46e0:	0e 94 2a 21 	call	0x4254	; 0x4254 <wheel_unit>
    46e4:	81 95       	neg	r24
    46e6:	80 93 e6 01 	sts	0x01E6, r24

    mousekey_send();
}
    46ea:	df 91       	pop	r29
    46ec:	cf 91       	pop	r28
    46ee:	1f 91       	pop	r17
    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;

    mousekey_send();
    46f0:	0c 94 50 22 	jmp	0x44a0	; 0x44a0 <mousekey_send>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
        return;

    if (mousekey_repeat != UINT8_MAX)
    46f4:	9f 3f       	cpi	r25, 0xFF	; 255
    46f6:	09 f0       	breq	.+2      	; 0x46fa <mousekey_task+0x140>
    46f8:	8f cf       	rjmp	.-226    	; 0x4618 <mousekey_task+0x5e>
    46fa:	97 cf       	rjmp	.-210    	; 0x462a <mousekey_task+0x70>
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;

    mousekey_send();
}
    46fc:	df 91       	pop	r29
    46fe:	cf 91       	pop	r28
    4700:	1f 91       	pop	r17
    4702:	08 95       	ret

00004704 <mousekey_clear>:
    last_timer = timer_read();
}

void mousekey_clear(void)
{
    mouse_report = (report_mouse_t){};
    4704:	e2 ee       	ldi	r30, 0xE2	; 226
    4706:	f1 e0       	ldi	r31, 0x01	; 1
    4708:	85 e0       	ldi	r24, 0x05	; 5
    470a:	df 01       	movw	r26, r30
    470c:	1d 92       	st	X+, r1
    470e:	8a 95       	dec	r24
    4710:	e9 f7       	brne	.-6      	; 0x470c <mousekey_clear+0x8>
    mousekey_repeat = 0;
    4712:	10 92 e1 01 	sts	0x01E1, r1
    mousekey_accel = 0;
    4716:	10 92 e0 01 	sts	0x01E0, r1
    471a:	08 95       	ret

0000471c <mousekey_console_help>:
    }
}

static void mousekey_console_help(void)
{
    print("\n\t- Mousekey -\n"
    471c:	8a eb       	ldi	r24, 0xBA	; 186
    471e:	97 e0       	ldi	r25, 0x07	; 7
    4720:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
          "down:	-1\n"
          "pgup:	+10\n"
          "pgdown:	-10\n"
          "\n"
          "speed = delta * max_speed * (repeat / time_to_max)\n");
    xprintf("where delta: cursor=%d, wheel=%d\n" 
    4724:	1f 92       	push	r1
    4726:	81 e0       	ldi	r24, 0x01	; 1
    4728:	8f 93       	push	r24
    472a:	1f 92       	push	r1
    472c:	85 e0       	ldi	r24, 0x05	; 5
    472e:	8f 93       	push	r24
    4730:	8c e6       	ldi	r24, 0x6C	; 108
    4732:	97 e0       	ldi	r25, 0x07	; 7
    4734:	9f 93       	push	r25
    4736:	8f 93       	push	r24
    4738:	0e 94 6b 07 	call	0xed6	; 0xed6 <__xprintf>
    473c:	0f 90       	pop	r0
    473e:	0f 90       	pop	r0
    4740:	0f 90       	pop	r0
    4742:	0f 90       	pop	r0
    4744:	0f 90       	pop	r0
    4746:	0f 90       	pop	r0
    4748:	08 95       	ret

0000474a <mousekey_param_inc>:

//#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
#define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
static void mousekey_param_inc(uint8_t param, uint8_t inc)
{
    switch (param) {
    474a:	83 30       	cpi	r24, 0x03	; 3
    474c:	e9 f1       	breq	.+122    	; 0x47c8 <mousekey_param_inc+0x7e>
    474e:	28 f4       	brcc	.+10     	; 0x475a <mousekey_param_inc+0x10>
    4750:	81 30       	cpi	r24, 0x01	; 1
    4752:	61 f0       	breq	.+24     	; 0x476c <mousekey_param_inc+0x22>
    4754:	82 30       	cpi	r24, 0x02	; 2
    4756:	09 f1       	breq	.+66     	; 0x479a <mousekey_param_inc+0x50>
    4758:	08 95       	ret
    475a:	85 30       	cpi	r24, 0x05	; 5
    475c:	09 f4       	brne	.+2      	; 0x4760 <mousekey_param_inc+0x16>
    475e:	62 c0       	rjmp	.+196    	; 0x4824 <mousekey_param_inc+0xda>
    4760:	08 f4       	brcc	.+2      	; 0x4764 <mousekey_param_inc+0x1a>
    4762:	49 c0       	rjmp	.+146    	; 0x47f6 <mousekey_param_inc+0xac>
    4764:	86 30       	cpi	r24, 0x06	; 6
    4766:	09 f4       	brne	.+2      	; 0x476a <mousekey_param_inc+0x20>
    4768:	74 c0       	rjmp	.+232    	; 0x4852 <mousekey_param_inc+0x108>
    476a:	08 95       	ret
        case 1:
            if (mk_delay + inc < UINT8_MAX)
    476c:	80 91 14 01 	lds	r24, 0x0114
    4770:	26 2f       	mov	r18, r22
    4772:	30 e0       	ldi	r19, 0x00	; 0
    4774:	28 0f       	add	r18, r24
    4776:	31 1d       	adc	r19, r1
    4778:	2f 3f       	cpi	r18, 0xFF	; 255
    477a:	31 05       	cpc	r19, r1
    477c:	24 f4       	brge	.+8      	; 0x4786 <mousekey_param_inc+0x3c>
                mk_delay += inc;
    477e:	68 0f       	add	r22, r24
    4780:	60 93 14 01 	sts	0x0114, r22
    4784:	03 c0       	rjmp	.+6      	; 0x478c <mousekey_param_inc+0x42>
            else
                mk_delay = UINT8_MAX;
    4786:	8f ef       	ldi	r24, 0xFF	; 255
    4788:	80 93 14 01 	sts	0x0114, r24
            PRINT_SET_VAL(mk_delay);
    478c:	80 91 14 01 	lds	r24, 0x0114
    4790:	1f 92       	push	r1
    4792:	8f 93       	push	r24
    4794:	85 ea       	ldi	r24, 0xA5	; 165
    4796:	96 e0       	ldi	r25, 0x06	; 6
    4798:	72 c0       	rjmp	.+228    	; 0x487e <mousekey_param_inc+0x134>
            break;
        case 2:
            if (mk_interval + inc < UINT8_MAX)
    479a:	80 91 13 01 	lds	r24, 0x0113
    479e:	26 2f       	mov	r18, r22
    47a0:	30 e0       	ldi	r19, 0x00	; 0
    47a2:	28 0f       	add	r18, r24
    47a4:	31 1d       	adc	r19, r1
    47a6:	2f 3f       	cpi	r18, 0xFF	; 255
    47a8:	31 05       	cpc	r19, r1
    47aa:	24 f4       	brge	.+8      	; 0x47b4 <mousekey_param_inc+0x6a>
                mk_interval += inc;
    47ac:	68 0f       	add	r22, r24
    47ae:	60 93 13 01 	sts	0x0113, r22
    47b2:	03 c0       	rjmp	.+6      	; 0x47ba <mousekey_param_inc+0x70>
            else
                mk_interval = UINT8_MAX;
    47b4:	8f ef       	ldi	r24, 0xFF	; 255
    47b6:	80 93 13 01 	sts	0x0113, r24
            PRINT_SET_VAL(mk_interval);
    47ba:	80 91 13 01 	lds	r24, 0x0113
    47be:	1f 92       	push	r1
    47c0:	8f 93       	push	r24
    47c2:	83 e9       	ldi	r24, 0x93	; 147
    47c4:	96 e0       	ldi	r25, 0x06	; 6
    47c6:	5b c0       	rjmp	.+182    	; 0x487e <mousekey_param_inc+0x134>
            break;
        case 3:
            if (mk_max_speed + inc < UINT8_MAX)
    47c8:	80 91 12 01 	lds	r24, 0x0112
    47cc:	26 2f       	mov	r18, r22
    47ce:	30 e0       	ldi	r19, 0x00	; 0
    47d0:	28 0f       	add	r18, r24
    47d2:	31 1d       	adc	r19, r1
    47d4:	2f 3f       	cpi	r18, 0xFF	; 255
    47d6:	31 05       	cpc	r19, r1
    47d8:	24 f4       	brge	.+8      	; 0x47e2 <mousekey_param_inc+0x98>
                mk_max_speed += inc;
    47da:	68 0f       	add	r22, r24
    47dc:	60 93 12 01 	sts	0x0112, r22
    47e0:	03 c0       	rjmp	.+6      	; 0x47e8 <mousekey_param_inc+0x9e>
            else
                mk_max_speed = UINT8_MAX;
    47e2:	8f ef       	ldi	r24, 0xFF	; 255
    47e4:	80 93 12 01 	sts	0x0112, r24
            PRINT_SET_VAL(mk_max_speed);
    47e8:	80 91 12 01 	lds	r24, 0x0112
    47ec:	1f 92       	push	r1
    47ee:	8f 93       	push	r24
    47f0:	80 e8       	ldi	r24, 0x80	; 128
    47f2:	96 e0       	ldi	r25, 0x06	; 6
    47f4:	44 c0       	rjmp	.+136    	; 0x487e <mousekey_param_inc+0x134>
            break;
        case 4:
            if (mk_time_to_max + inc < UINT8_MAX)
    47f6:	80 91 11 01 	lds	r24, 0x0111
    47fa:	26 2f       	mov	r18, r22
    47fc:	30 e0       	ldi	r19, 0x00	; 0
    47fe:	28 0f       	add	r18, r24
    4800:	31 1d       	adc	r19, r1
    4802:	2f 3f       	cpi	r18, 0xFF	; 255
    4804:	31 05       	cpc	r19, r1
    4806:	24 f4       	brge	.+8      	; 0x4810 <mousekey_param_inc+0xc6>
                mk_time_to_max += inc;
    4808:	68 0f       	add	r22, r24
    480a:	60 93 11 01 	sts	0x0111, r22
    480e:	03 c0       	rjmp	.+6      	; 0x4816 <mousekey_param_inc+0xcc>
            else
                mk_time_to_max = UINT8_MAX;
    4810:	8f ef       	ldi	r24, 0xFF	; 255
    4812:	80 93 11 01 	sts	0x0111, r24
            PRINT_SET_VAL(mk_time_to_max);
    4816:	80 91 11 01 	lds	r24, 0x0111
    481a:	1f 92       	push	r1
    481c:	8f 93       	push	r24
    481e:	8b e6       	ldi	r24, 0x6B	; 107
    4820:	96 e0       	ldi	r25, 0x06	; 6
    4822:	2d c0       	rjmp	.+90     	; 0x487e <mousekey_param_inc+0x134>
            break;
        case 5:
            if (mk_wheel_max_speed + inc < UINT8_MAX)
    4824:	80 91 10 01 	lds	r24, 0x0110
    4828:	26 2f       	mov	r18, r22
    482a:	30 e0       	ldi	r19, 0x00	; 0
    482c:	28 0f       	add	r18, r24
    482e:	31 1d       	adc	r19, r1
    4830:	2f 3f       	cpi	r18, 0xFF	; 255
    4832:	31 05       	cpc	r19, r1
    4834:	24 f4       	brge	.+8      	; 0x483e <mousekey_param_inc+0xf4>
                mk_wheel_max_speed += inc;
    4836:	68 0f       	add	r22, r24
    4838:	60 93 10 01 	sts	0x0110, r22
    483c:	03 c0       	rjmp	.+6      	; 0x4844 <mousekey_param_inc+0xfa>
            else
                mk_wheel_max_speed = UINT8_MAX;
    483e:	8f ef       	ldi	r24, 0xFF	; 255
    4840:	80 93 10 01 	sts	0x0110, r24
            PRINT_SET_VAL(mk_wheel_max_speed);
    4844:	80 91 10 01 	lds	r24, 0x0110
    4848:	1f 92       	push	r1
    484a:	8f 93       	push	r24
    484c:	82 e5       	ldi	r24, 0x52	; 82
    484e:	96 e0       	ldi	r25, 0x06	; 6
    4850:	16 c0       	rjmp	.+44     	; 0x487e <mousekey_param_inc+0x134>
            break;
        case 6:
            if (mk_wheel_time_to_max + inc < UINT8_MAX)
    4852:	80 91 0f 01 	lds	r24, 0x010F
    4856:	26 2f       	mov	r18, r22
    4858:	30 e0       	ldi	r19, 0x00	; 0
    485a:	28 0f       	add	r18, r24
    485c:	31 1d       	adc	r19, r1
    485e:	2f 3f       	cpi	r18, 0xFF	; 255
    4860:	31 05       	cpc	r19, r1
    4862:	24 f4       	brge	.+8      	; 0x486c <mousekey_param_inc+0x122>
                mk_wheel_time_to_max += inc;
    4864:	68 0f       	add	r22, r24
    4866:	60 93 0f 01 	sts	0x010F, r22
    486a:	03 c0       	rjmp	.+6      	; 0x4872 <mousekey_param_inc+0x128>
            else
                mk_wheel_time_to_max = UINT8_MAX;
    486c:	8f ef       	ldi	r24, 0xFF	; 255
    486e:	80 93 0f 01 	sts	0x010F, r24
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4872:	80 91 0f 01 	lds	r24, 0x010F
    4876:	1f 92       	push	r1
    4878:	8f 93       	push	r24
    487a:	87 e3       	ldi	r24, 0x37	; 55
    487c:	96 e0       	ldi	r25, 0x06	; 6
    487e:	9f 93       	push	r25
    4880:	8f 93       	push	r24
    4882:	0e 94 6b 07 	call	0xed6	; 0xed6 <__xprintf>
            break;
    4886:	0f 90       	pop	r0
    4888:	0f 90       	pop	r0
    488a:	0f 90       	pop	r0
    488c:	0f 90       	pop	r0
    488e:	08 95       	ret

00004890 <mousekey_param_dec>:
    }
}

static void mousekey_param_dec(uint8_t param, uint8_t dec)
{
    switch (param) {
    4890:	83 30       	cpi	r24, 0x03	; 3
    4892:	81 f1       	breq	.+96     	; 0x48f4 <mousekey_param_dec+0x64>
    4894:	28 f4       	brcc	.+10     	; 0x48a0 <mousekey_param_dec+0x10>
    4896:	81 30       	cpi	r24, 0x01	; 1
    4898:	59 f0       	breq	.+22     	; 0x48b0 <mousekey_param_dec+0x20>
    489a:	82 30       	cpi	r24, 0x02	; 2
    489c:	d1 f0       	breq	.+52     	; 0x48d2 <mousekey_param_dec+0x42>
    489e:	08 95       	ret
    48a0:	85 30       	cpi	r24, 0x05	; 5
    48a2:	09 f4       	brne	.+2      	; 0x48a6 <mousekey_param_dec+0x16>
    48a4:	49 c0       	rjmp	.+146    	; 0x4938 <mousekey_param_dec+0xa8>
    48a6:	b8 f1       	brcs	.+110    	; 0x4916 <mousekey_param_dec+0x86>
    48a8:	86 30       	cpi	r24, 0x06	; 6
    48aa:	09 f4       	brne	.+2      	; 0x48ae <mousekey_param_dec+0x1e>
    48ac:	56 c0       	rjmp	.+172    	; 0x495a <mousekey_param_dec+0xca>
    48ae:	08 95       	ret
        case 1:
            if (mk_delay > dec)
    48b0:	80 91 14 01 	lds	r24, 0x0114
    48b4:	68 17       	cp	r22, r24
    48b6:	20 f4       	brcc	.+8      	; 0x48c0 <mousekey_param_dec+0x30>
                mk_delay -= dec;
    48b8:	86 1b       	sub	r24, r22
    48ba:	80 93 14 01 	sts	0x0114, r24
    48be:	02 c0       	rjmp	.+4      	; 0x48c4 <mousekey_param_dec+0x34>
            else
                mk_delay = 0;
    48c0:	10 92 14 01 	sts	0x0114, r1
            PRINT_SET_VAL(mk_delay);
    48c4:	80 91 14 01 	lds	r24, 0x0114
    48c8:	1f 92       	push	r1
    48ca:	8f 93       	push	r24
    48cc:	88 e2       	ldi	r24, 0x28	; 40
    48ce:	96 e0       	ldi	r25, 0x06	; 6
    48d0:	54 c0       	rjmp	.+168    	; 0x497a <mousekey_param_dec+0xea>
            break;
        case 2:
            if (mk_interval > dec)
    48d2:	80 91 13 01 	lds	r24, 0x0113
    48d6:	68 17       	cp	r22, r24
    48d8:	20 f4       	brcc	.+8      	; 0x48e2 <mousekey_param_dec+0x52>
                mk_interval -= dec;
    48da:	86 1b       	sub	r24, r22
    48dc:	80 93 13 01 	sts	0x0113, r24
    48e0:	02 c0       	rjmp	.+4      	; 0x48e6 <mousekey_param_dec+0x56>
            else
                mk_interval = 0;
    48e2:	10 92 13 01 	sts	0x0113, r1
            PRINT_SET_VAL(mk_interval);
    48e6:	80 91 13 01 	lds	r24, 0x0113
    48ea:	1f 92       	push	r1
    48ec:	8f 93       	push	r24
    48ee:	86 e1       	ldi	r24, 0x16	; 22
    48f0:	96 e0       	ldi	r25, 0x06	; 6
    48f2:	43 c0       	rjmp	.+134    	; 0x497a <mousekey_param_dec+0xea>
            break;
        case 3:
            if (mk_max_speed > dec)
    48f4:	80 91 12 01 	lds	r24, 0x0112
    48f8:	68 17       	cp	r22, r24
    48fa:	20 f4       	brcc	.+8      	; 0x4904 <mousekey_param_dec+0x74>
                mk_max_speed -= dec;
    48fc:	86 1b       	sub	r24, r22
    48fe:	80 93 12 01 	sts	0x0112, r24
    4902:	02 c0       	rjmp	.+4      	; 0x4908 <mousekey_param_dec+0x78>
            else
                mk_max_speed = 0;
    4904:	10 92 12 01 	sts	0x0112, r1
            PRINT_SET_VAL(mk_max_speed);
    4908:	80 91 12 01 	lds	r24, 0x0112
    490c:	1f 92       	push	r1
    490e:	8f 93       	push	r24
    4910:	83 e0       	ldi	r24, 0x03	; 3
    4912:	96 e0       	ldi	r25, 0x06	; 6
    4914:	32 c0       	rjmp	.+100    	; 0x497a <mousekey_param_dec+0xea>
            break;
        case 4:
            if (mk_time_to_max > dec)
    4916:	80 91 11 01 	lds	r24, 0x0111
    491a:	68 17       	cp	r22, r24
    491c:	20 f4       	brcc	.+8      	; 0x4926 <mousekey_param_dec+0x96>
                mk_time_to_max -= dec;
    491e:	86 1b       	sub	r24, r22
    4920:	80 93 11 01 	sts	0x0111, r24
    4924:	02 c0       	rjmp	.+4      	; 0x492a <mousekey_param_dec+0x9a>
            else
                mk_time_to_max = 0;
    4926:	10 92 11 01 	sts	0x0111, r1
            PRINT_SET_VAL(mk_time_to_max);
    492a:	80 91 11 01 	lds	r24, 0x0111
    492e:	1f 92       	push	r1
    4930:	8f 93       	push	r24
    4932:	8e ee       	ldi	r24, 0xEE	; 238
    4934:	95 e0       	ldi	r25, 0x05	; 5
    4936:	21 c0       	rjmp	.+66     	; 0x497a <mousekey_param_dec+0xea>
            break;
        case 5:
            if (mk_wheel_max_speed > dec)
    4938:	80 91 10 01 	lds	r24, 0x0110
    493c:	68 17       	cp	r22, r24
    493e:	20 f4       	brcc	.+8      	; 0x4948 <mousekey_param_dec+0xb8>
                mk_wheel_max_speed -= dec;
    4940:	86 1b       	sub	r24, r22
    4942:	80 93 10 01 	sts	0x0110, r24
    4946:	02 c0       	rjmp	.+4      	; 0x494c <mousekey_param_dec+0xbc>
            else
                mk_wheel_max_speed = 0;
    4948:	10 92 10 01 	sts	0x0110, r1
            PRINT_SET_VAL(mk_wheel_max_speed);
    494c:	80 91 10 01 	lds	r24, 0x0110
    4950:	1f 92       	push	r1
    4952:	8f 93       	push	r24
    4954:	85 ed       	ldi	r24, 0xD5	; 213
    4956:	95 e0       	ldi	r25, 0x05	; 5
    4958:	10 c0       	rjmp	.+32     	; 0x497a <mousekey_param_dec+0xea>
            break;
        case 6:
            if (mk_wheel_time_to_max > dec)
    495a:	80 91 0f 01 	lds	r24, 0x010F
    495e:	68 17       	cp	r22, r24
    4960:	20 f4       	brcc	.+8      	; 0x496a <mousekey_param_dec+0xda>
                mk_wheel_time_to_max -= dec;
    4962:	86 1b       	sub	r24, r22
    4964:	80 93 0f 01 	sts	0x010F, r24
    4968:	02 c0       	rjmp	.+4      	; 0x496e <mousekey_param_dec+0xde>
            else
                mk_wheel_time_to_max = 0;
    496a:	10 92 0f 01 	sts	0x010F, r1
            PRINT_SET_VAL(mk_wheel_time_to_max);
    496e:	80 91 0f 01 	lds	r24, 0x010F
    4972:	1f 92       	push	r1
    4974:	8f 93       	push	r24
    4976:	8a eb       	ldi	r24, 0xBA	; 186
    4978:	95 e0       	ldi	r25, 0x05	; 5
    497a:	9f 93       	push	r25
    497c:	8f 93       	push	r24
    497e:	0e 94 6b 07 	call	0xed6	; 0xed6 <__xprintf>
            break;
    4982:	0f 90       	pop	r0
    4984:	0f 90       	pop	r0
    4986:	0f 90       	pop	r0
    4988:	0f 90       	pop	r0
    498a:	08 95       	ret

0000498c <switch_default_layer>:
    }
    return 0;
}

static void switch_default_layer(uint8_t layer)
{
    498c:	cf 93       	push	r28
    498e:	c8 2f       	mov	r28, r24
    xprintf("L%d\n", layer);
    4990:	1f 92       	push	r1
    4992:	8f 93       	push	r24
    4994:	8f eb       	ldi	r24, 0xBF	; 191
    4996:	98 e0       	ldi	r25, 0x08	; 8
    4998:	9f 93       	push	r25
    499a:	8f 93       	push	r24
    499c:	0e 94 6b 07 	call	0xed6	; 0xed6 <__xprintf>
    default_layer_set(1UL<<layer);
    49a0:	81 e0       	ldi	r24, 0x01	; 1
    49a2:	90 e0       	ldi	r25, 0x00	; 0
    49a4:	a0 e0       	ldi	r26, 0x00	; 0
    49a6:	b0 e0       	ldi	r27, 0x00	; 0
    49a8:	bc 01       	movw	r22, r24
    49aa:	cd 01       	movw	r24, r26
    49ac:	04 c0       	rjmp	.+8      	; 0x49b6 <switch_default_layer+0x2a>
    49ae:	66 0f       	add	r22, r22
    49b0:	77 1f       	adc	r23, r23
    49b2:	88 1f       	adc	r24, r24
    49b4:	99 1f       	adc	r25, r25
    49b6:	ca 95       	dec	r28
    49b8:	d2 f7       	brpl	.-12     	; 0x49ae <switch_default_layer+0x22>
    49ba:	0e 94 5f 1a 	call	0x34be	; 0x34be <default_layer_set>
    clear_keyboard();
    49be:	0f 90       	pop	r0
    49c0:	0f 90       	pop	r0
    49c2:	0f 90       	pop	r0
    49c4:	0f 90       	pop	r0
}
    49c6:	cf 91       	pop	r28

static void switch_default_layer(uint8_t layer)
{
    xprintf("L%d\n", layer);
    default_layer_set(1UL<<layer);
    clear_keyboard();
    49c8:	0c 94 6b 16 	jmp	0x2cd6	; 0x2cd6 <clear_keyboard>

000049cc <command_common>:
#endif
}
#endif

static bool command_common(uint8_t code)
{
    49cc:	cf 93       	push	r28
#ifdef KEYBOARD_LOCK_ENABLE
    static host_driver_t *host_driver = 0;
#endif
    switch (code) {
    49ce:	8b 31       	cpi	r24, 0x1B	; 27
    49d0:	09 f4       	brne	.+2      	; 0x49d4 <command_common+0x8>
    49d2:	cb c1       	rjmp	.+918    	; 0x4d6a <command_common+0x39e>
    49d4:	08 f0       	brcs	.+2      	; 0x49d8 <command_common+0xc>
    49d6:	49 c0       	rjmp	.+146    	; 0x4a6a <command_common+0x9e>
    49d8:	8e 30       	cpi	r24, 0x0E	; 14
    49da:	09 f4       	brne	.+2      	; 0x49de <command_common+0x12>
    49dc:	da c1       	rjmp	.+948    	; 0x4d92 <command_common+0x3c6>
    49de:	00 f5       	brcc	.+64     	; 0x4a20 <command_common+0x54>
    49e0:	87 30       	cpi	r24, 0x07	; 7
    49e2:	09 f4       	brne	.+2      	; 0x49e6 <command_common+0x1a>
    49e4:	a9 c1       	rjmp	.+850    	; 0x4d38 <command_common+0x36c>
    49e6:	a8 f4       	brcc	.+42     	; 0x4a12 <command_common+0x46>
    49e8:	86 30       	cpi	r24, 0x06	; 6
    49ea:	09 f0       	breq	.+2      	; 0x49ee <command_common+0x22>
    49ec:	5a c2       	rjmp	.+1204   	; 0x4ea2 <command_common+0x4d6>
        case KC_H:
        case KC_SLASH: /* ? */
            command_common_help();
            break;
        case KC_C:
            debug_matrix   = false;
    49ee:	80 91 d8 01 	lds	r24, 0x01D8
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
    49f2:	81 7f       	andi	r24, 0xF1	; 241
    49f4:	8e 7f       	andi	r24, 0xFE	; 254
    49f6:	80 93 d8 01 	sts	0x01D8, r24
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    49fa:	84 ec       	ldi	r24, 0xC4	; 196
    49fc:	98 e0       	ldi	r25, 0x08	; 8
    49fe:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
            debug_matrix   = false;
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
            command_console_help();
            print("C> ");
    4a02:	8a ee       	ldi	r24, 0xEA	; 234
    4a04:	9c e0       	ldi	r25, 0x0C	; 12
    4a06:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
            command_state = CONSOLE;
    4a0a:	81 e0       	ldi	r24, 0x01	; 1
    4a0c:	80 93 e8 01 	sts	0x01E8, r24
    4a10:	91 c1       	rjmp	.+802    	; 0x4d34 <command_common+0x368>
static bool command_common(uint8_t code)
{
#ifdef KEYBOARD_LOCK_ENABLE
    static host_driver_t *host_driver = 0;
#endif
    switch (code) {
    4a12:	88 30       	cpi	r24, 0x08	; 8
    4a14:	09 f4       	brne	.+2      	; 0x4a18 <command_common+0x4c>
    4a16:	5b c0       	rjmp	.+182    	; 0x4ace <command_common+0x102>
    4a18:	8b 30       	cpi	r24, 0x0B	; 11
    4a1a:	09 f4       	brne	.+2      	; 0x4a1e <command_common+0x52>
    4a1c:	87 c1       	rjmp	.+782    	; 0x4d2c <command_common+0x360>
    4a1e:	41 c2       	rjmp	.+1154   	; 0x4ea2 <command_common+0x4d6>
    4a20:	81 31       	cpi	r24, 0x11	; 17
    4a22:	09 f4       	brne	.+2      	; 0x4a26 <command_common+0x5a>
    4a24:	26 c2       	rjmp	.+1100   	; 0x4e72 <command_common+0x4a6>
    4a26:	20 f4       	brcc	.+8      	; 0x4a30 <command_common+0x64>
    4a28:	80 31       	cpi	r24, 0x10	; 16
    4a2a:	09 f4       	brne	.+2      	; 0x4a2e <command_common+0x62>
    4a2c:	c6 c1       	rjmp	.+908    	; 0x4dba <command_common+0x3ee>
    4a2e:	39 c2       	rjmp	.+1138   	; 0x4ea2 <command_common+0x4d6>
    4a30:	86 31       	cpi	r24, 0x16	; 22
    4a32:	09 f4       	brne	.+2      	; 0x4a36 <command_common+0x6a>
    4a34:	dd c1       	rjmp	.+954    	; 0x4df0 <command_common+0x424>
    4a36:	89 31       	cpi	r24, 0x19	; 25
    4a38:	09 f0       	breq	.+2      	; 0x4a3c <command_common+0x70>
    4a3a:	33 c2       	rjmp	.+1126   	; 0x4ea2 <command_common+0x4d6>
            } else {
                print("\nmouse: off\n");
            }
            break;
        case KC_V: // print version & information
            print("\n\t- Version -\n");
    4a3c:	8e e5       	ldi	r24, 0x5E	; 94
    4a3e:	9c e0       	ldi	r25, 0x0C	; 12
    4a40:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    4a44:	85 e3       	ldi	r24, 0x35	; 53
    4a46:	9c e0       	ldi	r25, 0x0C	; 12
    4a48:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    4a4c:	80 e0       	ldi	r24, 0x00	; 0
    4a4e:	9c e0       	ldi	r25, 0x0C	; 12
    4a50:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
                  "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
                  "VER: " STR(DEVICE_VER) "\n");
            print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
    4a54:	89 ed       	ldi	r24, 0xD9	; 217
    4a56:	9b e0       	ldi	r25, 0x0B	; 11
    4a58:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
            /* build options */
            print("OPTIONS:"
    4a5c:	84 e9       	ldi	r24, 0x94	; 148
    4a5e:	9b e0       	ldi	r25, 0x0B	; 11
    4a60:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
#ifdef KEYMAP_SECTION_ENABLE
            " KEYMAP_SECTION"
#endif
            " " STR(BOOTLOADER_SIZE) "\n");

            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    4a64:	86 e6       	ldi	r24, 0x66	; 102
    4a66:	9b e0       	ldi	r25, 0x0B	; 11
    4a68:	63 c1       	rjmp	.+710    	; 0x4d30 <command_common+0x364>
static bool command_common(uint8_t code)
{
#ifdef KEYBOARD_LOCK_ENABLE
    static host_driver_t *host_driver = 0;
#endif
    switch (code) {
    4a6a:	85 33       	cpi	r24, 0x35	; 53
    4a6c:	09 f4       	brne	.+2      	; 0x4a70 <command_common+0xa4>
    4a6e:	13 c2       	rjmp	.+1062   	; 0x4e96 <command_common+0x4ca>
    4a70:	68 f4       	brcc	.+26     	; 0x4a8c <command_common+0xc0>
    4a72:	87 32       	cpi	r24, 0x27	; 39
    4a74:	09 f4       	brne	.+2      	; 0x4a78 <command_common+0xac>
    4a76:	0f c2       	rjmp	.+1054   	; 0x4e96 <command_common+0x4ca>
    4a78:	28 f4       	brcc	.+10     	; 0x4a84 <command_common+0xb8>
    4a7a:	8e 31       	cpi	r24, 0x1E	; 30
    4a7c:	08 f4       	brcc	.+2      	; 0x4a80 <command_common+0xb4>
    4a7e:	11 c2       	rjmp	.+1058   	; 0x4ea2 <command_common+0x4d6>
        case KC_0:
        case KC_F10:
            switch_default_layer(0);
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
    4a80:	8d 51       	subi	r24, 0x1D	; 29
    4a82:	0c c2       	rjmp	.+1048   	; 0x4e9c <command_common+0x4d0>
static bool command_common(uint8_t code)
{
#ifdef KEYBOARD_LOCK_ENABLE
    static host_driver_t *host_driver = 0;
#endif
    switch (code) {
    4a84:	89 32       	cpi	r24, 0x29	; 41
    4a86:	09 f4       	brne	.+2      	; 0x4a8a <command_common+0xbe>
    4a88:	06 c2       	rjmp	.+1036   	; 0x4e96 <command_common+0x4ca>
    4a8a:	0b c2       	rjmp	.+1046   	; 0x4ea2 <command_common+0x4d6>
    4a8c:	83 34       	cpi	r24, 0x43	; 67
    4a8e:	38 f4       	brcc	.+14     	; 0x4a9e <command_common+0xd2>
    4a90:	8a 33       	cpi	r24, 0x3A	; 58
    4a92:	08 f0       	brcs	.+2      	; 0x4a96 <command_common+0xca>
    4a94:	02 c2       	rjmp	.+1028   	; 0x4e9a <command_common+0x4ce>
    4a96:	88 33       	cpi	r24, 0x38	; 56
    4a98:	09 f4       	brne	.+2      	; 0x4a9c <command_common+0xd0>
    4a9a:	48 c1       	rjmp	.+656    	; 0x4d2c <command_common+0x360>
    4a9c:	02 c2       	rjmp	.+1028   	; 0x4ea2 <command_common+0x4d6>
    4a9e:	83 34       	cpi	r24, 0x43	; 67
    4aa0:	09 f4       	brne	.+2      	; 0x4aa4 <command_common+0xd8>
    4aa2:	f9 c1       	rjmp	.+1010   	; 0x4e96 <command_common+0x4ca>
    4aa4:	88 34       	cpi	r24, 0x48	; 72
    4aa6:	09 f0       	breq	.+2      	; 0x4aaa <command_common+0xde>
    4aa8:	fc c1       	rjmp	.+1016   	; 0x4ea2 <command_common+0x4d6>
            command_console_help();
            print("C> ");
            command_state = CONSOLE;
            break;
        case KC_PAUSE:
            clear_keyboard();
    4aaa:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <clear_keyboard>
            print("\n\nbootloader... ");
    4aae:	89 ed       	ldi	r24, 0xD9	; 217
    4ab0:	9c e0       	ldi	r25, 0x0C	; 12
    4ab2:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    4ab6:	9f ef       	ldi	r25, 0xFF	; 255
    4ab8:	23 ed       	ldi	r18, 0xD3	; 211
    4aba:	80 e3       	ldi	r24, 0x30	; 48
    4abc:	91 50       	subi	r25, 0x01	; 1
    4abe:	20 40       	sbci	r18, 0x00	; 0
    4ac0:	80 40       	sbci	r24, 0x00	; 0
    4ac2:	e1 f7       	brne	.-8      	; 0x4abc <command_common+0xf0>
    4ac4:	00 c0       	rjmp	.+0      	; 0x4ac6 <command_common+0xfa>
    4ac6:	00 00       	nop
            wait_ms(1000);
            bootloader_jump(); // not return
    4ac8:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <bootloader_jump>
    4acc:	33 c1       	rjmp	.+614    	; 0x4d34 <command_common+0x368>
            led_set(host_keyboard_leds());
            break;
#endif
#ifdef BOOTMAGIC_ENABLE
        case KC_E:
            print("eeconfig:\n");
    4ace:	8e ee       	ldi	r24, 0xEE	; 238
    4ad0:	9c e0       	ldi	r25, 0x0C	; 12
    4ad2:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
}

#ifdef BOOTMAGIC_ENABLE
static void print_eeconfig(void)
{
    print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
    4ad6:	83 ec       	ldi	r24, 0xC3	; 195
    4ad8:	9a e0       	ldi	r25, 0x0A	; 10
    4ada:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    4ade:	0e 94 cf 20 	call	0x419e	; 0x419e <eeconfig_read_default_layer>
    4ae2:	1f 92       	push	r1
    4ae4:	8f 93       	push	r24
    4ae6:	80 ec       	ldi	r24, 0xC0	; 192
    4ae8:	9a e0       	ldi	r25, 0x0A	; 10
    4aea:	9f 93       	push	r25
    4aec:	8f 93       	push	r24
    4aee:	0e 94 6b 07 	call	0xed6	; 0xed6 <__xprintf>
    4af2:	8e eb       	ldi	r24, 0xBE	; 190
    4af4:	9a e0       	ldi	r25, 0x0A	; 10
    4af6:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>

    debug_config_t dc;
    dc.raw = eeconfig_read_debug();
    4afa:	0e 94 c6 20 	call	0x418c	; 0x418c <eeconfig_read_debug>
    4afe:	c8 2f       	mov	r28, r24
    print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
    4b00:	8b ea       	ldi	r24, 0xAB	; 171
    4b02:	9a e0       	ldi	r25, 0x0A	; 10
    4b04:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    4b08:	1f 92       	push	r1
    4b0a:	cf 93       	push	r28
    4b0c:	86 ea       	ldi	r24, 0xA6	; 166
    4b0e:	9a e0       	ldi	r25, 0x0A	; 10
    4b10:	9f 93       	push	r25
    4b12:	8f 93       	push	r24
    4b14:	0e 94 6b 07 	call	0xed6	; 0xed6 <__xprintf>
    4b18:	84 ea       	ldi	r24, 0xA4	; 164
    4b1a:	9a e0       	ldi	r25, 0x0A	; 10
    4b1c:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    print(".enable: "); print_dec(dc.enable); print("\n");
    4b20:	8a e9       	ldi	r24, 0x9A	; 154
    4b22:	9a e0       	ldi	r25, 0x0A	; 10
    4b24:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    4b28:	8c 2f       	mov	r24, r28
    4b2a:	81 70       	andi	r24, 0x01	; 1
    4b2c:	1f 92       	push	r1
    4b2e:	8f 93       	push	r24
    4b30:	87 e9       	ldi	r24, 0x97	; 151
    4b32:	9a e0       	ldi	r25, 0x0A	; 10
    4b34:	9f 93       	push	r25
    4b36:	8f 93       	push	r24
    4b38:	0e 94 6b 07 	call	0xed6	; 0xed6 <__xprintf>
    4b3c:	85 e9       	ldi	r24, 0x95	; 149
    4b3e:	9a e0       	ldi	r25, 0x0A	; 10
    4b40:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    print(".matrix: "); print_dec(dc.matrix); print("\n");
    4b44:	8b e8       	ldi	r24, 0x8B	; 139
    4b46:	9a e0       	ldi	r25, 0x0A	; 10
    4b48:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    4b4c:	c1 fb       	bst	r28, 1
    4b4e:	88 27       	eor	r24, r24
    4b50:	80 f9       	bld	r24, 0
    4b52:	1f 92       	push	r1
    4b54:	8f 93       	push	r24
    4b56:	88 e8       	ldi	r24, 0x88	; 136
    4b58:	9a e0       	ldi	r25, 0x0A	; 10
    4b5a:	9f 93       	push	r25
    4b5c:	8f 93       	push	r24
    4b5e:	0e 94 6b 07 	call	0xed6	; 0xed6 <__xprintf>
    4b62:	86 e8       	ldi	r24, 0x86	; 134
    4b64:	9a e0       	ldi	r25, 0x0A	; 10
    4b66:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    print(".keyboard: "); print_dec(dc.keyboard); print("\n");
    4b6a:	8a e7       	ldi	r24, 0x7A	; 122
    4b6c:	9a e0       	ldi	r25, 0x0A	; 10
    4b6e:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    4b72:	c2 fb       	bst	r28, 2
    4b74:	88 27       	eor	r24, r24
    4b76:	80 f9       	bld	r24, 0
    4b78:	1f 92       	push	r1
    4b7a:	8f 93       	push	r24
    4b7c:	87 e7       	ldi	r24, 0x77	; 119
    4b7e:	9a e0       	ldi	r25, 0x0A	; 10
    4b80:	9f 93       	push	r25
    4b82:	8f 93       	push	r24
    4b84:	0e 94 6b 07 	call	0xed6	; 0xed6 <__xprintf>
    4b88:	85 e7       	ldi	r24, 0x75	; 117
    4b8a:	9a e0       	ldi	r25, 0x0A	; 10
    4b8c:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    print(".mouse: "); print_dec(dc.mouse); print("\n");
    4b90:	8c e6       	ldi	r24, 0x6C	; 108
    4b92:	9a e0       	ldi	r25, 0x0A	; 10
    4b94:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    4b98:	c3 fb       	bst	r28, 3
    4b9a:	cc 27       	eor	r28, r28
    4b9c:	c0 f9       	bld	r28, 0
    4b9e:	1f 92       	push	r1
    4ba0:	cf 93       	push	r28
    4ba2:	89 e6       	ldi	r24, 0x69	; 105
    4ba4:	9a e0       	ldi	r25, 0x0A	; 10
    4ba6:	9f 93       	push	r25
    4ba8:	8f 93       	push	r24
    4baa:	0e 94 6b 07 	call	0xed6	; 0xed6 <__xprintf>
    4bae:	87 e6       	ldi	r24, 0x67	; 103
    4bb0:	9a e0       	ldi	r25, 0x0A	; 10
    4bb2:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>

    keymap_config_t kc;
    kc.raw = eeconfig_read_keymap();
    4bb6:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <eeconfig_read_keymap>
    4bba:	c8 2f       	mov	r28, r24
    print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
    4bbc:	83 e5       	ldi	r24, 0x53	; 83
    4bbe:	9a e0       	ldi	r25, 0x0A	; 10
    4bc0:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    4bc4:	1f 92       	push	r1
    4bc6:	cf 93       	push	r28
    4bc8:	8e e4       	ldi	r24, 0x4E	; 78
    4bca:	9a e0       	ldi	r25, 0x0A	; 10
    4bcc:	9f 93       	push	r25
    4bce:	8f 93       	push	r24
    4bd0:	0e 94 6b 07 	call	0xed6	; 0xed6 <__xprintf>
    4bd4:	8c e4       	ldi	r24, 0x4C	; 76
    4bd6:	9a e0       	ldi	r25, 0x0A	; 10
    4bd8:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
    4bdc:	83 e3       	ldi	r24, 0x33	; 51
    4bde:	9a e0       	ldi	r25, 0x0A	; 10
    4be0:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    4be4:	8c 2f       	mov	r24, r28
    4be6:	81 70       	andi	r24, 0x01	; 1
    4be8:	1f 92       	push	r1
    4bea:	8f 93       	push	r24
    4bec:	80 e3       	ldi	r24, 0x30	; 48
    4bee:	9a e0       	ldi	r25, 0x0A	; 10
    4bf0:	9f 93       	push	r25
    4bf2:	8f 93       	push	r24
    4bf4:	0e 94 6b 07 	call	0xed6	; 0xed6 <__xprintf>
    4bf8:	8d b7       	in	r24, 0x3d	; 61
    4bfa:	9e b7       	in	r25, 0x3e	; 62
    4bfc:	80 96       	adiw	r24, 0x20	; 32
    4bfe:	0f b6       	in	r0, 0x3f	; 63
    4c00:	f8 94       	cli
    4c02:	9e bf       	out	0x3e, r25	; 62
    4c04:	0f be       	out	0x3f, r0	; 63
    4c06:	8d bf       	out	0x3d, r24	; 61
    4c08:	8e e2       	ldi	r24, 0x2E	; 46
    4c0a:	9a e0       	ldi	r25, 0x0A	; 10
    4c0c:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
    4c10:	87 e1       	ldi	r24, 0x17	; 23
    4c12:	9a e0       	ldi	r25, 0x0A	; 10
    4c14:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    4c18:	c1 fb       	bst	r28, 1
    4c1a:	88 27       	eor	r24, r24
    4c1c:	80 f9       	bld	r24, 0
    4c1e:	1f 92       	push	r1
    4c20:	8f 93       	push	r24
    4c22:	84 e1       	ldi	r24, 0x14	; 20
    4c24:	9a e0       	ldi	r25, 0x0A	; 10
    4c26:	9f 93       	push	r25
    4c28:	8f 93       	push	r24
    4c2a:	0e 94 6b 07 	call	0xed6	; 0xed6 <__xprintf>
    4c2e:	82 e1       	ldi	r24, 0x12	; 18
    4c30:	9a e0       	ldi	r25, 0x0A	; 10
    4c32:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
    4c36:	80 e0       	ldi	r24, 0x00	; 0
    4c38:	9a e0       	ldi	r25, 0x0A	; 10
    4c3a:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    4c3e:	c2 fb       	bst	r28, 2
    4c40:	88 27       	eor	r24, r24
    4c42:	80 f9       	bld	r24, 0
    4c44:	1f 92       	push	r1
    4c46:	8f 93       	push	r24
    4c48:	8d ef       	ldi	r24, 0xFD	; 253
    4c4a:	99 e0       	ldi	r25, 0x09	; 9
    4c4c:	9f 93       	push	r25
    4c4e:	8f 93       	push	r24
    4c50:	0e 94 6b 07 	call	0xed6	; 0xed6 <__xprintf>
    4c54:	8b ef       	ldi	r24, 0xFB	; 251
    4c56:	99 e0       	ldi	r25, 0x09	; 9
    4c58:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
    4c5c:	89 ee       	ldi	r24, 0xE9	; 233
    4c5e:	99 e0       	ldi	r25, 0x09	; 9
    4c60:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    4c64:	c3 fb       	bst	r28, 3
    4c66:	88 27       	eor	r24, r24
    4c68:	80 f9       	bld	r24, 0
    4c6a:	1f 92       	push	r1
    4c6c:	8f 93       	push	r24
    4c6e:	86 ee       	ldi	r24, 0xE6	; 230
    4c70:	99 e0       	ldi	r25, 0x09	; 9
    4c72:	9f 93       	push	r25
    4c74:	8f 93       	push	r24
    4c76:	0e 94 6b 07 	call	0xed6	; 0xed6 <__xprintf>
    4c7a:	84 ee       	ldi	r24, 0xE4	; 228
    4c7c:	99 e0       	ldi	r25, 0x09	; 9
    4c7e:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    print(".no_gui: "); print_dec(kc.no_gui); print("\n");
    4c82:	8a ed       	ldi	r24, 0xDA	; 218
    4c84:	99 e0       	ldi	r25, 0x09	; 9
    4c86:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    4c8a:	c4 fb       	bst	r28, 4
    4c8c:	88 27       	eor	r24, r24
    4c8e:	80 f9       	bld	r24, 0
    4c90:	1f 92       	push	r1
    4c92:	8f 93       	push	r24
    4c94:	87 ed       	ldi	r24, 0xD7	; 215
    4c96:	99 e0       	ldi	r25, 0x09	; 9
    4c98:	9f 93       	push	r25
    4c9a:	8f 93       	push	r24
    4c9c:	0e 94 6b 07 	call	0xed6	; 0xed6 <__xprintf>
    4ca0:	85 ed       	ldi	r24, 0xD5	; 213
    4ca2:	99 e0       	ldi	r25, 0x09	; 9
    4ca4:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
    4ca8:	83 ec       	ldi	r24, 0xC3	; 195
    4caa:	99 e0       	ldi	r25, 0x09	; 9
    4cac:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    4cb0:	c5 fb       	bst	r28, 5
    4cb2:	88 27       	eor	r24, r24
    4cb4:	80 f9       	bld	r24, 0
    4cb6:	1f 92       	push	r1
    4cb8:	8f 93       	push	r24
    4cba:	80 ec       	ldi	r24, 0xC0	; 192
    4cbc:	99 e0       	ldi	r25, 0x09	; 9
    4cbe:	9f 93       	push	r25
    4cc0:	8f 93       	push	r24
    4cc2:	0e 94 6b 07 	call	0xed6	; 0xed6 <__xprintf>
    4cc6:	8e eb       	ldi	r24, 0xBE	; 190
    4cc8:	99 e0       	ldi	r25, 0x09	; 9
    4cca:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
    4cce:	82 ea       	ldi	r24, 0xA2	; 162
    4cd0:	99 e0       	ldi	r25, 0x09	; 9
    4cd2:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    4cd6:	c6 fb       	bst	r28, 6
    4cd8:	88 27       	eor	r24, r24
    4cda:	80 f9       	bld	r24, 0
    4cdc:	1f 92       	push	r1
    4cde:	8f 93       	push	r24
    4ce0:	8f e9       	ldi	r24, 0x9F	; 159
    4ce2:	99 e0       	ldi	r25, 0x09	; 9
    4ce4:	9f 93       	push	r25
    4ce6:	8f 93       	push	r24
    4ce8:	0e 94 6b 07 	call	0xed6	; 0xed6 <__xprintf>
    4cec:	8d e9       	ldi	r24, 0x9D	; 157
    4cee:	99 e0       	ldi	r25, 0x09	; 9
    4cf0:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    print(".nkro: "); print_dec(kc.nkro); print("\n");
    4cf4:	85 e9       	ldi	r24, 0x95	; 149
    4cf6:	99 e0       	ldi	r25, 0x09	; 9
    4cf8:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    4cfc:	c7 fb       	bst	r28, 7
    4cfe:	cc 27       	eor	r28, r28
    4d00:	c0 f9       	bld	r28, 0
    4d02:	1f 92       	push	r1
    4d04:	cf 93       	push	r28
    4d06:	82 e9       	ldi	r24, 0x92	; 146
    4d08:	99 e0       	ldi	r25, 0x09	; 9
    4d0a:	9f 93       	push	r25
    4d0c:	8f 93       	push	r24
    4d0e:	0e 94 6b 07 	call	0xed6	; 0xed6 <__xprintf>
    4d12:	80 e9       	ldi	r24, 0x90	; 144
    4d14:	99 e0       	ldi	r25, 0x09	; 9
    4d16:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    4d1a:	8d b7       	in	r24, 0x3d	; 61
    4d1c:	9e b7       	in	r25, 0x3e	; 62
    4d1e:	4c 96       	adiw	r24, 0x1c	; 28
    4d20:	0f b6       	in	r0, 0x3f	; 63
    4d22:	f8 94       	cli
    4d24:	9e bf       	out	0x3e, r25	; 62
    4d26:	0f be       	out	0x3f, r0	; 63
    4d28:	8d bf       	out	0x3d, r24	; 61
    4d2a:	04 c0       	rjmp	.+8      	; 0x4d34 <command_common+0x368>
/***********************************************************
 * Command common
 ***********************************************************/
static void command_common_help(void)
{
    print("\n\t- Magic -\n"
    4d2c:	8b ee       	ldi	r24, 0xEB	; 235
    4d2e:	98 e0       	ldi	r25, 0x08	; 8
    4d30:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
            break;
        default:
            print("?");
            return false;
    }
    return true;
    4d34:	c1 e0       	ldi	r28, 0x01	; 1
    4d36:	ba c0       	rjmp	.+372    	; 0x4eac <command_common+0x4e0>
            print("\n\nbootloader... ");
            wait_ms(1000);
            bootloader_jump(); // not return
            break;
        case KC_D:
            if (debug_enable) {
    4d38:	80 91 d8 01 	lds	r24, 0x01D8
    4d3c:	c8 2f       	mov	r28, r24
    4d3e:	c1 70       	andi	r28, 0x01	; 1
    4d40:	80 ff       	sbrs	r24, 0
    4d42:	09 c0       	rjmp	.+18     	; 0x4d56 <command_common+0x38a>
                print("\ndebug: off\n");
    4d44:	8c ec       	ldi	r24, 0xCC	; 204
    4d46:	9c e0       	ldi	r25, 0x0C	; 12
    4d48:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
                debug_matrix   = false;
    4d4c:	80 91 d8 01 	lds	r24, 0x01D8
                debug_keyboard = false;
                debug_mouse    = false;
                debug_enable   = false;
    4d50:	81 7f       	andi	r24, 0xF1	; 241
    4d52:	8e 7f       	andi	r24, 0xFE	; 254
    4d54:	47 c0       	rjmp	.+142    	; 0x4de4 <command_common+0x418>
            } else {
                print("\ndebug: on\n");
    4d56:	80 ec       	ldi	r24, 0xC0	; 192
    4d58:	9c e0       	ldi	r25, 0x0C	; 12
    4d5a:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
                debug_enable   = true;
    4d5e:	80 91 d8 01 	lds	r24, 0x01D8
    4d62:	81 60       	ori	r24, 0x01	; 1
    4d64:	80 93 d8 01 	sts	0x01D8, r24
    4d68:	e5 cf       	rjmp	.-54     	; 0x4d34 <command_common+0x368>
            }
            break;
        case KC_X: // debug matrix toggle
            debug_matrix = !debug_matrix;
    4d6a:	90 91 d8 01 	lds	r25, 0x01D8
    4d6e:	91 fb       	bst	r25, 1
    4d70:	cc 27       	eor	r28, r28
    4d72:	c0 f9       	bld	r28, 0
    4d74:	81 e0       	ldi	r24, 0x01	; 1
    4d76:	c8 27       	eor	r28, r24
    4d78:	89 2f       	mov	r24, r25
    4d7a:	c0 fb       	bst	r28, 0
    4d7c:	81 f9       	bld	r24, 1
    4d7e:	80 93 d8 01 	sts	0x01D8, r24
            if (debug_matrix) {
    4d82:	cc 23       	and	r28, r28
    4d84:	19 f0       	breq	.+6      	; 0x4d8c <command_common+0x3c0>
                print("\nmatrix: on\n");
    4d86:	83 eb       	ldi	r24, 0xB3	; 179
    4d88:	9c e0       	ldi	r25, 0x0C	; 12
    4d8a:	27 c0       	rjmp	.+78     	; 0x4dda <command_common+0x40e>
                debug_enable = true;
            } else {
                print("\nmatrix: off\n");
    4d8c:	85 ea       	ldi	r24, 0xA5	; 165
    4d8e:	9c e0       	ldi	r25, 0x0C	; 12
    4d90:	cf cf       	rjmp	.-98     	; 0x4d30 <command_common+0x364>
            }
            break;
        case KC_K: // debug keyboard toggle
            debug_keyboard = !debug_keyboard;
    4d92:	90 91 d8 01 	lds	r25, 0x01D8
    4d96:	92 fb       	bst	r25, 2
    4d98:	cc 27       	eor	r28, r28
    4d9a:	c0 f9       	bld	r28, 0
    4d9c:	81 e0       	ldi	r24, 0x01	; 1
    4d9e:	c8 27       	eor	r28, r24
    4da0:	89 2f       	mov	r24, r25
    4da2:	c0 fb       	bst	r28, 0
    4da4:	82 f9       	bld	r24, 2
    4da6:	80 93 d8 01 	sts	0x01D8, r24
            if (debug_keyboard) {
    4daa:	cc 23       	and	r28, r28
    4dac:	19 f0       	breq	.+6      	; 0x4db4 <command_common+0x3e8>
                print("\nkeyboard: on\n");
    4dae:	86 e9       	ldi	r24, 0x96	; 150
    4db0:	9c e0       	ldi	r25, 0x0C	; 12
    4db2:	13 c0       	rjmp	.+38     	; 0x4dda <command_common+0x40e>
                debug_enable = true;
            } else {
                print("\nkeyboard: off\n");
    4db4:	86 e8       	ldi	r24, 0x86	; 134
    4db6:	9c e0       	ldi	r25, 0x0C	; 12
    4db8:	bb cf       	rjmp	.-138    	; 0x4d30 <command_common+0x364>
            }
            break;
        case KC_M: // debug mouse toggle
            debug_mouse = !debug_mouse;
    4dba:	90 91 d8 01 	lds	r25, 0x01D8
    4dbe:	93 fb       	bst	r25, 3
    4dc0:	cc 27       	eor	r28, r28
    4dc2:	c0 f9       	bld	r28, 0
    4dc4:	81 e0       	ldi	r24, 0x01	; 1
    4dc6:	c8 27       	eor	r28, r24
    4dc8:	89 2f       	mov	r24, r25
    4dca:	c0 fb       	bst	r28, 0
    4dcc:	83 f9       	bld	r24, 3
    4dce:	80 93 d8 01 	sts	0x01D8, r24
            if (debug_mouse) {
    4dd2:	cc 23       	and	r28, r28
    4dd4:	51 f0       	breq	.+20     	; 0x4dea <command_common+0x41e>
                print("\nmouse: on\n");
    4dd6:	8a e7       	ldi	r24, 0x7A	; 122
    4dd8:	9c e0       	ldi	r25, 0x0C	; 12
    4dda:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
                debug_enable = true;
    4dde:	80 91 d8 01 	lds	r24, 0x01D8
    4de2:	81 60       	ori	r24, 0x01	; 1
    4de4:	80 93 d8 01 	sts	0x01D8, r24
    4de8:	61 c0       	rjmp	.+194    	; 0x4eac <command_common+0x4e0>
            } else {
                print("\nmouse: off\n");
    4dea:	8d e6       	ldi	r24, 0x6D	; 109
    4dec:	9c e0       	ldi	r25, 0x0C	; 12
    4dee:	a0 cf       	rjmp	.-192    	; 0x4d30 <command_common+0x364>
            // TODO
            );
#endif
            break;
        case KC_S:
            print("\n\t- Status -\n");
    4df0:	88 e5       	ldi	r24, 0x58	; 88
    4df2:	9b e0       	ldi	r25, 0x0B	; 11
    4df4:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
            print_val_hex8(host_keyboard_leds());
    4df8:	0e 94 57 10 	call	0x20ae	; 0x20ae <host_keyboard_leds>
    4dfc:	1f 92       	push	r1
    4dfe:	8f 93       	push	r24
    4e00:	8e e3       	ldi	r24, 0x3E	; 62
    4e02:	9b e0       	ldi	r25, 0x0B	; 11
    4e04:	9f 93       	push	r25
    4e06:	8f 93       	push	r24
    4e08:	0e 94 6b 07 	call	0xed6	; 0xed6 <__xprintf>
            print_val_hex8(keyboard_protocol);
    4e0c:	80 91 0b 01 	lds	r24, 0x010B
    4e10:	1f 92       	push	r1
    4e12:	8f 93       	push	r24
    4e14:	87 e2       	ldi	r24, 0x27	; 39
    4e16:	9b e0       	ldi	r25, 0x0B	; 11
    4e18:	9f 93       	push	r25
    4e1a:	8f 93       	push	r24
    4e1c:	0e 94 6b 07 	call	0xed6	; 0xed6 <__xprintf>
            print_val_hex8(keyboard_idle);
    4e20:	80 91 68 01 	lds	r24, 0x0168
    4e24:	1f 92       	push	r1
    4e26:	8f 93       	push	r24
    4e28:	84 e1       	ldi	r24, 0x14	; 20
    4e2a:	9b e0       	ldi	r25, 0x0B	; 11
    4e2c:	9f 93       	push	r25
    4e2e:	8f 93       	push	r24
    4e30:	0e 94 6b 07 	call	0xed6	; 0xed6 <__xprintf>
#ifdef NKRO_ENABLE
            print_val_hex8(keyboard_nkro);
    4e34:	80 91 0c 01 	lds	r24, 0x010C
    4e38:	1f 92       	push	r1
    4e3a:	8f 93       	push	r24
    4e3c:	81 e0       	ldi	r24, 0x01	; 1
    4e3e:	9b e0       	ldi	r25, 0x0B	; 11
    4e40:	9f 93       	push	r25
    4e42:	8f 93       	push	r24
    4e44:	0e 94 6b 07 	call	0xed6	; 0xed6 <__xprintf>
#endif
            print_val_hex32(timer_read32());
    4e48:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <timer_read32>
    4e4c:	9f 93       	push	r25
    4e4e:	8f 93       	push	r24
    4e50:	7f 93       	push	r23
    4e52:	6f 93       	push	r22
    4e54:	8a ee       	ldi	r24, 0xEA	; 234
    4e56:	9a e0       	ldi	r25, 0x0A	; 10
    4e58:	9f 93       	push	r25
    4e5a:	8f 93       	push	r24
    4e5c:	0e 94 6b 07 	call	0xed6	; 0xed6 <__xprintf>
#ifdef PROTOCOL_PJRC
#   if USB_COUNT_SOF
            print_val_hex8(usbSofCount);
#   endif
#endif
            break;
    4e60:	8d b7       	in	r24, 0x3d	; 61
    4e62:	9e b7       	in	r25, 0x3e	; 62
    4e64:	46 96       	adiw	r24, 0x16	; 22
    4e66:	0f b6       	in	r0, 0x3f	; 63
    4e68:	f8 94       	cli
    4e6a:	9e bf       	out	0x3e, r25	; 62
    4e6c:	0f be       	out	0x3f, r0	; 63
    4e6e:	8d bf       	out	0x3d, r24	; 61
    4e70:	61 cf       	rjmp	.-318    	; 0x4d34 <command_common+0x368>
#ifdef NKRO_ENABLE
        case KC_N:
            clear_keyboard(); //Prevents stuck keys.
    4e72:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <clear_keyboard>
            keyboard_nkro = !keyboard_nkro;
    4e76:	c0 91 0c 01 	lds	r28, 0x010C
    4e7a:	81 e0       	ldi	r24, 0x01	; 1
    4e7c:	c8 27       	eor	r28, r24
    4e7e:	c0 93 0c 01 	sts	0x010C, r28
            if (keyboard_nkro) {
    4e82:	cc 23       	and	r28, r28
    4e84:	29 f0       	breq	.+10     	; 0x4e90 <command_common+0x4c4>
                print("NKRO: on\n");
    4e86:	80 ee       	ldi	r24, 0xE0	; 224
    4e88:	9a e0       	ldi	r25, 0x0A	; 10
    4e8a:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    4e8e:	0e c0       	rjmp	.+28     	; 0x4eac <command_common+0x4e0>
            } else {
                print("NKRO: off\n");
    4e90:	85 ed       	ldi	r24, 0xD5	; 213
    4e92:	9a e0       	ldi	r25, 0x0A	; 10
    4e94:	4d cf       	rjmp	.-358    	; 0x4d30 <command_common+0x364>
#endif
        case KC_ESC:
        case KC_GRV:
        case KC_0:
        case KC_F10:
            switch_default_layer(0);
    4e96:	80 e0       	ldi	r24, 0x00	; 0
    4e98:	01 c0       	rjmp	.+2      	; 0x4e9c <command_common+0x4d0>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
            break;
        case KC_F1 ... KC_F9:
            switch_default_layer((code - KC_F1) + 1);
    4e9a:	89 53       	subi	r24, 0x39	; 57
    4e9c:	0e 94 c6 24 	call	0x498c	; 0x498c <switch_default_layer>
    4ea0:	49 cf       	rjmp	.-366    	; 0x4d34 <command_common+0x368>
            break;
        default:
            print("?");
    4ea2:	83 ed       	ldi	r24, 0xD3	; 211
    4ea4:	9a e0       	ldi	r25, 0x0A	; 10
    4ea6:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
            return false;
    4eaa:	c0 e0       	ldi	r28, 0x00	; 0
    }
    return true;
}
    4eac:	8c 2f       	mov	r24, r28
    4eae:	cf 91       	pop	r28
    4eb0:	08 95       	ret

00004eb2 <command_extra>:
bool command_extra(uint8_t code) __attribute__ ((weak));
bool command_extra(uint8_t code)
{
    (void)code;
    return false;
}
    4eb2:	80 e0       	ldi	r24, 0x00	; 0
    4eb4:	08 95       	ret

00004eb6 <command_console_extra>:
bool command_console_extra(uint8_t code) __attribute__ ((weak));
bool command_console_extra(uint8_t code)
{
    (void)code;
    return false;
}
    4eb6:	80 e0       	ldi	r24, 0x00	; 0
    4eb8:	08 95       	ret

00004eba <command_proc>:

command_state_t command_state = ONESHOT;


bool command_proc(uint8_t code)
{
    4eba:	cf 93       	push	r28
    4ebc:	c8 2f       	mov	r28, r24
    switch (command_state) {
    4ebe:	80 91 e8 01 	lds	r24, 0x01E8
    4ec2:	81 30       	cpi	r24, 0x01	; 1
    4ec4:	71 f0       	breq	.+28     	; 0x4ee2 <command_proc+0x28>
    4ec6:	20 f0       	brcs	.+8      	; 0x4ed0 <command_proc+0x16>
    4ec8:	82 30       	cpi	r24, 0x02	; 2
    4eca:	09 f4       	brne	.+2      	; 0x4ece <command_proc+0x14>
    4ecc:	4b c0       	rjmp	.+150    	; 0x4f64 <command_proc+0xaa>
    4ece:	42 c1       	rjmp	.+644    	; 0x5154 <command_proc+0x29a>
        case ONESHOT:
            if (!IS_COMMAND())
    4ed0:	e0 91 0d 01 	lds	r30, 0x010D
    4ed4:	f0 91 0e 01 	lds	r31, 0x010E
    4ed8:	80 81       	ld	r24, Z
    4eda:	82 32       	cpi	r24, 0x22	; 34
    4edc:	09 f0       	breq	.+2      	; 0x4ee0 <command_proc+0x26>
    4ede:	3c c1       	rjmp	.+632    	; 0x5158 <command_proc+0x29e>
    4ee0:	07 c0       	rjmp	.+14     	; 0x4ef0 <command_proc+0x36>
                return false;
            return (command_extra(code) || command_common(code));
            break;
        case CONSOLE:
            if (IS_COMMAND())
    4ee2:	e0 91 0d 01 	lds	r30, 0x010D
    4ee6:	f0 91 0e 01 	lds	r31, 0x010E
    4eea:	80 81       	ld	r24, Z
    4eec:	82 32       	cpi	r24, 0x22	; 34
    4eee:	61 f4       	brne	.+24     	; 0x4f08 <command_proc+0x4e>
                return (command_extra(code) || command_common(code));
    4ef0:	8c 2f       	mov	r24, r28
    4ef2:	0e 94 59 27 	call	0x4eb2	; 0x4eb2 <command_extra>
    4ef6:	81 11       	cpse	r24, r1
    4ef8:	04 c0       	rjmp	.+8      	; 0x4f02 <command_proc+0x48>
    4efa:	8c 2f       	mov	r24, r28
    4efc:	0e 94 e6 24 	call	0x49cc	; 0x49cc <command_common>
    4f00:	2f c0       	rjmp	.+94     	; 0x4f60 <command_proc+0xa6>
    4f02:	81 e0       	ldi	r24, 0x01	; 1
    4f04:	90 e0       	ldi	r25, 0x00	; 0
    4f06:	2c c0       	rjmp	.+88     	; 0x4f60 <command_proc+0xa6>
            else
                return (command_console_extra(code) || command_console(code));
    4f08:	8c 2f       	mov	r24, r28
    4f0a:	0e 94 5b 27 	call	0x4eb6	; 0x4eb6 <command_console_extra>
    4f0e:	81 11       	cpse	r24, r1
    4f10:	26 c0       	rjmp	.+76     	; 0x4f5e <command_proc+0xa4>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    4f12:	c4 31       	cpi	r28, 0x14	; 20
    4f14:	e1 f0       	breq	.+56     	; 0x4f4e <command_proc+0x94>
    4f16:	70 f4       	brcc	.+28     	; 0x4f34 <command_proc+0x7a>
    4f18:	cb 30       	cpi	r28, 0x0B	; 11
    4f1a:	81 f0       	breq	.+32     	; 0x4f3c <command_proc+0x82>
    4f1c:	c0 31       	cpi	r28, 0x10	; 16
    4f1e:	d1 f4       	brne	.+52     	; 0x4f54 <command_proc+0x9a>
        case KC_ESC:
            command_state = ONESHOT;
            return false;
#ifdef MOUSEKEY_ENABLE
        case KC_M:
            mousekey_console_help();
    4f20:	0e 94 8e 23 	call	0x471c	; 0x471c <mousekey_console_help>
            print("M> ");
    4f24:	87 eb       	ldi	r24, 0xB7	; 183
    4f26:	98 e0       	ldi	r25, 0x08	; 8
    4f28:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
            command_state = MOUSEKEY;
    4f2c:	82 e0       	ldi	r24, 0x02	; 2
    4f2e:	80 93 e8 01 	sts	0x01E8, r24
    4f32:	15 c0       	rjmp	.+42     	; 0x4f5e <command_proc+0xa4>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    4f34:	c9 32       	cpi	r28, 0x29	; 41
    4f36:	59 f0       	breq	.+22     	; 0x4f4e <command_proc+0x94>
    4f38:	c8 33       	cpi	r28, 0x38	; 56
    4f3a:	61 f4       	brne	.+24     	; 0x4f54 <command_proc+0x9a>
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    4f3c:	84 ec       	ldi	r24, 0xC4	; 196
    4f3e:	98 e0       	ldi	r25, 0x08	; 8
    4f40:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
#endif
        default:
            print("?");
            return false;
    }
    print("C> ");
    4f44:	8b eb       	ldi	r24, 0xBB	; 187
    4f46:	98 e0       	ldi	r25, 0x08	; 8
    4f48:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    4f4c:	08 c0       	rjmp	.+16     	; 0x4f5e <command_proc+0xa4>
        case KC_SLASH: /* ? */
            command_console_help();
            break;
        case KC_Q:
        case KC_ESC:
            command_state = ONESHOT;
    4f4e:	10 92 e8 01 	sts	0x01E8, r1
    4f52:	04 c1       	rjmp	.+520    	; 0x515c <command_proc+0x2a2>
            print("M> ");
            command_state = MOUSEKEY;
            return true;
#endif
        default:
            print("?");
    4f54:	85 eb       	ldi	r24, 0xB5	; 181
    4f56:	98 e0       	ldi	r25, 0x08	; 8
    4f58:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    4f5c:	ff c0       	rjmp	.+510    	; 0x515c <command_proc+0x2a2>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    4f5e:	81 e0       	ldi	r24, 0x01	; 1
    4f60:	81 70       	andi	r24, 0x01	; 1
    4f62:	fe c0       	rjmp	.+508    	; 0x5160 <command_proc+0x2a6>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    4f64:	c4 32       	cpi	r28, 0x24	; 36
    4f66:	28 f5       	brcc	.+74     	; 0x4fb2 <command_proc+0xf8>
    4f68:	ce 31       	cpi	r28, 0x1E	; 30
    4f6a:	08 f0       	brcs	.+2      	; 0x4f6e <command_proc+0xb4>
    4f6c:	c1 c0       	rjmp	.+386    	; 0x50f0 <command_proc+0x236>
    4f6e:	cb 30       	cpi	r28, 0x0B	; 11
    4f70:	a1 f1       	breq	.+104    	; 0x4fda <command_proc+0x120>
    4f72:	d0 f4       	brcc	.+52     	; 0x4fa8 <command_proc+0xee>
    4f74:	c7 30       	cpi	r28, 0x07	; 7
    4f76:	09 f0       	breq	.+2      	; 0x4f7a <command_proc+0xc0>
    4f78:	d3 c0       	rjmp	.+422    	; 0x5120 <command_proc+0x266>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
            break;
        case KC_D:
            mk_delay = MOUSEKEY_DELAY/10;
    4f7a:	8e e1       	ldi	r24, 0x1E	; 30
    4f7c:	80 93 14 01 	sts	0x0114, r24
            mk_interval = MOUSEKEY_INTERVAL;
    4f80:	82 e3       	ldi	r24, 0x32	; 50
    4f82:	80 93 13 01 	sts	0x0113, r24
            mk_max_speed = MOUSEKEY_MAX_SPEED;
    4f86:	8a e0       	ldi	r24, 0x0A	; 10
    4f88:	80 93 12 01 	sts	0x0112, r24
            mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
    4f8c:	84 e1       	ldi	r24, 0x14	; 20
    4f8e:	80 93 11 01 	sts	0x0111, r24
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
    4f92:	88 e0       	ldi	r24, 0x08	; 8
    4f94:	80 93 10 01 	sts	0x0110, r24
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
    4f98:	88 e2       	ldi	r24, 0x28	; 40
    4f9a:	80 93 0f 01 	sts	0x010F, r24
            print("set default\n");
    4f9e:	8b e5       	ldi	r24, 0x5B	; 91
    4fa0:	97 e0       	ldi	r25, 0x07	; 7
    4fa2:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    4fa6:	bf c0       	rjmp	.+382    	; 0x5126 <command_proc+0x26c>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    4fa8:	c3 31       	cpi	r28, 0x13	; 19
    4faa:	49 f1       	breq	.+82     	; 0x4ffe <command_proc+0x144>
    4fac:	c4 31       	cpi	r28, 0x14	; 20
    4fae:	c1 f0       	breq	.+48     	; 0x4fe0 <command_proc+0x126>
    4fb0:	b7 c0       	rjmp	.+366    	; 0x5120 <command_proc+0x266>
    4fb2:	cb 34       	cpi	r28, 0x4B	; 75
    4fb4:	09 f4       	brne	.+2      	; 0x4fb8 <command_proc+0xfe>
    4fb6:	a9 c0       	rjmp	.+338    	; 0x510a <command_proc+0x250>
    4fb8:	28 f4       	brcc	.+10     	; 0x4fc4 <command_proc+0x10a>
    4fba:	c9 32       	cpi	r28, 0x29	; 41
    4fbc:	89 f0       	breq	.+34     	; 0x4fe0 <command_proc+0x126>
    4fbe:	c8 33       	cpi	r28, 0x38	; 56
    4fc0:	61 f0       	breq	.+24     	; 0x4fda <command_proc+0x120>
    4fc2:	ae c0       	rjmp	.+348    	; 0x5120 <command_proc+0x266>
    4fc4:	c1 35       	cpi	r28, 0x51	; 81
    4fc6:	09 f4       	brne	.+2      	; 0x4fca <command_proc+0x110>
    4fc8:	9e c0       	rjmp	.+316    	; 0x5106 <command_proc+0x24c>
    4fca:	c2 35       	cpi	r28, 0x52	; 82
    4fcc:	09 f4       	brne	.+2      	; 0x4fd0 <command_proc+0x116>
    4fce:	99 c0       	rjmp	.+306    	; 0x5102 <command_proc+0x248>
    4fd0:	ce 34       	cpi	r28, 0x4E	; 78
    4fd2:	09 f0       	breq	.+2      	; 0x4fd6 <command_proc+0x11c>
    4fd4:	a5 c0       	rjmp	.+330    	; 0x5120 <command_proc+0x266>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    4fd6:	6a e0       	ldi	r22, 0x0A	; 10
    4fd8:	9e c0       	rjmp	.+316    	; 0x5116 <command_proc+0x25c>
static bool mousekey_console(uint8_t code)
{
    switch (code) {
        case KC_H:
        case KC_SLASH: /* ? */
            mousekey_console_help();
    4fda:	0e 94 8e 23 	call	0x471c	; 0x471c <mousekey_console_help>
    4fde:	a3 c0       	rjmp	.+326    	; 0x5126 <command_proc+0x26c>
            break;
        case KC_Q:
        case KC_ESC:
            if (mousekey_param) {
    4fe0:	80 91 e7 01 	lds	r24, 0x01E7
    4fe4:	88 23       	and	r24, r24
    4fe6:	19 f0       	breq	.+6      	; 0x4fee <command_proc+0x134>
                mousekey_param = 0;
    4fe8:	10 92 e7 01 	sts	0x01E7, r1
    4fec:	9c c0       	rjmp	.+312    	; 0x5126 <command_proc+0x26c>
            } else {
                print("C> ");
    4fee:	88 e6       	ldi	r24, 0x68	; 104
    4ff0:	97 e0       	ldi	r25, 0x07	; 7
    4ff2:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
                command_state = CONSOLE;
    4ff6:	81 e0       	ldi	r24, 0x01	; 1
    4ff8:	80 93 e8 01 	sts	0x01E8, r24
    4ffc:	b1 c0       	rjmp	.+354    	; 0x5160 <command_proc+0x2a6>
 ***********************************************************/
static uint8_t mousekey_param = 0;

static void mousekey_param_print(void)
{
    print("\n\t- Values -\n");
    4ffe:	82 e4       	ldi	r24, 0x42	; 66
    5000:	97 e0       	ldi	r25, 0x07	; 7
    5002:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
    5006:	80 e3       	ldi	r24, 0x30	; 48
    5008:	97 e0       	ldi	r25, 0x07	; 7
    500a:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    500e:	80 91 14 01 	lds	r24, 0x0114
    5012:	1f 92       	push	r1
    5014:	8f 93       	push	r24
    5016:	8d e2       	ldi	r24, 0x2D	; 45
    5018:	97 e0       	ldi	r25, 0x07	; 7
    501a:	9f 93       	push	r25
    501c:	8f 93       	push	r24
    501e:	0e 94 6b 07 	call	0xed6	; 0xed6 <__xprintf>
    5022:	8b e2       	ldi	r24, 0x2B	; 43
    5024:	97 e0       	ldi	r25, 0x07	; 7
    5026:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    print("2: interval(ms): "); pdec(mk_interval); print("\n");
    502a:	89 e1       	ldi	r24, 0x19	; 25
    502c:	97 e0       	ldi	r25, 0x07	; 7
    502e:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    5032:	80 91 13 01 	lds	r24, 0x0113
    5036:	1f 92       	push	r1
    5038:	8f 93       	push	r24
    503a:	86 e1       	ldi	r24, 0x16	; 22
    503c:	97 e0       	ldi	r25, 0x07	; 7
    503e:	9f 93       	push	r25
    5040:	8f 93       	push	r24
    5042:	0e 94 6b 07 	call	0xed6	; 0xed6 <__xprintf>
    5046:	84 e1       	ldi	r24, 0x14	; 20
    5048:	97 e0       	ldi	r25, 0x07	; 7
    504a:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    print("3: max_speed: "); pdec(mk_max_speed); print("\n");
    504e:	85 e0       	ldi	r24, 0x05	; 5
    5050:	97 e0       	ldi	r25, 0x07	; 7
    5052:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    5056:	80 91 12 01 	lds	r24, 0x0112
    505a:	1f 92       	push	r1
    505c:	8f 93       	push	r24
    505e:	82 e0       	ldi	r24, 0x02	; 2
    5060:	97 e0       	ldi	r25, 0x07	; 7
    5062:	9f 93       	push	r25
    5064:	8f 93       	push	r24
    5066:	0e 94 6b 07 	call	0xed6	; 0xed6 <__xprintf>
    506a:	80 e0       	ldi	r24, 0x00	; 0
    506c:	97 e0       	ldi	r25, 0x07	; 7
    506e:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
    5072:	8f ee       	ldi	r24, 0xEF	; 239
    5074:	96 e0       	ldi	r25, 0x06	; 6
    5076:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    507a:	80 91 11 01 	lds	r24, 0x0111
    507e:	1f 92       	push	r1
    5080:	8f 93       	push	r24
    5082:	8c ee       	ldi	r24, 0xEC	; 236
    5084:	96 e0       	ldi	r25, 0x06	; 6
    5086:	9f 93       	push	r25
    5088:	8f 93       	push	r24
    508a:	0e 94 6b 07 	call	0xed6	; 0xed6 <__xprintf>
    508e:	8a ee       	ldi	r24, 0xEA	; 234
    5090:	96 e0       	ldi	r25, 0x06	; 6
    5092:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
    5096:	85 ed       	ldi	r24, 0xD5	; 213
    5098:	96 e0       	ldi	r25, 0x06	; 6
    509a:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    509e:	80 91 10 01 	lds	r24, 0x0110
    50a2:	1f 92       	push	r1
    50a4:	8f 93       	push	r24
    50a6:	82 ed       	ldi	r24, 0xD2	; 210
    50a8:	96 e0       	ldi	r25, 0x06	; 6
    50aa:	9f 93       	push	r25
    50ac:	8f 93       	push	r24
    50ae:	0e 94 6b 07 	call	0xed6	; 0xed6 <__xprintf>
    50b2:	80 ed       	ldi	r24, 0xD0	; 208
    50b4:	96 e0       	ldi	r25, 0x06	; 6
    50b6:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
    50ba:	89 eb       	ldi	r24, 0xB9	; 185
    50bc:	96 e0       	ldi	r25, 0x06	; 6
    50be:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    50c2:	80 91 0f 01 	lds	r24, 0x010F
    50c6:	1f 92       	push	r1
    50c8:	8f 93       	push	r24
    50ca:	86 eb       	ldi	r24, 0xB6	; 182
    50cc:	96 e0       	ldi	r25, 0x06	; 6
    50ce:	9f 93       	push	r25
    50d0:	8f 93       	push	r24
    50d2:	0e 94 6b 07 	call	0xed6	; 0xed6 <__xprintf>
    50d6:	84 eb       	ldi	r24, 0xB4	; 180
    50d8:	96 e0       	ldi	r25, 0x06	; 6
    50da:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
    50de:	8d b7       	in	r24, 0x3d	; 61
    50e0:	9e b7       	in	r25, 0x3e	; 62
    50e2:	48 96       	adiw	r24, 0x18	; 24
    50e4:	0f b6       	in	r0, 0x3f	; 63
    50e6:	f8 94       	cli
    50e8:	9e bf       	out	0x3e, r25	; 62
    50ea:	0f be       	out	0x3f, r0	; 63
    50ec:	8d bf       	out	0x3d, r24	; 61
    50ee:	1b c0       	rjmp	.+54     	; 0x5126 <command_proc+0x26c>
    50f0:	ce 51       	subi	r28, 0x1E	; 30
    50f2:	ec 2f       	mov	r30, r28
    50f4:	f0 e0       	ldi	r31, 0x00	; 0
    50f6:	e2 5d       	subi	r30, 0xD2	; 210
    50f8:	fe 4f       	sbci	r31, 0xFE	; 254
        case KC_2:
        case KC_3:
        case KC_4:
        case KC_5:
        case KC_6:
            mousekey_param = numkey2num(code);
    50fa:	80 81       	ld	r24, Z
    50fc:	80 93 e7 01 	sts	0x01E7, r24
    5100:	12 c0       	rjmp	.+36     	; 0x5126 <command_proc+0x26c>
            break;
        case KC_UP:
            mousekey_param_inc(mousekey_param, 1);
    5102:	61 e0       	ldi	r22, 0x01	; 1
    5104:	03 c0       	rjmp	.+6      	; 0x510c <command_proc+0x252>
            break;
        case KC_DOWN:
            mousekey_param_dec(mousekey_param, 1);
    5106:	61 e0       	ldi	r22, 0x01	; 1
    5108:	06 c0       	rjmp	.+12     	; 0x5116 <command_proc+0x25c>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
    510a:	6a e0       	ldi	r22, 0x0A	; 10
    510c:	80 91 e7 01 	lds	r24, 0x01E7
    5110:	0e 94 a5 23 	call	0x474a	; 0x474a <mousekey_param_inc>
    5114:	08 c0       	rjmp	.+16     	; 0x5126 <command_proc+0x26c>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    5116:	80 91 e7 01 	lds	r24, 0x01E7
    511a:	0e 94 48 24 	call	0x4890	; 0x4890 <mousekey_param_dec>
    511e:	03 c0       	rjmp	.+6      	; 0x5126 <command_proc+0x26c>
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
            print("set default\n");
            break;
        default:
            print("?");
    5120:	89 e5       	ldi	r24, 0x59	; 89
    5122:	97 e0       	ldi	r25, 0x07	; 7
    5124:	13 c0       	rjmp	.+38     	; 0x514c <command_proc+0x292>
            return false;
    }
    if (mousekey_param) {
    5126:	80 91 e7 01 	lds	r24, 0x01E7
    512a:	88 23       	and	r24, r24
    512c:	69 f0       	breq	.+26     	; 0x5148 <command_proc+0x28e>
        xprintf("M%d> ", mousekey_param);
    512e:	1f 92       	push	r1
    5130:	8f 93       	push	r24
    5132:	83 e5       	ldi	r24, 0x53	; 83
    5134:	97 e0       	ldi	r25, 0x07	; 7
    5136:	9f 93       	push	r25
    5138:	8f 93       	push	r24
    513a:	0e 94 6b 07 	call	0xed6	; 0xed6 <__xprintf>
    513e:	0f 90       	pop	r0
    5140:	0f 90       	pop	r0
    5142:	0f 90       	pop	r0
    5144:	0f 90       	pop	r0
    5146:	04 c0       	rjmp	.+8      	; 0x5150 <command_proc+0x296>
    } else {
        print("M>" );
    5148:	80 e5       	ldi	r24, 0x50	; 80
    514a:	97 e0       	ldi	r25, 0x07	; 7
    514c:	0e 94 d2 06 	call	0xda4	; 0xda4 <xputs>
#endif
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
    5150:	81 e0       	ldi	r24, 0x01	; 1
    5152:	06 c0       	rjmp	.+12     	; 0x5160 <command_proc+0x2a6>
        case MOUSEKEY:
            mousekey_console(code);
            break;
#endif
        default:
            command_state = ONESHOT;
    5154:	10 92 e8 01 	sts	0x01E8, r1
bool command_proc(uint8_t code)
{
    switch (command_state) {
        case ONESHOT:
            if (!IS_COMMAND())
                return false;
    5158:	80 e0       	ldi	r24, 0x00	; 0
    515a:	02 c0       	rjmp	.+4      	; 0x5160 <command_proc+0x2a6>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    515c:	80 e0       	ldi	r24, 0x00	; 0
    515e:	00 cf       	rjmp	.-512    	; 0x4f60 <command_proc+0xa6>
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
}
    5160:	cf 91       	pop	r28
    5162:	08 95       	ret

00005164 <__fixsfsi>:
    5164:	0e 94 b9 28 	call	0x5172	; 0x5172 <__fixunssfsi>
    5168:	68 94       	set
    516a:	b1 11       	cpse	r27, r1
    516c:	0c 94 48 29 	jmp	0x5290	; 0x5290 <__fp_szero>
    5170:	08 95       	ret

00005172 <__fixunssfsi>:
    5172:	0e 94 2d 29 	call	0x525a	; 0x525a <__fp_splitA>
    5176:	88 f0       	brcs	.+34     	; 0x519a <__fixunssfsi+0x28>
    5178:	9f 57       	subi	r25, 0x7F	; 127
    517a:	98 f0       	brcs	.+38     	; 0x51a2 <__fixunssfsi+0x30>
    517c:	b9 2f       	mov	r27, r25
    517e:	99 27       	eor	r25, r25
    5180:	b7 51       	subi	r27, 0x17	; 23
    5182:	b0 f0       	brcs	.+44     	; 0x51b0 <__fixunssfsi+0x3e>
    5184:	e1 f0       	breq	.+56     	; 0x51be <__fixunssfsi+0x4c>
    5186:	66 0f       	add	r22, r22
    5188:	77 1f       	adc	r23, r23
    518a:	88 1f       	adc	r24, r24
    518c:	99 1f       	adc	r25, r25
    518e:	1a f0       	brmi	.+6      	; 0x5196 <__fixunssfsi+0x24>
    5190:	ba 95       	dec	r27
    5192:	c9 f7       	brne	.-14     	; 0x5186 <__fixunssfsi+0x14>
    5194:	14 c0       	rjmp	.+40     	; 0x51be <__fixunssfsi+0x4c>
    5196:	b1 30       	cpi	r27, 0x01	; 1
    5198:	91 f0       	breq	.+36     	; 0x51be <__fixunssfsi+0x4c>
    519a:	0e 94 47 29 	call	0x528e	; 0x528e <__fp_zero>
    519e:	b1 e0       	ldi	r27, 0x01	; 1
    51a0:	08 95       	ret
    51a2:	0c 94 47 29 	jmp	0x528e	; 0x528e <__fp_zero>
    51a6:	67 2f       	mov	r22, r23
    51a8:	78 2f       	mov	r23, r24
    51aa:	88 27       	eor	r24, r24
    51ac:	b8 5f       	subi	r27, 0xF8	; 248
    51ae:	39 f0       	breq	.+14     	; 0x51be <__fixunssfsi+0x4c>
    51b0:	b9 3f       	cpi	r27, 0xF9	; 249
    51b2:	cc f3       	brlt	.-14     	; 0x51a6 <__fixunssfsi+0x34>
    51b4:	86 95       	lsr	r24
    51b6:	77 95       	ror	r23
    51b8:	67 95       	ror	r22
    51ba:	b3 95       	inc	r27
    51bc:	d9 f7       	brne	.-10     	; 0x51b4 <__fixunssfsi+0x42>
    51be:	3e f4       	brtc	.+14     	; 0x51ce <__fixunssfsi+0x5c>
    51c0:	90 95       	com	r25
    51c2:	80 95       	com	r24
    51c4:	70 95       	com	r23
    51c6:	61 95       	neg	r22
    51c8:	7f 4f       	sbci	r23, 0xFF	; 255
    51ca:	8f 4f       	sbci	r24, 0xFF	; 255
    51cc:	9f 4f       	sbci	r25, 0xFF	; 255
    51ce:	08 95       	ret

000051d0 <__floatunsisf>:
    51d0:	e8 94       	clt
    51d2:	09 c0       	rjmp	.+18     	; 0x51e6 <__floatsisf+0x12>

000051d4 <__floatsisf>:
    51d4:	97 fb       	bst	r25, 7
    51d6:	3e f4       	brtc	.+14     	; 0x51e6 <__floatsisf+0x12>
    51d8:	90 95       	com	r25
    51da:	80 95       	com	r24
    51dc:	70 95       	com	r23
    51de:	61 95       	neg	r22
    51e0:	7f 4f       	sbci	r23, 0xFF	; 255
    51e2:	8f 4f       	sbci	r24, 0xFF	; 255
    51e4:	9f 4f       	sbci	r25, 0xFF	; 255
    51e6:	99 23       	and	r25, r25
    51e8:	a9 f0       	breq	.+42     	; 0x5214 <__floatsisf+0x40>
    51ea:	f9 2f       	mov	r31, r25
    51ec:	96 e9       	ldi	r25, 0x96	; 150
    51ee:	bb 27       	eor	r27, r27
    51f0:	93 95       	inc	r25
    51f2:	f6 95       	lsr	r31
    51f4:	87 95       	ror	r24
    51f6:	77 95       	ror	r23
    51f8:	67 95       	ror	r22
    51fa:	b7 95       	ror	r27
    51fc:	f1 11       	cpse	r31, r1
    51fe:	f8 cf       	rjmp	.-16     	; 0x51f0 <__floatsisf+0x1c>
    5200:	fa f4       	brpl	.+62     	; 0x5240 <__floatsisf+0x6c>
    5202:	bb 0f       	add	r27, r27
    5204:	11 f4       	brne	.+4      	; 0x520a <__floatsisf+0x36>
    5206:	60 ff       	sbrs	r22, 0
    5208:	1b c0       	rjmp	.+54     	; 0x5240 <__floatsisf+0x6c>
    520a:	6f 5f       	subi	r22, 0xFF	; 255
    520c:	7f 4f       	sbci	r23, 0xFF	; 255
    520e:	8f 4f       	sbci	r24, 0xFF	; 255
    5210:	9f 4f       	sbci	r25, 0xFF	; 255
    5212:	16 c0       	rjmp	.+44     	; 0x5240 <__floatsisf+0x6c>
    5214:	88 23       	and	r24, r24
    5216:	11 f0       	breq	.+4      	; 0x521c <__floatsisf+0x48>
    5218:	96 e9       	ldi	r25, 0x96	; 150
    521a:	11 c0       	rjmp	.+34     	; 0x523e <__floatsisf+0x6a>
    521c:	77 23       	and	r23, r23
    521e:	21 f0       	breq	.+8      	; 0x5228 <__floatsisf+0x54>
    5220:	9e e8       	ldi	r25, 0x8E	; 142
    5222:	87 2f       	mov	r24, r23
    5224:	76 2f       	mov	r23, r22
    5226:	05 c0       	rjmp	.+10     	; 0x5232 <__floatsisf+0x5e>
    5228:	66 23       	and	r22, r22
    522a:	71 f0       	breq	.+28     	; 0x5248 <__floatsisf+0x74>
    522c:	96 e8       	ldi	r25, 0x86	; 134
    522e:	86 2f       	mov	r24, r22
    5230:	70 e0       	ldi	r23, 0x00	; 0
    5232:	60 e0       	ldi	r22, 0x00	; 0
    5234:	2a f0       	brmi	.+10     	; 0x5240 <__floatsisf+0x6c>
    5236:	9a 95       	dec	r25
    5238:	66 0f       	add	r22, r22
    523a:	77 1f       	adc	r23, r23
    523c:	88 1f       	adc	r24, r24
    523e:	da f7       	brpl	.-10     	; 0x5236 <__floatsisf+0x62>
    5240:	88 0f       	add	r24, r24
    5242:	96 95       	lsr	r25
    5244:	87 95       	ror	r24
    5246:	97 f9       	bld	r25, 7
    5248:	08 95       	ret

0000524a <__fp_split3>:
    524a:	57 fd       	sbrc	r21, 7
    524c:	90 58       	subi	r25, 0x80	; 128
    524e:	44 0f       	add	r20, r20
    5250:	55 1f       	adc	r21, r21
    5252:	59 f0       	breq	.+22     	; 0x526a <__fp_splitA+0x10>
    5254:	5f 3f       	cpi	r21, 0xFF	; 255
    5256:	71 f0       	breq	.+28     	; 0x5274 <__fp_splitA+0x1a>
    5258:	47 95       	ror	r20

0000525a <__fp_splitA>:
    525a:	88 0f       	add	r24, r24
    525c:	97 fb       	bst	r25, 7
    525e:	99 1f       	adc	r25, r25
    5260:	61 f0       	breq	.+24     	; 0x527a <__fp_splitA+0x20>
    5262:	9f 3f       	cpi	r25, 0xFF	; 255
    5264:	79 f0       	breq	.+30     	; 0x5284 <__fp_splitA+0x2a>
    5266:	87 95       	ror	r24
    5268:	08 95       	ret
    526a:	12 16       	cp	r1, r18
    526c:	13 06       	cpc	r1, r19
    526e:	14 06       	cpc	r1, r20
    5270:	55 1f       	adc	r21, r21
    5272:	f2 cf       	rjmp	.-28     	; 0x5258 <__fp_split3+0xe>
    5274:	46 95       	lsr	r20
    5276:	f1 df       	rcall	.-30     	; 0x525a <__fp_splitA>
    5278:	08 c0       	rjmp	.+16     	; 0x528a <__fp_splitA+0x30>
    527a:	16 16       	cp	r1, r22
    527c:	17 06       	cpc	r1, r23
    527e:	18 06       	cpc	r1, r24
    5280:	99 1f       	adc	r25, r25
    5282:	f1 cf       	rjmp	.-30     	; 0x5266 <__fp_splitA+0xc>
    5284:	86 95       	lsr	r24
    5286:	71 05       	cpc	r23, r1
    5288:	61 05       	cpc	r22, r1
    528a:	08 94       	sec
    528c:	08 95       	ret

0000528e <__fp_zero>:
    528e:	e8 94       	clt

00005290 <__fp_szero>:
    5290:	bb 27       	eor	r27, r27
    5292:	66 27       	eor	r22, r22
    5294:	77 27       	eor	r23, r23
    5296:	cb 01       	movw	r24, r22
    5298:	97 f9       	bld	r25, 7
    529a:	08 95       	ret

0000529c <__mulsf3>:
    529c:	0e 94 61 29 	call	0x52c2	; 0x52c2 <__mulsf3x>
    52a0:	0c 94 d2 29 	jmp	0x53a4	; 0x53a4 <__fp_round>
    52a4:	0e 94 c4 29 	call	0x5388	; 0x5388 <__fp_pscA>
    52a8:	38 f0       	brcs	.+14     	; 0x52b8 <__mulsf3+0x1c>
    52aa:	0e 94 cb 29 	call	0x5396	; 0x5396 <__fp_pscB>
    52ae:	20 f0       	brcs	.+8      	; 0x52b8 <__mulsf3+0x1c>
    52b0:	95 23       	and	r25, r21
    52b2:	11 f0       	breq	.+4      	; 0x52b8 <__mulsf3+0x1c>
    52b4:	0c 94 bb 29 	jmp	0x5376	; 0x5376 <__fp_inf>
    52b8:	0c 94 c1 29 	jmp	0x5382	; 0x5382 <__fp_nan>
    52bc:	11 24       	eor	r1, r1
    52be:	0c 94 48 29 	jmp	0x5290	; 0x5290 <__fp_szero>

000052c2 <__mulsf3x>:
    52c2:	0e 94 25 29 	call	0x524a	; 0x524a <__fp_split3>
    52c6:	70 f3       	brcs	.-36     	; 0x52a4 <__mulsf3+0x8>

000052c8 <__mulsf3_pse>:
    52c8:	95 9f       	mul	r25, r21
    52ca:	c1 f3       	breq	.-16     	; 0x52bc <__mulsf3+0x20>
    52cc:	95 0f       	add	r25, r21
    52ce:	50 e0       	ldi	r21, 0x00	; 0
    52d0:	55 1f       	adc	r21, r21
    52d2:	62 9f       	mul	r22, r18
    52d4:	f0 01       	movw	r30, r0
    52d6:	72 9f       	mul	r23, r18
    52d8:	bb 27       	eor	r27, r27
    52da:	f0 0d       	add	r31, r0
    52dc:	b1 1d       	adc	r27, r1
    52de:	63 9f       	mul	r22, r19
    52e0:	aa 27       	eor	r26, r26
    52e2:	f0 0d       	add	r31, r0
    52e4:	b1 1d       	adc	r27, r1
    52e6:	aa 1f       	adc	r26, r26
    52e8:	64 9f       	mul	r22, r20
    52ea:	66 27       	eor	r22, r22
    52ec:	b0 0d       	add	r27, r0
    52ee:	a1 1d       	adc	r26, r1
    52f0:	66 1f       	adc	r22, r22
    52f2:	82 9f       	mul	r24, r18
    52f4:	22 27       	eor	r18, r18
    52f6:	b0 0d       	add	r27, r0
    52f8:	a1 1d       	adc	r26, r1
    52fa:	62 1f       	adc	r22, r18
    52fc:	73 9f       	mul	r23, r19
    52fe:	b0 0d       	add	r27, r0
    5300:	a1 1d       	adc	r26, r1
    5302:	62 1f       	adc	r22, r18
    5304:	83 9f       	mul	r24, r19
    5306:	a0 0d       	add	r26, r0
    5308:	61 1d       	adc	r22, r1
    530a:	22 1f       	adc	r18, r18
    530c:	74 9f       	mul	r23, r20
    530e:	33 27       	eor	r19, r19
    5310:	a0 0d       	add	r26, r0
    5312:	61 1d       	adc	r22, r1
    5314:	23 1f       	adc	r18, r19
    5316:	84 9f       	mul	r24, r20
    5318:	60 0d       	add	r22, r0
    531a:	21 1d       	adc	r18, r1
    531c:	82 2f       	mov	r24, r18
    531e:	76 2f       	mov	r23, r22
    5320:	6a 2f       	mov	r22, r26
    5322:	11 24       	eor	r1, r1
    5324:	9f 57       	subi	r25, 0x7F	; 127
    5326:	50 40       	sbci	r21, 0x00	; 0
    5328:	9a f0       	brmi	.+38     	; 0x5350 <__mulsf3_pse+0x88>
    532a:	f1 f0       	breq	.+60     	; 0x5368 <__mulsf3_pse+0xa0>
    532c:	88 23       	and	r24, r24
    532e:	4a f0       	brmi	.+18     	; 0x5342 <__mulsf3_pse+0x7a>
    5330:	ee 0f       	add	r30, r30
    5332:	ff 1f       	adc	r31, r31
    5334:	bb 1f       	adc	r27, r27
    5336:	66 1f       	adc	r22, r22
    5338:	77 1f       	adc	r23, r23
    533a:	88 1f       	adc	r24, r24
    533c:	91 50       	subi	r25, 0x01	; 1
    533e:	50 40       	sbci	r21, 0x00	; 0
    5340:	a9 f7       	brne	.-22     	; 0x532c <__mulsf3_pse+0x64>
    5342:	9e 3f       	cpi	r25, 0xFE	; 254
    5344:	51 05       	cpc	r21, r1
    5346:	80 f0       	brcs	.+32     	; 0x5368 <__mulsf3_pse+0xa0>
    5348:	0c 94 bb 29 	jmp	0x5376	; 0x5376 <__fp_inf>
    534c:	0c 94 48 29 	jmp	0x5290	; 0x5290 <__fp_szero>
    5350:	5f 3f       	cpi	r21, 0xFF	; 255
    5352:	e4 f3       	brlt	.-8      	; 0x534c <__mulsf3_pse+0x84>
    5354:	98 3e       	cpi	r25, 0xE8	; 232
    5356:	d4 f3       	brlt	.-12     	; 0x534c <__mulsf3_pse+0x84>
    5358:	86 95       	lsr	r24
    535a:	77 95       	ror	r23
    535c:	67 95       	ror	r22
    535e:	b7 95       	ror	r27
    5360:	f7 95       	ror	r31
    5362:	e7 95       	ror	r30
    5364:	9f 5f       	subi	r25, 0xFF	; 255
    5366:	c1 f7       	brne	.-16     	; 0x5358 <__mulsf3_pse+0x90>
    5368:	fe 2b       	or	r31, r30
    536a:	88 0f       	add	r24, r24
    536c:	91 1d       	adc	r25, r1
    536e:	96 95       	lsr	r25
    5370:	87 95       	ror	r24
    5372:	97 f9       	bld	r25, 7
    5374:	08 95       	ret

00005376 <__fp_inf>:
    5376:	97 f9       	bld	r25, 7
    5378:	9f 67       	ori	r25, 0x7F	; 127
    537a:	80 e8       	ldi	r24, 0x80	; 128
    537c:	70 e0       	ldi	r23, 0x00	; 0
    537e:	60 e0       	ldi	r22, 0x00	; 0
    5380:	08 95       	ret

00005382 <__fp_nan>:
    5382:	9f ef       	ldi	r25, 0xFF	; 255
    5384:	80 ec       	ldi	r24, 0xC0	; 192
    5386:	08 95       	ret

00005388 <__fp_pscA>:
    5388:	00 24       	eor	r0, r0
    538a:	0a 94       	dec	r0
    538c:	16 16       	cp	r1, r22
    538e:	17 06       	cpc	r1, r23
    5390:	18 06       	cpc	r1, r24
    5392:	09 06       	cpc	r0, r25
    5394:	08 95       	ret

00005396 <__fp_pscB>:
    5396:	00 24       	eor	r0, r0
    5398:	0a 94       	dec	r0
    539a:	12 16       	cp	r1, r18
    539c:	13 06       	cpc	r1, r19
    539e:	14 06       	cpc	r1, r20
    53a0:	05 06       	cpc	r0, r21
    53a2:	08 95       	ret

000053a4 <__fp_round>:
    53a4:	09 2e       	mov	r0, r25
    53a6:	03 94       	inc	r0
    53a8:	00 0c       	add	r0, r0
    53aa:	11 f4       	brne	.+4      	; 0x53b0 <__fp_round+0xc>
    53ac:	88 23       	and	r24, r24
    53ae:	52 f0       	brmi	.+20     	; 0x53c4 <__fp_round+0x20>
    53b0:	bb 0f       	add	r27, r27
    53b2:	40 f4       	brcc	.+16     	; 0x53c4 <__fp_round+0x20>
    53b4:	bf 2b       	or	r27, r31
    53b6:	11 f4       	brne	.+4      	; 0x53bc <__fp_round+0x18>
    53b8:	60 ff       	sbrs	r22, 0
    53ba:	04 c0       	rjmp	.+8      	; 0x53c4 <__fp_round+0x20>
    53bc:	6f 5f       	subi	r22, 0xFF	; 255
    53be:	7f 4f       	sbci	r23, 0xFF	; 255
    53c0:	8f 4f       	sbci	r24, 0xFF	; 255
    53c2:	9f 4f       	sbci	r25, 0xFF	; 255
    53c4:	08 95       	ret

000053c6 <__udivmodqi4>:
    53c6:	99 1b       	sub	r25, r25
    53c8:	79 e0       	ldi	r23, 0x09	; 9
    53ca:	04 c0       	rjmp	.+8      	; 0x53d4 <__udivmodqi4_ep>

000053cc <__udivmodqi4_loop>:
    53cc:	99 1f       	adc	r25, r25
    53ce:	96 17       	cp	r25, r22
    53d0:	08 f0       	brcs	.+2      	; 0x53d4 <__udivmodqi4_ep>
    53d2:	96 1b       	sub	r25, r22

000053d4 <__udivmodqi4_ep>:
    53d4:	88 1f       	adc	r24, r24
    53d6:	7a 95       	dec	r23
    53d8:	c9 f7       	brne	.-14     	; 0x53cc <__udivmodqi4_loop>
    53da:	80 95       	com	r24
    53dc:	08 95       	ret

000053de <__divmodhi4>:
    53de:	97 fb       	bst	r25, 7
    53e0:	07 2e       	mov	r0, r23
    53e2:	16 f4       	brtc	.+4      	; 0x53e8 <__divmodhi4+0xa>
    53e4:	00 94       	com	r0
    53e6:	07 d0       	rcall	.+14     	; 0x53f6 <__divmodhi4_neg1>
    53e8:	77 fd       	sbrc	r23, 7
    53ea:	09 d0       	rcall	.+18     	; 0x53fe <__divmodhi4_neg2>
    53ec:	0e 94 09 2a 	call	0x5412	; 0x5412 <__udivmodhi4>
    53f0:	07 fc       	sbrc	r0, 7
    53f2:	05 d0       	rcall	.+10     	; 0x53fe <__divmodhi4_neg2>
    53f4:	3e f4       	brtc	.+14     	; 0x5404 <__divmodhi4_exit>

000053f6 <__divmodhi4_neg1>:
    53f6:	90 95       	com	r25
    53f8:	81 95       	neg	r24
    53fa:	9f 4f       	sbci	r25, 0xFF	; 255
    53fc:	08 95       	ret

000053fe <__divmodhi4_neg2>:
    53fe:	70 95       	com	r23
    5400:	61 95       	neg	r22
    5402:	7f 4f       	sbci	r23, 0xFF	; 255

00005404 <__divmodhi4_exit>:
    5404:	08 95       	ret

00005406 <__tablejump2__>:
    5406:	ee 0f       	add	r30, r30
    5408:	ff 1f       	adc	r31, r31
    540a:	05 90       	lpm	r0, Z+
    540c:	f4 91       	lpm	r31, Z
    540e:	e0 2d       	mov	r30, r0
    5410:	09 94       	ijmp

00005412 <__udivmodhi4>:
    5412:	aa 1b       	sub	r26, r26
    5414:	bb 1b       	sub	r27, r27
    5416:	51 e1       	ldi	r21, 0x11	; 17
    5418:	07 c0       	rjmp	.+14     	; 0x5428 <__udivmodhi4_ep>

0000541a <__udivmodhi4_loop>:
    541a:	aa 1f       	adc	r26, r26
    541c:	bb 1f       	adc	r27, r27
    541e:	a6 17       	cp	r26, r22
    5420:	b7 07       	cpc	r27, r23
    5422:	10 f0       	brcs	.+4      	; 0x5428 <__udivmodhi4_ep>
    5424:	a6 1b       	sub	r26, r22
    5426:	b7 0b       	sbc	r27, r23

00005428 <__udivmodhi4_ep>:
    5428:	88 1f       	adc	r24, r24
    542a:	99 1f       	adc	r25, r25
    542c:	5a 95       	dec	r21
    542e:	a9 f7       	brne	.-22     	; 0x541a <__udivmodhi4_loop>
    5430:	80 95       	com	r24
    5432:	90 95       	com	r25
    5434:	bc 01       	movw	r22, r24
    5436:	cd 01       	movw	r24, r26
    5438:	08 95       	ret

0000543a <eeprom_read_byte>:
    543a:	f9 99       	sbic	0x1f, 1	; 31
    543c:	fe cf       	rjmp	.-4      	; 0x543a <eeprom_read_byte>
    543e:	92 bd       	out	0x22, r25	; 34
    5440:	81 bd       	out	0x21, r24	; 33
    5442:	f8 9a       	sbi	0x1f, 0	; 31
    5444:	99 27       	eor	r25, r25
    5446:	80 b5       	in	r24, 0x20	; 32
    5448:	08 95       	ret

0000544a <eeprom_read_word>:
    544a:	a8 e1       	ldi	r26, 0x18	; 24
    544c:	b0 e0       	ldi	r27, 0x00	; 0
    544e:	42 e0       	ldi	r20, 0x02	; 2
    5450:	50 e0       	ldi	r21, 0x00	; 0
    5452:	0c 94 40 2a 	jmp	0x5480	; 0x5480 <eeprom_read_blraw>

00005456 <eeprom_write_byte>:
    5456:	26 2f       	mov	r18, r22

00005458 <eeprom_write_r18>:
    5458:	f9 99       	sbic	0x1f, 1	; 31
    545a:	fe cf       	rjmp	.-4      	; 0x5458 <eeprom_write_r18>
    545c:	1f ba       	out	0x1f, r1	; 31
    545e:	92 bd       	out	0x22, r25	; 34
    5460:	81 bd       	out	0x21, r24	; 33
    5462:	20 bd       	out	0x20, r18	; 32
    5464:	0f b6       	in	r0, 0x3f	; 63
    5466:	f8 94       	cli
    5468:	fa 9a       	sbi	0x1f, 2	; 31
    546a:	f9 9a       	sbi	0x1f, 1	; 31
    546c:	0f be       	out	0x3f, r0	; 63
    546e:	01 96       	adiw	r24, 0x01	; 1
    5470:	08 95       	ret

00005472 <eeprom_write_word>:
    5472:	0e 94 2b 2a 	call	0x5456	; 0x5456 <eeprom_write_byte>
    5476:	27 2f       	mov	r18, r23
    5478:	0c 94 2c 2a 	jmp	0x5458	; 0x5458 <eeprom_write_r18>

0000547c <eeprom_read_block>:
    547c:	dc 01       	movw	r26, r24
    547e:	cb 01       	movw	r24, r22

00005480 <eeprom_read_blraw>:
    5480:	fc 01       	movw	r30, r24
    5482:	f9 99       	sbic	0x1f, 1	; 31
    5484:	fe cf       	rjmp	.-4      	; 0x5482 <eeprom_read_blraw+0x2>
    5486:	06 c0       	rjmp	.+12     	; 0x5494 <eeprom_read_blraw+0x14>
    5488:	f2 bd       	out	0x22, r31	; 34
    548a:	e1 bd       	out	0x21, r30	; 33
    548c:	f8 9a       	sbi	0x1f, 0	; 31
    548e:	31 96       	adiw	r30, 0x01	; 1
    5490:	00 b4       	in	r0, 0x20	; 32
    5492:	0d 92       	st	X+, r0
    5494:	41 50       	subi	r20, 0x01	; 1
    5496:	50 40       	sbci	r21, 0x00	; 0
    5498:	b8 f7       	brcc	.-18     	; 0x5488 <eeprom_read_blraw+0x8>
    549a:	08 95       	ret

0000549c <_exit>:
    549c:	f8 94       	cli

0000549e <__stop_program>:
    549e:	ff cf       	rjmp	.-2      	; 0x549e <__stop_program>
