   1               		.file	"action.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.action_exec,"ax",@progbits
  11               	.global	action_exec
  13               	action_exec:
  14               	.LFB103:
  15               		.file 1 "../../tmk_core/common/action.c"
   1:../../tmk_core/common/action.c **** /*
   2:../../tmk_core/common/action.c **** Copyright 2012,2013 Jun Wako <wakojun@gmail.com>
   3:../../tmk_core/common/action.c **** 
   4:../../tmk_core/common/action.c **** This program is free software: you can redistribute it and/or modify
   5:../../tmk_core/common/action.c **** it under the terms of the GNU General Public License as published by
   6:../../tmk_core/common/action.c **** the Free Software Foundation, either version 2 of the License, or
   7:../../tmk_core/common/action.c **** (at your option) any later version.
   8:../../tmk_core/common/action.c **** 
   9:../../tmk_core/common/action.c **** This program is distributed in the hope that it will be useful,
  10:../../tmk_core/common/action.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../tmk_core/common/action.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../tmk_core/common/action.c **** GNU General Public License for more details.
  13:../../tmk_core/common/action.c **** 
  14:../../tmk_core/common/action.c **** You should have received a copy of the GNU General Public License
  15:../../tmk_core/common/action.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../tmk_core/common/action.c **** */
  17:../../tmk_core/common/action.c **** #include "host.h"
  18:../../tmk_core/common/action.c **** #include "keycode.h"
  19:../../tmk_core/common/action.c **** #include "keyboard.h"
  20:../../tmk_core/common/action.c **** #include "mousekey.h"
  21:../../tmk_core/common/action.c **** #include "command.h"
  22:../../tmk_core/common/action.c **** #include "led.h"
  23:../../tmk_core/common/action.c **** #include "backlight.h"
  24:../../tmk_core/common/action.c **** #include "action_layer.h"
  25:../../tmk_core/common/action.c **** #include "action_tapping.h"
  26:../../tmk_core/common/action.c **** #include "action_macro.h"
  27:../../tmk_core/common/action.c **** #include "action_util.h"
  28:../../tmk_core/common/action.c **** #include "action.h"
  29:../../tmk_core/common/action.c **** #include "hook.h"
  30:../../tmk_core/common/action.c **** #include "wait.h"
  31:../../tmk_core/common/action.c **** 
  32:../../tmk_core/common/action.c **** #ifdef DEBUG_ACTION
  33:../../tmk_core/common/action.c **** #include "debug.h"
  34:../../tmk_core/common/action.c **** #else
  35:../../tmk_core/common/action.c **** #include "nodebug.h"
  36:../../tmk_core/common/action.c **** #endif
  37:../../tmk_core/common/action.c **** 
  38:../../tmk_core/common/action.c **** 
  39:../../tmk_core/common/action.c **** void action_exec(keyevent_t event)
  40:../../tmk_core/common/action.c **** {
  16               		.loc 1 40 0
  17               		.cfi_startproc
  18 0000 CF93      		push r28
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 28, -2
  22 0002 DF93      		push r29
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 29, -3
  26 0004 CDB7      		in r28,__SP_L__
  27 0006 DEB7      		in r29,__SP_H__
  28               	.LCFI2:
  29               		.cfi_def_cfa_register 28
  30 0008 2B97      		sbiw r28,11
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 15
  33 000a 0FB6      		in __tmp_reg__,__SREG__
  34 000c F894      		cli
  35 000e DEBF      		out __SP_H__,r29
  36 0010 0FBE      		out __SREG__,__tmp_reg__
  37 0012 CDBF      		out __SP_L__,r28
  38               	/* prologue: function */
  39               	/* frame size = 11 */
  40               	/* stack size = 13 */
  41               	.L__stack_usage = 13
  42 0014 942F      		mov r25,r20
  43 0016 4F83      		std Y+7,r20
  44 0018 252F      		mov r18,r21
  45 001a 5887      		std Y+8,r21
  46 001c 6987      		std Y+9,r22
  47 001e 7A87      		std Y+10,r23
  48 0020 8B87      		std Y+11,r24
  49               	.LVL0:
  50               	.LBB16:
  51               	.LBB17:
  52               		.file 2 "../../tmk_core/common/keyboard.h"
   1:../../tmk_core/common/keyboard.h **** /*
   2:../../tmk_core/common/keyboard.h **** Copyright 2011,2012,2013 Jun Wako <wakojun@gmail.com>
   3:../../tmk_core/common/keyboard.h **** 
   4:../../tmk_core/common/keyboard.h **** This program is free software: you can redistribute it and/or modify
   5:../../tmk_core/common/keyboard.h **** it under the terms of the GNU General Public License as published by
   6:../../tmk_core/common/keyboard.h **** the Free Software Foundation, either version 2 of the License, or
   7:../../tmk_core/common/keyboard.h **** (at your option) any later version.
   8:../../tmk_core/common/keyboard.h **** 
   9:../../tmk_core/common/keyboard.h **** This program is distributed in the hope that it will be useful,
  10:../../tmk_core/common/keyboard.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../tmk_core/common/keyboard.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../tmk_core/common/keyboard.h **** GNU General Public License for more details.
  13:../../tmk_core/common/keyboard.h **** 
  14:../../tmk_core/common/keyboard.h **** You should have received a copy of the GNU General Public License
  15:../../tmk_core/common/keyboard.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../tmk_core/common/keyboard.h **** */
  17:../../tmk_core/common/keyboard.h **** 
  18:../../tmk_core/common/keyboard.h **** #ifndef KEYBOARD_H
  19:../../tmk_core/common/keyboard.h **** #define KEYBOARD_H
  20:../../tmk_core/common/keyboard.h **** 
  21:../../tmk_core/common/keyboard.h **** #include <stdbool.h>
  22:../../tmk_core/common/keyboard.h **** #include <stdint.h>
  23:../../tmk_core/common/keyboard.h **** 
  24:../../tmk_core/common/keyboard.h **** 
  25:../../tmk_core/common/keyboard.h **** #ifdef __cplusplus
  26:../../tmk_core/common/keyboard.h **** extern "C" {
  27:../../tmk_core/common/keyboard.h **** #endif
  28:../../tmk_core/common/keyboard.h **** 
  29:../../tmk_core/common/keyboard.h **** /* key matrix position */
  30:../../tmk_core/common/keyboard.h **** typedef struct {
  31:../../tmk_core/common/keyboard.h ****     uint8_t col;
  32:../../tmk_core/common/keyboard.h ****     uint8_t row;
  33:../../tmk_core/common/keyboard.h **** } keypos_t;
  34:../../tmk_core/common/keyboard.h **** 
  35:../../tmk_core/common/keyboard.h **** /* key event */
  36:../../tmk_core/common/keyboard.h **** typedef struct {
  37:../../tmk_core/common/keyboard.h ****     keypos_t key;
  38:../../tmk_core/common/keyboard.h ****     bool     pressed;
  39:../../tmk_core/common/keyboard.h ****     uint16_t time;
  40:../../tmk_core/common/keyboard.h **** } keyevent_t;
  41:../../tmk_core/common/keyboard.h **** 
  42:../../tmk_core/common/keyboard.h **** /* equivalent test of keypos_t */
  43:../../tmk_core/common/keyboard.h **** #define KEYEQ(keya, keyb)       ((keya).row == (keyb).row && (keya).col == (keyb).col)
  44:../../tmk_core/common/keyboard.h **** 
  45:../../tmk_core/common/keyboard.h **** /* Rules for No Event:
  46:../../tmk_core/common/keyboard.h ****  * 1) (time == 0) to handle (keyevent_t){} as empty event
  47:../../tmk_core/common/keyboard.h ****  * 2) Matrix(255, 255) to make TICK event available
  48:../../tmk_core/common/keyboard.h ****  */
  49:../../tmk_core/common/keyboard.h **** static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 &
  53               		.loc 2 49 0
  54 0022 4A85      		ldd r20,Y+10
  55 0024 5B85      		ldd r21,Y+11
  56               	.LVL1:
  57 0026 452B      		or r20,r21
  58 0028 01F0      		breq .L2
  59 002a 2F3F      		cpi r18,lo8(-1)
  60 002c 01F4      		brne .L3
  61 002e 9F3F      		cpi r25,lo8(-1)
  62 0030 01F4      		brne .L3
  63               	.LVL2:
  64               	.L2:
  65               	.LBE17:
  66               	.LBE16:
  41:../../tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
  42:../../tmk_core/common/action.c ****         dprint("\n---- action_exec: start -----\n");
  43:../../tmk_core/common/action.c ****         dprint("EVENT: "); debug_event(event); dprintln();
  44:../../tmk_core/common/action.c ****         hook_matrix_change(event);
  45:../../tmk_core/common/action.c ****     }
  46:../../tmk_core/common/action.c **** 
  47:../../tmk_core/common/action.c ****     keyrecord_t record = { .event = event };
  67               		.loc 1 47 0
  68 0032 DE01      		movw r26,r28
  69 0034 1196      		adiw r26,1
  70 0036 86E0      		ldi r24,lo8(6)
  71 0038 FD01      		movw r30,r26
  72               		0:
  73 003a 1192      		st Z+,__zero_reg__
  74 003c 8A95      		dec r24
  75 003e 01F4      		brne 0b
  76 0040 85E0      		ldi r24,lo8(5)
  77 0042 FE01      		movw r30,r28
  78 0044 3796      		adiw r30,7
  79               		0:
  80 0046 0190      		ld r0,Z+
  81 0048 0D92      		st X+,r0
  82 004a 8A95      		dec r24
  83 004c 01F4      		brne 0b
  48:../../tmk_core/common/action.c **** 
  49:../../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
  50:../../tmk_core/common/action.c ****     action_tapping_process(record);
  84               		.loc 1 50 0
  85 004e 4981      		ldd r20,Y+1
  86 0050 5A81      		ldd r21,Y+2
  87 0052 6B81      		ldd r22,Y+3
  88 0054 7C81      		ldd r23,Y+4
  89 0056 8D81      		ldd r24,Y+5
  90 0058 9E81      		ldd r25,Y+6
  91 005a 0E94 0000 		call action_tapping_process
  92               	.LVL3:
  93               	/* epilogue start */
  51:../../tmk_core/common/action.c **** #else
  52:../../tmk_core/common/action.c ****     process_action(&record);
  53:../../tmk_core/common/action.c ****     if (!IS_NOEVENT(record.event)) {
  54:../../tmk_core/common/action.c ****         dprint("processed: "); debug_record(record); dprintln();
  55:../../tmk_core/common/action.c ****     }
  56:../../tmk_core/common/action.c **** #endif
  57:../../tmk_core/common/action.c **** }
  94               		.loc 1 57 0
  95 005e 2B96      		adiw r28,11
  96 0060 0FB6      		in __tmp_reg__,__SREG__
  97 0062 F894      		cli
  98 0064 DEBF      		out __SP_H__,r29
  99 0066 0FBE      		out __SREG__,__tmp_reg__
 100 0068 CDBF      		out __SP_L__,r28
 101 006a DF91      		pop r29
 102 006c CF91      		pop r28
 103 006e 0895      		ret
 104               	.LVL4:
 105               	.L3:
  44:../../tmk_core/common/action.c ****     }
 106               		.loc 1 44 0
 107 0070 4F81      		ldd r20,Y+7
 108               	.LVL5:
 109 0072 5885      		ldd r21,Y+8
 110 0074 6985      		ldd r22,Y+9
 111 0076 7A85      		ldd r23,Y+10
 112 0078 8B85      		ldd r24,Y+11
 113 007a 0E94 0000 		call hook_matrix_change
 114               	.LVL6:
 115 007e 00C0      		rjmp .L2
 116               		.cfi_endproc
 117               	.LFE103:
 119               		.section	.text.register_code,"ax",@progbits
 120               	.global	register_code
 122               	register_code:
 123               	.LFB105:
  58:../../tmk_core/common/action.c **** 
  59:../../tmk_core/common/action.c **** void process_action(keyrecord_t *record)
  60:../../tmk_core/common/action.c **** {
  61:../../tmk_core/common/action.c ****     keyevent_t event = record->event;
  62:../../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
  63:../../tmk_core/common/action.c ****     uint8_t tap_count = record->tap.count;
  64:../../tmk_core/common/action.c **** #endif
  65:../../tmk_core/common/action.c **** 
  66:../../tmk_core/common/action.c ****     if (IS_NOEVENT(event)) { return; }
  67:../../tmk_core/common/action.c **** 
  68:../../tmk_core/common/action.c ****     action_t action = layer_switch_get_action(event.key);
  69:../../tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
  70:../../tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
  71:../../tmk_core/common/action.c ****     dprint(" layer_state: "); layer_debug();
  72:../../tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
  73:../../tmk_core/common/action.c **** #endif
  74:../../tmk_core/common/action.c ****     dprintln();
  75:../../tmk_core/common/action.c **** 
  76:../../tmk_core/common/action.c ****     switch (action.kind.id) {
  77:../../tmk_core/common/action.c ****         /* Key and Mods */
  78:../../tmk_core/common/action.c ****         case ACT_LMODS:
  79:../../tmk_core/common/action.c ****         case ACT_RMODS:
  80:../../tmk_core/common/action.c ****             {
  81:../../tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
  82:../../tmk_core/common/action.c ****                                                                 action.key.mods<<4;
  83:../../tmk_core/common/action.c ****                 if (event.pressed) {
  84:../../tmk_core/common/action.c ****                     if (mods) {
  85:../../tmk_core/common/action.c ****                         add_weak_mods(mods);
  86:../../tmk_core/common/action.c ****                         send_keyboard_report();
  87:../../tmk_core/common/action.c ****                     }
  88:../../tmk_core/common/action.c ****                     register_code(action.key.code);
  89:../../tmk_core/common/action.c ****                 } else {
  90:../../tmk_core/common/action.c ****                     unregister_code(action.key.code);
  91:../../tmk_core/common/action.c ****                     if (mods) {
  92:../../tmk_core/common/action.c ****                         del_weak_mods(mods);
  93:../../tmk_core/common/action.c ****                         send_keyboard_report();
  94:../../tmk_core/common/action.c ****                     }
  95:../../tmk_core/common/action.c ****                 }
  96:../../tmk_core/common/action.c ****             }
  97:../../tmk_core/common/action.c ****             break;
  98:../../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
  99:../../tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 100:../../tmk_core/common/action.c ****         case ACT_RMODS_TAP:
 101:../../tmk_core/common/action.c ****             {
 102:../../tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
 103:../../tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 104:../../tmk_core/common/action.c ****                 switch (action.layer_tap.code) {
 105:../../tmk_core/common/action.c ****     #ifndef NO_ACTION_ONESHOT
 106:../../tmk_core/common/action.c ****                     case MODS_ONESHOT:
 107:../../tmk_core/common/action.c ****                         // Oneshot modifier
 108:../../tmk_core/common/action.c ****                         if (event.pressed) {
 109:../../tmk_core/common/action.c ****                             if (tap_count == 0) {
 110:../../tmk_core/common/action.c ****                                 register_mods(mods);
 111:../../tmk_core/common/action.c ****                             }
 112:../../tmk_core/common/action.c ****                             else if (tap_count == 1) {
 113:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 114:../../tmk_core/common/action.c ****                                 set_oneshot_mods(mods);
 115:../../tmk_core/common/action.c ****                             }
 116:../../tmk_core/common/action.c ****                             else {
 117:../../tmk_core/common/action.c ****                                 register_mods(mods);
 118:../../tmk_core/common/action.c ****                             }
 119:../../tmk_core/common/action.c ****                         } else {
 120:../../tmk_core/common/action.c ****                             if (tap_count == 0) {
 121:../../tmk_core/common/action.c ****                                 clear_oneshot_mods();
 122:../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 123:../../tmk_core/common/action.c ****                             }
 124:../../tmk_core/common/action.c ****                             else if (tap_count == 1) {
 125:../../tmk_core/common/action.c ****                                 // Retain Oneshot mods
 126:../../tmk_core/common/action.c ****                             }
 127:../../tmk_core/common/action.c ****                             else {
 128:../../tmk_core/common/action.c ****                                 clear_oneshot_mods();
 129:../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 130:../../tmk_core/common/action.c ****                             }
 131:../../tmk_core/common/action.c ****                         }
 132:../../tmk_core/common/action.c ****                         break;
 133:../../tmk_core/common/action.c ****     #endif
 134:../../tmk_core/common/action.c ****                     case MODS_TAP_TOGGLE:
 135:../../tmk_core/common/action.c ****                         if (event.pressed) {
 136:../../tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 137:../../tmk_core/common/action.c ****                                 if (mods & get_mods()) {
 138:../../tmk_core/common/action.c ****                                     dprint("MODS_TAP_TOGGLE: toggle mods off\n");
 139:../../tmk_core/common/action.c ****                                     unregister_mods(mods);
 140:../../tmk_core/common/action.c ****                                 } else {
 141:../../tmk_core/common/action.c ****                                     dprint("MODS_TAP_TOGGLE: toggle mods on\n");
 142:../../tmk_core/common/action.c ****                                     register_mods(mods);
 143:../../tmk_core/common/action.c ****                                 }
 144:../../tmk_core/common/action.c ****                             }
 145:../../tmk_core/common/action.c ****                         } else {
 146:../../tmk_core/common/action.c ****                             if (tap_count < TAPPING_TOGGLE) {
 147:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP_TOGGLE: release : unregister_mods\n");
 148:../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 149:../../tmk_core/common/action.c ****                             }
 150:../../tmk_core/common/action.c ****                         }
 151:../../tmk_core/common/action.c ****                         break;
 152:../../tmk_core/common/action.c ****                     default:
 153:../../tmk_core/common/action.c ****                         if (event.pressed) {
 154:../../tmk_core/common/action.c ****                             if (tap_count > 0) {
 155:../../tmk_core/common/action.c ****                                 if (record->tap.interrupted) {
 156:../../tmk_core/common/action.c ****                                     dprint("MODS_TAP: Tap: Cancel: add_mods\n");
 157:../../tmk_core/common/action.c ****                                     // ad hoc: set 0 to cancel tap
 158:../../tmk_core/common/action.c ****                                     record->tap.count = 0;
 159:../../tmk_core/common/action.c ****                                     register_mods(mods);
 160:../../tmk_core/common/action.c ****                                 } else {
 161:../../tmk_core/common/action.c ****                                     dprint("MODS_TAP: Tap: register_code\n");
 162:../../tmk_core/common/action.c ****                                     register_code(action.key.code);
 163:../../tmk_core/common/action.c ****                                 }
 164:../../tmk_core/common/action.c ****                             } else {
 165:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 166:../../tmk_core/common/action.c ****                                 register_mods(mods);
 167:../../tmk_core/common/action.c ****                             }
 168:../../tmk_core/common/action.c ****                         } else {
 169:../../tmk_core/common/action.c ****                             if (tap_count > 0) {
 170:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 171:../../tmk_core/common/action.c ****                                 unregister_code(action.key.code);
 172:../../tmk_core/common/action.c ****                             } else {
 173:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 174:../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 175:../../tmk_core/common/action.c ****                             }
 176:../../tmk_core/common/action.c ****                         }
 177:../../tmk_core/common/action.c ****                         break;
 178:../../tmk_core/common/action.c ****                 }
 179:../../tmk_core/common/action.c ****             }
 180:../../tmk_core/common/action.c ****             break;
 181:../../tmk_core/common/action.c **** #endif
 182:../../tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 183:../../tmk_core/common/action.c ****         /* other HID usage */
 184:../../tmk_core/common/action.c ****         case ACT_USAGE:
 185:../../tmk_core/common/action.c ****             switch (action.usage.page) {
 186:../../tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 187:../../tmk_core/common/action.c ****                     if (event.pressed) {
 188:../../tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 189:../../tmk_core/common/action.c ****                     } else {
 190:../../tmk_core/common/action.c ****                         host_system_send(0);
 191:../../tmk_core/common/action.c ****                     }
 192:../../tmk_core/common/action.c ****                     break;
 193:../../tmk_core/common/action.c ****                 case PAGE_CONSUMER:
 194:../../tmk_core/common/action.c ****                     if (event.pressed) {
 195:../../tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 196:../../tmk_core/common/action.c ****                     } else {
 197:../../tmk_core/common/action.c ****                         host_consumer_send(0);
 198:../../tmk_core/common/action.c ****                     }
 199:../../tmk_core/common/action.c ****                     break;
 200:../../tmk_core/common/action.c ****             }
 201:../../tmk_core/common/action.c ****             break;
 202:../../tmk_core/common/action.c **** #endif
 203:../../tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 204:../../tmk_core/common/action.c ****         /* Mouse key */
 205:../../tmk_core/common/action.c ****         case ACT_MOUSEKEY:
 206:../../tmk_core/common/action.c ****             if (event.pressed) {
 207:../../tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 208:../../tmk_core/common/action.c ****                 mousekey_send();
 209:../../tmk_core/common/action.c ****             } else {
 210:../../tmk_core/common/action.c ****                 mousekey_off(action.key.code);
 211:../../tmk_core/common/action.c ****                 mousekey_send();
 212:../../tmk_core/common/action.c ****             }
 213:../../tmk_core/common/action.c ****             break;
 214:../../tmk_core/common/action.c **** #endif
 215:../../tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 216:../../tmk_core/common/action.c ****         case ACT_LAYER:
 217:../../tmk_core/common/action.c ****             if (action.layer_bitop.on == 0) {
 218:../../tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 219:../../tmk_core/common/action.c ****                 if (!event.pressed) {
 220:../../tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 221:../../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 222:../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 223:../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 224:../../tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 225:../../tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 226:../../tmk_core/common/action.c ****                         case OP_BIT_XOR: default_layer_xor(bits | mask); break;
 227:../../tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 228:../../tmk_core/common/action.c ****                     }
 229:../../tmk_core/common/action.c ****                 }
 230:../../tmk_core/common/action.c ****             } else {
 231:../../tmk_core/common/action.c ****                 /* Layer Bitwise Operation */
 232:../../tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 233:../../tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 234:../../tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 235:../../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 236:../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 237:../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 238:../../tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 239:../../tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 240:../../tmk_core/common/action.c ****                         case OP_BIT_XOR: layer_xor(bits | mask); break;
 241:../../tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 242:../../tmk_core/common/action.c ****                     }
 243:../../tmk_core/common/action.c ****                 }
 244:../../tmk_core/common/action.c ****             }
 245:../../tmk_core/common/action.c ****             break;
 246:../../tmk_core/common/action.c ****     #ifndef NO_ACTION_TAPPING
 247:../../tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 248:../../tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 249:../../tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 250:../../tmk_core/common/action.c ****                 case 0xe0 ... 0xef:
 251:../../tmk_core/common/action.c ****                     /* layer On/Off with modifiers(left only) */
 252:../../tmk_core/common/action.c ****                     if (event.pressed) {
 253:../../tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 254:../../tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 255:../../tmk_core/common/action.c ****                     } else {
 256:../../tmk_core/common/action.c ****                         layer_off(action.layer_tap.val);
 257:../../tmk_core/common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 258:../../tmk_core/common/action.c ****                     }
 259:../../tmk_core/common/action.c ****                     break;
 260:../../tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 261:../../tmk_core/common/action.c ****                     /* tap toggle */
 262:../../tmk_core/common/action.c ****                     if (event.pressed) {
 263:../../tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 264:../../tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 265:../../tmk_core/common/action.c ****                         }
 266:../../tmk_core/common/action.c ****                     } else {
 267:../../tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 268:../../tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 269:../../tmk_core/common/action.c ****                         }
 270:../../tmk_core/common/action.c ****                     }
 271:../../tmk_core/common/action.c ****                     break;
 272:../../tmk_core/common/action.c ****                 case OP_ON_OFF:
 273:../../tmk_core/common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 274:../../tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 275:../../tmk_core/common/action.c ****                     break;
 276:../../tmk_core/common/action.c ****                 case OP_OFF_ON:
 277:../../tmk_core/common/action.c ****                     event.pressed ? layer_off(action.layer_tap.val) :
 278:../../tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 279:../../tmk_core/common/action.c ****                     break;
 280:../../tmk_core/common/action.c ****                 case OP_SET_CLEAR:
 281:../../tmk_core/common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 282:../../tmk_core/common/action.c ****                                     layer_clear();
 283:../../tmk_core/common/action.c ****                     break;
 284:../../tmk_core/common/action.c ****                 default:
 285:../../tmk_core/common/action.c ****                     /* tap key */
 286:../../tmk_core/common/action.c ****                     if (event.pressed) {
 287:../../tmk_core/common/action.c ****                         if (tap_count > 0) {
 288:../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 289:../../tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 290:../../tmk_core/common/action.c ****                         } else {
 291:../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
 292:../../tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 293:../../tmk_core/common/action.c ****                         }
 294:../../tmk_core/common/action.c ****                     } else {
 295:../../tmk_core/common/action.c ****                         if (tap_count > 0) {
 296:../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 297:../../tmk_core/common/action.c ****                             unregister_code(action.layer_tap.code);
 298:../../tmk_core/common/action.c ****                         } else {
 299:../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: Off on release\n");
 300:../../tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 301:../../tmk_core/common/action.c ****                         }
 302:../../tmk_core/common/action.c ****                     }
 303:../../tmk_core/common/action.c ****                     break;
 304:../../tmk_core/common/action.c ****             }
 305:../../tmk_core/common/action.c ****             break;
 306:../../tmk_core/common/action.c ****     #endif
 307:../../tmk_core/common/action.c **** #endif
 308:../../tmk_core/common/action.c ****         /* Extentions */
 309:../../tmk_core/common/action.c **** #ifndef NO_ACTION_MACRO
 310:../../tmk_core/common/action.c ****         case ACT_MACRO:
 311:../../tmk_core/common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 312:../../tmk_core/common/action.c ****             break;
 313:../../tmk_core/common/action.c **** #endif
 314:../../tmk_core/common/action.c **** #ifdef BACKLIGHT_ENABLE
 315:../../tmk_core/common/action.c ****         case ACT_BACKLIGHT:
 316:../../tmk_core/common/action.c ****             if (!event.pressed) {
 317:../../tmk_core/common/action.c ****                 switch (action.backlight.opt) {
 318:../../tmk_core/common/action.c ****                     case BACKLIGHT_INCREASE:
 319:../../tmk_core/common/action.c ****                         backlight_increase();
 320:../../tmk_core/common/action.c ****                         break;
 321:../../tmk_core/common/action.c ****                     case BACKLIGHT_DECREASE:
 322:../../tmk_core/common/action.c ****                         backlight_decrease();
 323:../../tmk_core/common/action.c ****                         break;
 324:../../tmk_core/common/action.c ****                     case BACKLIGHT_TOGGLE:
 325:../../tmk_core/common/action.c ****                         backlight_toggle();
 326:../../tmk_core/common/action.c ****                         break;
 327:../../tmk_core/common/action.c ****                     case BACKLIGHT_STEP:
 328:../../tmk_core/common/action.c ****                         backlight_step();
 329:../../tmk_core/common/action.c ****                         break;
 330:../../tmk_core/common/action.c ****                     case BACKLIGHT_LEVEL:
 331:../../tmk_core/common/action.c ****                         backlight_level(action.backlight.level);
 332:../../tmk_core/common/action.c ****                         break;
 333:../../tmk_core/common/action.c ****                 }
 334:../../tmk_core/common/action.c ****             }
 335:../../tmk_core/common/action.c ****             break;
 336:../../tmk_core/common/action.c **** #endif
 337:../../tmk_core/common/action.c ****         case ACT_COMMAND:
 338:../../tmk_core/common/action.c ****             break;
 339:../../tmk_core/common/action.c **** #ifndef NO_ACTION_FUNCTION
 340:../../tmk_core/common/action.c ****         case ACT_FUNCTION:
 341:../../tmk_core/common/action.c ****             action_function(record, action.func.id, action.func.opt);
 342:../../tmk_core/common/action.c ****             break;
 343:../../tmk_core/common/action.c **** #endif
 344:../../tmk_core/common/action.c ****         default:
 345:../../tmk_core/common/action.c ****             break;
 346:../../tmk_core/common/action.c ****     }
 347:../../tmk_core/common/action.c **** }
 348:../../tmk_core/common/action.c **** 
 349:../../tmk_core/common/action.c **** 
 350:../../tmk_core/common/action.c **** 
 351:../../tmk_core/common/action.c **** 
 352:../../tmk_core/common/action.c **** /*
 353:../../tmk_core/common/action.c ****  * Utilities for actions.
 354:../../tmk_core/common/action.c ****  */
 355:../../tmk_core/common/action.c **** void register_code(uint8_t code)
 356:../../tmk_core/common/action.c **** {
 124               		.loc 1 356 0
 125               		.cfi_startproc
 126               	.LVL7:
 127 0000 CF93      		push r28
 128               	.LCFI4:
 129               		.cfi_def_cfa_offset 3
 130               		.cfi_offset 28, -2
 131               	/* prologue: function */
 132               	/* frame size = 0 */
 133               	/* stack size = 1 */
 134               	.L__stack_usage = 1
 357:../../tmk_core/common/action.c ****     if (code == KC_NO) {
 135               		.loc 1 357 0
 136 0002 8823      		tst r24
 137 0004 01F4      		brne .+2
 138 0006 00C0      		rjmp .L9
 139 0008 C82F      		mov r28,r24
 358:../../tmk_core/common/action.c ****         return;
 359:../../tmk_core/common/action.c ****     }
 360:../../tmk_core/common/action.c **** 
 361:../../tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 362:../../tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 140               		.loc 1 362 0
 141 000a 8238      		cpi r24,lo8(-126)
 142 000c 01F4      		brne .L12
 363:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 364:../../tmk_core/common/action.c ****         // Resync: ignore if caps lock already is on
 365:../../tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
 143               		.loc 1 365 0
 144 000e 0E94 0000 		call host_keyboard_leds
 145               	.LVL8:
 146 0012 81FD      		sbrc r24,1
 147 0014 00C0      		rjmp .L9
 366:../../tmk_core/common/action.c **** #endif
 367:../../tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 148               		.loc 1 367 0
 149 0016 89E3      		ldi r24,lo8(57)
 150 0018 0E94 0000 		call add_key
 151               	.LVL9:
 368:../../tmk_core/common/action.c ****         send_keyboard_report();
 152               		.loc 1 368 0
 153 001c 0E94 0000 		call send_keyboard_report
 154               	.LVL10:
 155               	.LBB18:
 156               	.LBB19:
 157               		.file 3 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/avr/include/util/delay.h **** #endif
  41:/usr/lib/avr/include/util/delay.h **** 
  42:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/avr/include/util/delay.h **** 
  46:/usr/lib/avr/include/util/delay.h **** /** \file */
  47:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/avr/include/util/delay.h ****     \code
  49:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/avr/include/util/delay.h ****     \endcode
  53:/usr/lib/avr/include/util/delay.h **** 
  54:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/avr/include/util/delay.h ****     used.
  58:/usr/lib/avr/include/util/delay.h **** 
  59:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/avr/include/util/delay.h **** 
  68:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/avr/include/util/delay.h **** 
  77:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/avr/include/util/delay.h **** 
  81:/usr/lib/avr/include/util/delay.h **** */
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/avr/include/util/delay.h **** #endif
  87:/usr/lib/avr/include/util/delay.h **** 
  88:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/avr/include/util/delay.h **** #endif
  93:/usr/lib/avr/include/util/delay.h **** 
  94:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/avr/include/util/delay.h **** #endif
  97:/usr/lib/avr/include/util/delay.h **** 
  98:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/avr/include/util/delay.h **** #endif
 103:/usr/lib/avr/include/util/delay.h **** 
 104:/usr/lib/avr/include/util/delay.h **** /**
 105:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/avr/include/util/delay.h **** 
 107:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/avr/include/util/delay.h **** 
 109:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/avr/include/util/delay.h **** 
 112:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/avr/include/util/delay.h **** 
 114:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/avr/include/util/delay.h **** 
 120:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/avr/include/util/delay.h **** 
 125:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/avr/include/util/delay.h **** 
 132:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/avr/include/util/delay.h **** 
 140:/usr/lib/avr/include/util/delay.h ****  */
 141:/usr/lib/avr/include/util/delay.h **** void
 142:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/avr/include/util/delay.h **** {
 144:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/lib/avr/include/util/delay.h **** 
 155:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/lib/avr/include/util/delay.h **** 
 158:/usr/lib/avr/include/util/delay.h **** 	#else
 159:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 160:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/lib/avr/include/util/delay.h **** 	#endif
 162:/usr/lib/avr/include/util/delay.h **** 
 163:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 158               		.loc 3 163 0
 159 0020 2FEF      		ldi r18,lo8(319999)
 160 0022 81EE      		ldi r24,hi8(319999)
 161 0024 94E0      		ldi r25,hlo8(319999)
 162 0026 2150      	1:	subi r18,1
 163 0028 8040      		sbci r24,0
 164 002a 9040      		sbci r25,0
 165 002c 01F4      		brne 1b
 166 002e 00C0      		rjmp .
 167 0030 0000      		nop
 168               	.LBE19:
 169               	.LBE18:
 369:../../tmk_core/common/action.c ****         wait_ms(100);
 370:../../tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 170               		.loc 1 370 0
 171 0032 89E3      		ldi r24,lo8(57)
 172 0034 00C0      		rjmp .L44
 173               	.LVL11:
 174               	.L12:
 371:../../tmk_core/common/action.c ****         send_keyboard_report();
 372:../../tmk_core/common/action.c ****     }
 373:../../tmk_core/common/action.c **** 
 374:../../tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 175               		.loc 1 374 0
 176 0036 8338      		cpi r24,lo8(-125)
 177 0038 01F4      		brne .L14
 375:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 376:../../tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
 178               		.loc 1 376 0
 179 003a 0E94 0000 		call host_keyboard_leds
 180               	.LVL12:
 181 003e 80FD      		sbrc r24,0
 182 0040 00C0      		rjmp .L9
 377:../../tmk_core/common/action.c **** #endif
 378:../../tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 183               		.loc 1 378 0
 184 0042 83E5      		ldi r24,lo8(83)
 185 0044 0E94 0000 		call add_key
 186               	.LVL13:
 379:../../tmk_core/common/action.c ****         send_keyboard_report();
 187               		.loc 1 379 0
 188 0048 0E94 0000 		call send_keyboard_report
 189               	.LVL14:
 190               	.LBB20:
 191               	.LBB21:
 192               		.loc 3 163 0
 193 004c 2FEF      		ldi r18,lo8(319999)
 194 004e 81EE      		ldi r24,hi8(319999)
 195 0050 94E0      		ldi r25,hlo8(319999)
 196 0052 2150      	1:	subi r18,1
 197 0054 8040      		sbci r24,0
 198 0056 9040      		sbci r25,0
 199 0058 01F4      		brne 1b
 200 005a 00C0      		rjmp .
 201 005c 0000      		nop
 202               	.LBE21:
 203               	.LBE20:
 380:../../tmk_core/common/action.c ****         wait_ms(100);
 381:../../tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 204               		.loc 1 381 0
 205 005e 83E5      		ldi r24,lo8(83)
 206               	.LVL15:
 207               	.L44:
 208 0060 0E94 0000 		call del_key
 209               	.LVL16:
 210               	.L45:
 211               	/* epilogue start */
 382:../../tmk_core/common/action.c ****         send_keyboard_report();
 383:../../tmk_core/common/action.c ****     }
 384:../../tmk_core/common/action.c **** 
 385:../../tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 386:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 387:../../tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
 388:../../tmk_core/common/action.c **** #endif
 389:../../tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 390:../../tmk_core/common/action.c ****         send_keyboard_report();
 391:../../tmk_core/common/action.c ****         wait_ms(100);
 392:../../tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 393:../../tmk_core/common/action.c ****         send_keyboard_report();
 394:../../tmk_core/common/action.c ****     }
 395:../../tmk_core/common/action.c **** #endif
 396:../../tmk_core/common/action.c **** 
 397:../../tmk_core/common/action.c ****     else if IS_KEY(code) {
 398:../../tmk_core/common/action.c ****         // TODO: should push command_proc out of this block?
 399:../../tmk_core/common/action.c ****         if (command_proc(code)) return;
 400:../../tmk_core/common/action.c **** 
 401:../../tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 402:../../tmk_core/common/action.c **** /* TODO: remove
 403:../../tmk_core/common/action.c ****         if (oneshot_state.mods && !oneshot_state.disabled) {
 404:../../tmk_core/common/action.c ****             uint8_t tmp_mods = get_mods();
 405:../../tmk_core/common/action.c ****             add_mods(oneshot_state.mods);
 406:../../tmk_core/common/action.c **** 
 407:../../tmk_core/common/action.c ****             add_key(code);
 408:../../tmk_core/common/action.c ****             send_keyboard_report();
 409:../../tmk_core/common/action.c **** 
 410:../../tmk_core/common/action.c ****             set_mods(tmp_mods);
 411:../../tmk_core/common/action.c ****             send_keyboard_report();
 412:../../tmk_core/common/action.c ****             oneshot_cancel();
 413:../../tmk_core/common/action.c ****         } else 
 414:../../tmk_core/common/action.c **** */
 415:../../tmk_core/common/action.c **** #endif
 416:../../tmk_core/common/action.c ****         {
 417:../../tmk_core/common/action.c ****             add_key(code);
 418:../../tmk_core/common/action.c ****             send_keyboard_report();
 419:../../tmk_core/common/action.c ****         }
 420:../../tmk_core/common/action.c ****     }
 421:../../tmk_core/common/action.c ****     else if IS_MOD(code) {
 422:../../tmk_core/common/action.c ****         add_mods(MOD_BIT(code));
 423:../../tmk_core/common/action.c ****         send_keyboard_report();
 424:../../tmk_core/common/action.c ****     }
 425:../../tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 426:../../tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 427:../../tmk_core/common/action.c ****     }
 428:../../tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 429:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 430:../../tmk_core/common/action.c ****     }
 431:../../tmk_core/common/action.c **** }
 212               		.loc 1 431 0
 213 0064 CF91      		pop r28
 382:../../tmk_core/common/action.c ****         send_keyboard_report();
 214               		.loc 1 382 0
 215 0066 0C94 0000 		jmp send_keyboard_report
 216               	.LVL17:
 217               	.L14:
 385:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 218               		.loc 1 385 0
 219 006a 8438      		cpi r24,lo8(-124)
 220 006c 01F4      		brne .L15
 387:../../tmk_core/common/action.c **** #endif
 221               		.loc 1 387 0
 222 006e 0E94 0000 		call host_keyboard_leds
 223               	.LVL18:
 224 0072 82FD      		sbrc r24,2
 225 0074 00C0      		rjmp .L9
 389:../../tmk_core/common/action.c ****         send_keyboard_report();
 226               		.loc 1 389 0
 227 0076 87E4      		ldi r24,lo8(71)
 228 0078 0E94 0000 		call add_key
 229               	.LVL19:
 390:../../tmk_core/common/action.c ****         wait_ms(100);
 230               		.loc 1 390 0
 231 007c 0E94 0000 		call send_keyboard_report
 232               	.LVL20:
 233               	.LBB22:
 234               	.LBB23:
 235               		.loc 3 163 0
 236 0080 2FEF      		ldi r18,lo8(319999)
 237 0082 81EE      		ldi r24,hi8(319999)
 238 0084 94E0      		ldi r25,hlo8(319999)
 239 0086 2150      	1:	subi r18,1
 240 0088 8040      		sbci r24,0
 241 008a 9040      		sbci r25,0
 242 008c 01F4      		brne 1b
 243 008e 00C0      		rjmp .
 244 0090 0000      		nop
 245               	.LBE23:
 246               	.LBE22:
 392:../../tmk_core/common/action.c ****         send_keyboard_report();
 247               		.loc 1 392 0
 248 0092 87E4      		ldi r24,lo8(71)
 249 0094 00C0      		rjmp .L44
 250               	.LVL21:
 251               	.L15:
 397:../../tmk_core/common/action.c ****         // TODO: should push command_proc out of this block?
 252               		.loc 1 397 0
 253 0096 8CEF      		ldi r24,lo8(-4)
 254               	.LVL22:
 255 0098 8C0F      		add r24,r28
 256 009a 813A      		cpi r24,lo8(-95)
 257 009c 00F4      		brsh .L16
 399:../../tmk_core/common/action.c **** 
 258               		.loc 1 399 0
 259 009e 8C2F      		mov r24,r28
 260 00a0 0E94 0000 		call command_proc
 261               	.LVL23:
 262 00a4 8111      		cpse r24,__zero_reg__
 263 00a6 00C0      		rjmp .L9
 417:../../tmk_core/common/action.c ****             send_keyboard_report();
 264               		.loc 1 417 0
 265 00a8 8C2F      		mov r24,r28
 266 00aa 0E94 0000 		call add_key
 267               	.LVL24:
 268 00ae 00C0      		rjmp .L45
 269               	.L16:
 421:../../tmk_core/common/action.c ****         add_mods(MOD_BIT(code));
 270               		.loc 1 421 0
 271 00b0 80E2      		ldi r24,lo8(32)
 272 00b2 8C0F      		add r24,r28
 273 00b4 8830      		cpi r24,lo8(8)
 274 00b6 00F4      		brsh .L17
 422:../../tmk_core/common/action.c ****         send_keyboard_report();
 275               		.loc 1 422 0
 276 00b8 C770      		andi r28,lo8(7)
 277               	.LVL25:
 278 00ba 81E0      		ldi r24,lo8(1)
 279 00bc 00C0      		rjmp 2f
 280               		1:
 281 00be 880F      		lsl r24
 282               		2:
 283 00c0 CA95      		dec r28
 284 00c2 02F4      		brpl 1b
 285 00c4 0E94 0000 		call add_mods
 286               	.LVL26:
 287 00c8 00C0      		rjmp .L45
 288               	.LVL27:
 289               	.L17:
 425:../../tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 290               		.loc 1 425 0
 291 00ca 8BE5      		ldi r24,lo8(91)
 292 00cc 8C0F      		add r24,r28
 293 00ce 8330      		cpi r24,lo8(3)
 294 00d0 00F4      		brsh .L18
 426:../../tmk_core/common/action.c ****     }
 295               		.loc 1 426 0
 296 00d2 C53A      		cpi r28,lo8(-91)
 297 00d4 01F0      		breq .L21
 426:../../tmk_core/common/action.c ****     }
 298               		.loc 1 426 0 is_stmt 0 discriminator 1
 299 00d6 C63A      		cpi r28,lo8(-90)
 300 00d8 01F0      		breq .L22
 426:../../tmk_core/common/action.c ****     }
 301               		.loc 1 426 0
 302 00da 83E8      		ldi r24,lo8(-125)
 303 00dc 90E0      		ldi r25,0
 304 00de 00C0      		rjmp .L19
 305               	.L21:
 306 00e0 81E8      		ldi r24,lo8(-127)
 307 00e2 90E0      		ldi r25,0
 308 00e4 00C0      		rjmp .L19
 309               	.L22:
 310 00e6 82E8      		ldi r24,lo8(-126)
 311 00e8 90E0      		ldi r25,0
 312               	.L19:
 313               	/* epilogue start */
 314               		.loc 1 431 0 is_stmt 1 discriminator 12
 315 00ea CF91      		pop r28
 316               	.LVL28:
 426:../../tmk_core/common/action.c ****     }
 317               		.loc 1 426 0 discriminator 12
 318 00ec 0C94 0000 		jmp host_system_send
 319               	.LVL29:
 320               	.L18:
 428:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 321               		.loc 1 428 0
 322 00f0 88E5      		ldi r24,lo8(88)
 323 00f2 8C0F      		add r24,r28
 324 00f4 8531      		cpi r24,lo8(21)
 325 00f6 00F0      		brlo .+2
 326 00f8 00C0      		rjmp .L9
 429:../../tmk_core/common/action.c ****     }
 327               		.loc 1 429 0
 328 00fa C83A      		cpi r28,lo8(-88)
 329 00fc 01F0      		breq .L23
 429:../../tmk_core/common/action.c ****     }
 330               		.loc 1 429 0 is_stmt 0 discriminator 1
 331 00fe C93A      		cpi r28,lo8(-87)
 332 0100 01F0      		breq .L24
 429:../../tmk_core/common/action.c ****     }
 333               		.loc 1 429 0 discriminator 3
 334 0102 CA3A      		cpi r28,lo8(-86)
 335 0104 01F0      		breq .L25
 429:../../tmk_core/common/action.c ****     }
 336               		.loc 1 429 0 discriminator 5
 337 0106 CB3A      		cpi r28,lo8(-85)
 338 0108 01F0      		breq .L26
 429:../../tmk_core/common/action.c ****     }
 339               		.loc 1 429 0 discriminator 7
 340 010a CC3A      		cpi r28,lo8(-84)
 341 010c 01F0      		breq .L27
 429:../../tmk_core/common/action.c ****     }
 342               		.loc 1 429 0 discriminator 9
 343 010e CD3A      		cpi r28,lo8(-83)
 344 0110 01F0      		breq .L28
 429:../../tmk_core/common/action.c ****     }
 345               		.loc 1 429 0 discriminator 11
 346 0112 CE3A      		cpi r28,lo8(-82)
 347 0114 01F0      		breq .L29
 429:../../tmk_core/common/action.c ****     }
 348               		.loc 1 429 0 discriminator 13
 349 0116 CF3A      		cpi r28,lo8(-81)
 350 0118 01F0      		breq .L30
 429:../../tmk_core/common/action.c ****     }
 351               		.loc 1 429 0 discriminator 15
 352 011a C13B      		cpi r28,lo8(-79)
 353 011c 01F0      		breq .L31
 429:../../tmk_core/common/action.c ****     }
 354               		.loc 1 429 0 discriminator 17
 355 011e C03B      		cpi r28,lo8(-80)
 356 0120 01F0      		breq .L32
 429:../../tmk_core/common/action.c ****     }
 357               		.loc 1 429 0 discriminator 19
 358 0122 C23B      		cpi r28,lo8(-78)
 359 0124 01F0      		breq .L33
 429:../../tmk_core/common/action.c ****     }
 360               		.loc 1 429 0 discriminator 21
 361 0126 C33B      		cpi r28,lo8(-77)
 362 0128 01F0      		breq .L34
 429:../../tmk_core/common/action.c ****     }
 363               		.loc 1 429 0 discriminator 23
 364 012a C43B      		cpi r28,lo8(-76)
 365 012c 01F0      		breq .L35
 429:../../tmk_core/common/action.c ****     }
 366               		.loc 1 429 0 discriminator 25
 367 012e C53B      		cpi r28,lo8(-75)
 368 0130 01F0      		breq .L36
 429:../../tmk_core/common/action.c ****     }
 369               		.loc 1 429 0 discriminator 27
 370 0132 C63B      		cpi r28,lo8(-74)
 371 0134 01F0      		breq .L37
 429:../../tmk_core/common/action.c ****     }
 372               		.loc 1 429 0 discriminator 29
 373 0136 C73B      		cpi r28,lo8(-73)
 374 0138 01F0      		breq .L38
 429:../../tmk_core/common/action.c ****     }
 375               		.loc 1 429 0 discriminator 31
 376 013a C83B      		cpi r28,lo8(-72)
 377 013c 01F0      		breq .L39
 429:../../tmk_core/common/action.c ****     }
 378               		.loc 1 429 0 discriminator 33
 379 013e C93B      		cpi r28,lo8(-71)
 380 0140 01F0      		breq .L40
 429:../../tmk_core/common/action.c ****     }
 381               		.loc 1 429 0 discriminator 35
 382 0142 CA3B      		cpi r28,lo8(-70)
 383 0144 01F0      		breq .L41
 429:../../tmk_core/common/action.c ****     }
 384               		.loc 1 429 0 discriminator 37
 385 0146 CB3B      		cpi r28,lo8(-69)
 386 0148 01F0      		breq .L42
 429:../../tmk_core/common/action.c ****     }
 387               		.loc 1 429 0 discriminator 39
 388 014a CC3B      		cpi r28,lo8(-68)
 389 014c 01F4      		brne .+2
 390 014e 00C0      		rjmp .L43
 429:../../tmk_core/common/action.c ****     }
 391               		.loc 1 429 0
 392 0150 80E0      		ldi r24,0
 393 0152 90E0      		ldi r25,0
 394 0154 00C0      		rjmp .L20
 395               	.L23:
 396 0156 82EE      		ldi r24,lo8(-30)
 397 0158 90E0      		ldi r25,0
 398 015a 00C0      		rjmp .L20
 399               	.L24:
 400 015c 89EE      		ldi r24,lo8(-23)
 401 015e 90E0      		ldi r25,0
 402 0160 00C0      		rjmp .L20
 403               	.L25:
 404 0162 8AEE      		ldi r24,lo8(-22)
 405 0164 90E0      		ldi r25,0
 406 0166 00C0      		rjmp .L20
 407               	.L26:
 408 0168 85EB      		ldi r24,lo8(-75)
 409 016a 90E0      		ldi r25,0
 410 016c 00C0      		rjmp .L20
 411               	.L27:
 412 016e 86EB      		ldi r24,lo8(-74)
 413 0170 90E0      		ldi r25,0
 414 0172 00C0      		rjmp .L20
 415               	.L28:
 416 0174 83EB      		ldi r24,lo8(-77)
 417 0176 90E0      		ldi r25,0
 418 0178 00C0      		rjmp .L20
 419               	.L29:
 420 017a 84EB      		ldi r24,lo8(-76)
 421 017c 90E0      		ldi r25,0
 422 017e 00C0      		rjmp .L20
 423               	.L30:
 424 0180 87EB      		ldi r24,lo8(-73)
 425 0182 90E0      		ldi r25,0
 426 0184 00C0      		rjmp .L20
 427               	.L31:
 428 0186 8CEC      		ldi r24,lo8(-52)
 429 0188 90E0      		ldi r25,0
 430 018a 00C0      		rjmp .L20
 431               	.L32:
 432 018c 8DEC      		ldi r24,lo8(-51)
 433 018e 90E0      		ldi r25,0
 434 0190 00C0      		rjmp .L20
 435               	.L33:
 436 0192 83E8      		ldi r24,lo8(-125)
 437 0194 91E0      		ldi r25,lo8(1)
 438 0196 00C0      		rjmp .L20
 439               	.L34:
 440 0198 8AE8      		ldi r24,lo8(-118)
 441 019a 91E0      		ldi r25,lo8(1)
 442 019c 00C0      		rjmp .L20
 443               	.L35:
 444 019e 82E9      		ldi r24,lo8(-110)
 445 01a0 91E0      		ldi r25,lo8(1)
 446 01a2 00C0      		rjmp .L20
 447               	.L36:
 448 01a4 84E9      		ldi r24,lo8(-108)
 449 01a6 91E0      		ldi r25,lo8(1)
 450 01a8 00C0      		rjmp .L20
 451               	.L37:
 452 01aa 81E2      		ldi r24,lo8(33)
 453 01ac 92E0      		ldi r25,lo8(2)
 454 01ae 00C0      		rjmp .L20
 455               	.L38:
 456 01b0 83E2      		ldi r24,lo8(35)
 457 01b2 92E0      		ldi r25,lo8(2)
 458 01b4 00C0      		rjmp .L20
 459               	.L39:
 460 01b6 84E2      		ldi r24,lo8(36)
 461 01b8 92E0      		ldi r25,lo8(2)
 462 01ba 00C0      		rjmp .L20
 463               	.L40:
 464 01bc 85E2      		ldi r24,lo8(37)
 465 01be 92E0      		ldi r25,lo8(2)
 466 01c0 00C0      		rjmp .L20
 467               	.L41:
 468 01c2 86E2      		ldi r24,lo8(38)
 469 01c4 92E0      		ldi r25,lo8(2)
 470 01c6 00C0      		rjmp .L20
 471               	.L42:
 472 01c8 87E2      		ldi r24,lo8(39)
 473 01ca 92E0      		ldi r25,lo8(2)
 474 01cc 00C0      		rjmp .L20
 475               	.L43:
 476 01ce 8AE2      		ldi r24,lo8(42)
 477 01d0 92E0      		ldi r25,lo8(2)
 478               	.L20:
 479               	/* epilogue start */
 480               		.loc 1 431 0 is_stmt 1 discriminator 84
 481 01d2 CF91      		pop r28
 482               	.LVL30:
 429:../../tmk_core/common/action.c ****     }
 483               		.loc 1 429 0 discriminator 84
 484 01d4 0C94 0000 		jmp host_consumer_send
 485               	.LVL31:
 486               	.L9:
 487               	/* epilogue start */
 488               		.loc 1 431 0
 489 01d8 CF91      		pop r28
 490 01da 0895      		ret
 491               		.cfi_endproc
 492               	.LFE105:
 494               		.section	.text.unregister_code,"ax",@progbits
 495               	.global	unregister_code
 497               	unregister_code:
 498               	.LFB106:
 432:../../tmk_core/common/action.c **** 
 433:../../tmk_core/common/action.c **** void unregister_code(uint8_t code)
 434:../../tmk_core/common/action.c **** {
 499               		.loc 1 434 0
 500               		.cfi_startproc
 501               	.LVL32:
 502               	/* prologue: function */
 503               	/* frame size = 0 */
 504               	/* stack size = 0 */
 505               	.L__stack_usage = 0
 435:../../tmk_core/common/action.c ****     if (code == KC_NO) {
 506               		.loc 1 435 0
 507 0000 8823      		tst r24
 508 0002 01F4      		brne .+2
 509 0004 00C0      		rjmp .L46
 436:../../tmk_core/common/action.c ****         return;
 437:../../tmk_core/common/action.c ****     }
 438:../../tmk_core/common/action.c **** 
 439:../../tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 440:../../tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 510               		.loc 1 440 0
 511 0006 8238      		cpi r24,lo8(-126)
 512 0008 01F4      		brne .L49
 441:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 442:../../tmk_core/common/action.c ****         // Resync: ignore if caps lock already is off
 443:../../tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
 513               		.loc 1 443 0
 514 000a 0E94 0000 		call host_keyboard_leds
 515               	.LVL33:
 516 000e 81FF      		sbrs r24,1
 517 0010 00C0      		rjmp .L46
 444:../../tmk_core/common/action.c **** #endif
 445:../../tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 518               		.loc 1 445 0
 519 0012 89E3      		ldi r24,lo8(57)
 520 0014 0E94 0000 		call add_key
 521               	.LVL34:
 446:../../tmk_core/common/action.c ****         send_keyboard_report();
 522               		.loc 1 446 0
 523 0018 0E94 0000 		call send_keyboard_report
 524               	.LVL35:
 525               	.LBB24:
 526               	.LBB25:
 527               		.loc 3 163 0
 528 001c 2FEF      		ldi r18,lo8(319999)
 529 001e 81EE      		ldi r24,hi8(319999)
 530 0020 94E0      		ldi r25,hlo8(319999)
 531 0022 2150      	1:	subi r18,1
 532 0024 8040      		sbci r24,0
 533 0026 9040      		sbci r25,0
 534 0028 01F4      		brne 1b
 535 002a 00C0      		rjmp .
 536 002c 0000      		nop
 537               	.LBE25:
 538               	.LBE24:
 447:../../tmk_core/common/action.c ****         wait_ms(100);
 448:../../tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 539               		.loc 1 448 0
 540 002e 89E3      		ldi r24,lo8(57)
 541 0030 00C0      		rjmp .L65
 542               	.LVL36:
 543               	.L49:
 449:../../tmk_core/common/action.c ****         send_keyboard_report();
 450:../../tmk_core/common/action.c ****     }
 451:../../tmk_core/common/action.c **** 
 452:../../tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 544               		.loc 1 452 0
 545 0032 8338      		cpi r24,lo8(-125)
 546 0034 01F4      		brne .L51
 453:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 454:../../tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
 547               		.loc 1 454 0
 548 0036 0E94 0000 		call host_keyboard_leds
 549               	.LVL37:
 550 003a 80FF      		sbrs r24,0
 551 003c 00C0      		rjmp .L46
 455:../../tmk_core/common/action.c **** #endif
 456:../../tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 552               		.loc 1 456 0
 553 003e 83E5      		ldi r24,lo8(83)
 554 0040 0E94 0000 		call add_key
 555               	.LVL38:
 457:../../tmk_core/common/action.c ****         send_keyboard_report();
 556               		.loc 1 457 0
 557 0044 0E94 0000 		call send_keyboard_report
 558               	.LVL39:
 559               	.LBB26:
 560               	.LBB27:
 561               		.loc 3 163 0
 562 0048 2FEF      		ldi r18,lo8(319999)
 563 004a 81EE      		ldi r24,hi8(319999)
 564 004c 94E0      		ldi r25,hlo8(319999)
 565 004e 2150      	1:	subi r18,1
 566 0050 8040      		sbci r24,0
 567 0052 9040      		sbci r25,0
 568 0054 01F4      		brne 1b
 569 0056 00C0      		rjmp .
 570 0058 0000      		nop
 571               	.LBE27:
 572               	.LBE26:
 458:../../tmk_core/common/action.c ****         wait_ms(100);
 459:../../tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 573               		.loc 1 459 0
 574 005a 83E5      		ldi r24,lo8(83)
 575               	.LVL40:
 576               	.L65:
 577 005c 0E94 0000 		call del_key
 578               	.LVL41:
 579               	.L66:
 460:../../tmk_core/common/action.c ****         send_keyboard_report();
 580               		.loc 1 460 0
 581 0060 0C94 0000 		jmp send_keyboard_report
 582               	.LVL42:
 583               	.L51:
 461:../../tmk_core/common/action.c ****     }
 462:../../tmk_core/common/action.c **** 
 463:../../tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 584               		.loc 1 463 0
 585 0064 8438      		cpi r24,lo8(-124)
 586 0066 01F4      		brne .L52
 464:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 465:../../tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
 587               		.loc 1 465 0
 588 0068 0E94 0000 		call host_keyboard_leds
 589               	.LVL43:
 590 006c 82FF      		sbrs r24,2
 591 006e 00C0      		rjmp .L46
 466:../../tmk_core/common/action.c **** #endif
 467:../../tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 592               		.loc 1 467 0
 593 0070 87E4      		ldi r24,lo8(71)
 594 0072 0E94 0000 		call add_key
 595               	.LVL44:
 468:../../tmk_core/common/action.c ****         send_keyboard_report();
 596               		.loc 1 468 0
 597 0076 0E94 0000 		call send_keyboard_report
 598               	.LVL45:
 599               	.LBB28:
 600               	.LBB29:
 601               		.loc 3 163 0
 602 007a 2FEF      		ldi r18,lo8(319999)
 603 007c 81EE      		ldi r24,hi8(319999)
 604 007e 94E0      		ldi r25,hlo8(319999)
 605 0080 2150      	1:	subi r18,1
 606 0082 8040      		sbci r24,0
 607 0084 9040      		sbci r25,0
 608 0086 01F4      		brne 1b
 609 0088 00C0      		rjmp .
 610 008a 0000      		nop
 611               	.LBE29:
 612               	.LBE28:
 469:../../tmk_core/common/action.c ****         wait_ms(100);
 470:../../tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 613               		.loc 1 470 0
 614 008c 87E4      		ldi r24,lo8(71)
 615 008e 00C0      		rjmp .L65
 616               	.LVL46:
 617               	.L52:
 471:../../tmk_core/common/action.c ****         send_keyboard_report();
 472:../../tmk_core/common/action.c ****     }
 473:../../tmk_core/common/action.c **** #endif
 474:../../tmk_core/common/action.c **** 
 475:../../tmk_core/common/action.c ****     else if IS_KEY(code) {
 618               		.loc 1 475 0
 619 0090 9CEF      		ldi r25,lo8(-4)
 620 0092 980F      		add r25,r24
 621 0094 913A      		cpi r25,lo8(-95)
 622 0096 00F0      		brlo .L65
 476:../../tmk_core/common/action.c ****         del_key(code);
 477:../../tmk_core/common/action.c ****         send_keyboard_report();
 478:../../tmk_core/common/action.c ****     }
 479:../../tmk_core/common/action.c ****     else if IS_MOD(code) {
 623               		.loc 1 479 0
 624 0098 90E2      		ldi r25,lo8(32)
 625 009a 980F      		add r25,r24
 626 009c 9830      		cpi r25,lo8(8)
 627 009e 00F4      		brsh .L54
 480:../../tmk_core/common/action.c ****         del_mods(MOD_BIT(code));
 628               		.loc 1 480 0
 629 00a0 8770      		andi r24,lo8(7)
 630               	.LVL47:
 631 00a2 91E0      		ldi r25,lo8(1)
 632 00a4 00C0      		rjmp 2f
 633               		1:
 634 00a6 990F      		lsl r25
 635               		2:
 636 00a8 8A95      		dec r24
 637 00aa 02F4      		brpl 1b
 638 00ac 892F      		mov r24,r25
 639 00ae 0E94 0000 		call del_mods
 640               	.LVL48:
 641 00b2 00C0      		rjmp .L66
 642               	.LVL49:
 643               	.L54:
 481:../../tmk_core/common/action.c ****         send_keyboard_report();
 482:../../tmk_core/common/action.c ****     }
 483:../../tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 644               		.loc 1 483 0
 645 00b4 9BE5      		ldi r25,lo8(91)
 646 00b6 980F      		add r25,r24
 647 00b8 9330      		cpi r25,lo8(3)
 648 00ba 00F4      		brsh .L55
 484:../../tmk_core/common/action.c ****         host_system_send(0);
 649               		.loc 1 484 0
 650 00bc 80E0      		ldi r24,0
 651 00be 90E0      		ldi r25,0
 652               	.LVL50:
 653 00c0 0C94 0000 		jmp host_system_send
 654               	.LVL51:
 655               	.L55:
 485:../../tmk_core/common/action.c ****     }
 486:../../tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 656               		.loc 1 486 0
 657 00c4 885A      		subi r24,lo8(-(88))
 658               	.LVL52:
 659 00c6 8531      		cpi r24,lo8(21)
 660 00c8 00F4      		brsh .L46
 487:../../tmk_core/common/action.c ****         host_consumer_send(0);
 661               		.loc 1 487 0
 662 00ca 80E0      		ldi r24,0
 663 00cc 90E0      		ldi r25,0
 664               	.LVL53:
 665 00ce 0C94 0000 		jmp host_consumer_send
 666               	.LVL54:
 667               	.L46:
 668 00d2 0895      		ret
 669               		.cfi_endproc
 670               	.LFE106:
 672               		.section	.text.register_mods,"ax",@progbits
 673               	.global	register_mods
 675               	register_mods:
 676               	.LFB107:
 488:../../tmk_core/common/action.c ****     }
 489:../../tmk_core/common/action.c **** }
 490:../../tmk_core/common/action.c **** 
 491:../../tmk_core/common/action.c **** void register_mods(uint8_t mods)
 492:../../tmk_core/common/action.c **** {
 677               		.loc 1 492 0
 678               		.cfi_startproc
 679               	.LVL55:
 680               	/* prologue: function */
 681               	/* frame size = 0 */
 682               	/* stack size = 0 */
 683               	.L__stack_usage = 0
 493:../../tmk_core/common/action.c ****     if (mods) {
 684               		.loc 1 493 0
 685 0000 8823      		tst r24
 686 0002 01F0      		breq .L67
 494:../../tmk_core/common/action.c ****         add_mods(mods);
 687               		.loc 1 494 0
 688 0004 0E94 0000 		call add_mods
 689               	.LVL56:
 495:../../tmk_core/common/action.c ****         send_keyboard_report();
 690               		.loc 1 495 0
 691 0008 0C94 0000 		jmp send_keyboard_report
 692               	.LVL57:
 693               	.L67:
 694 000c 0895      		ret
 695               		.cfi_endproc
 696               	.LFE107:
 698               		.section	.text.unregister_mods,"ax",@progbits
 699               	.global	unregister_mods
 701               	unregister_mods:
 702               	.LFB108:
 496:../../tmk_core/common/action.c ****     }
 497:../../tmk_core/common/action.c **** }
 498:../../tmk_core/common/action.c **** 
 499:../../tmk_core/common/action.c **** void unregister_mods(uint8_t mods)
 500:../../tmk_core/common/action.c **** {
 703               		.loc 1 500 0
 704               		.cfi_startproc
 705               	.LVL58:
 706               	/* prologue: function */
 707               	/* frame size = 0 */
 708               	/* stack size = 0 */
 709               	.L__stack_usage = 0
 501:../../tmk_core/common/action.c ****     if (mods) {
 710               		.loc 1 501 0
 711 0000 8823      		tst r24
 712 0002 01F0      		breq .L69
 502:../../tmk_core/common/action.c ****         del_mods(mods);
 713               		.loc 1 502 0
 714 0004 0E94 0000 		call del_mods
 715               	.LVL59:
 503:../../tmk_core/common/action.c ****         send_keyboard_report();
 716               		.loc 1 503 0
 717 0008 0C94 0000 		jmp send_keyboard_report
 718               	.LVL60:
 719               	.L69:
 720 000c 0895      		ret
 721               		.cfi_endproc
 722               	.LFE108:
 724               		.section	.text.process_action,"ax",@progbits
 725               	.global	process_action
 727               	process_action:
 728               	.LFB104:
  60:../../tmk_core/common/action.c ****     keyevent_t event = record->event;
 729               		.loc 1 60 0
 730               		.cfi_startproc
 731               	.LVL61:
 732 0000 CF92      		push r12
 733               	.LCFI5:
 734               		.cfi_def_cfa_offset 3
 735               		.cfi_offset 12, -2
 736 0002 DF92      		push r13
 737               	.LCFI6:
 738               		.cfi_def_cfa_offset 4
 739               		.cfi_offset 13, -3
 740 0004 EF92      		push r14
 741               	.LCFI7:
 742               		.cfi_def_cfa_offset 5
 743               		.cfi_offset 14, -4
 744 0006 FF92      		push r15
 745               	.LCFI8:
 746               		.cfi_def_cfa_offset 6
 747               		.cfi_offset 15, -5
 748 0008 0F93      		push r16
 749               	.LCFI9:
 750               		.cfi_def_cfa_offset 7
 751               		.cfi_offset 16, -6
 752 000a 1F93      		push r17
 753               	.LCFI10:
 754               		.cfi_def_cfa_offset 8
 755               		.cfi_offset 17, -7
 756 000c CF93      		push r28
 757               	.LCFI11:
 758               		.cfi_def_cfa_offset 9
 759               		.cfi_offset 28, -8
 760 000e DF93      		push r29
 761               	.LCFI12:
 762               		.cfi_def_cfa_offset 10
 763               		.cfi_offset 29, -9
 764 0010 00D0      		rcall .
 765 0012 00D0      		rcall .
 766 0014 00D0      		rcall .
 767               	.LCFI13:
 768               		.cfi_def_cfa_offset 16
 769 0016 CDB7      		in r28,__SP_L__
 770 0018 DEB7      		in r29,__SP_H__
 771               	.LCFI14:
 772               		.cfi_def_cfa_register 28
 773               	/* prologue: function */
 774               	/* frame size = 6 */
 775               	/* stack size = 14 */
 776               	.L__stack_usage = 14
  61:../../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 777               		.loc 1 61 0
 778 001a 25E0      		ldi r18,lo8(5)
 779 001c FC01      		movw r30,r24
 780 001e DE01      		movw r26,r28
 781 0020 1196      		adiw r26,1
 782               		0:
 783 0022 0190      		ld r0,Z+
 784 0024 0D92      		st X+,r0
 785 0026 2A95      		dec r18
 786 0028 01F4      		brne 0b
 787 002a FC01      		movw r30,r24
 788 002c 4081      		ld r20,Z
 789               	.LVL62:
 790 002e 3181      		ldd r19,Z+1
 791               	.LVL63:
 792 0030 F280      		ldd r15,Z+2
 793               	.LVL64:
  63:../../tmk_core/common/action.c **** #endif
 794               		.loc 1 63 0
 795 0032 2581      		ldd r18,Z+5
 796 0034 2295      		swap r18
 797 0036 2F70      		andi r18,lo8(15)
 798               	.LVL65:
 799               	.LBB36:
 800               	.LBB37:
 801               		.loc 2 49 0
 802 0038 6381      		ldd r22,Z+3
 803 003a 7481      		ldd r23,Z+4
 804 003c 672B      		or r22,r23
 805 003e 01F4      		brne .+2
 806 0040 00C0      		rjmp .L71
 807 0042 3F3F      		cpi r19,lo8(-1)
 808 0044 01F4      		brne .L73
 809               	.LBE37:
 810               	.LBE36:
  66:../../tmk_core/common/action.c **** 
 811               		.loc 1 66 0
 812 0046 4F3F      		cpi r20,lo8(-1)
 813 0048 01F4      		brne .+2
 814 004a 00C0      		rjmp .L71
 815               	.L73:
 816 004c 6C01      		movw r12,r24
  68:../../tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
 817               		.loc 1 68 0
 818 004e 4983      		std Y+1,r20
 819 0050 3A83      		std Y+2,r19
 820 0052 8981      		ldd r24,Y+1
 821 0054 9A81      		ldd r25,Y+2
 822               	.LVL66:
 823 0056 2E83      		std Y+6,r18
 824 0058 0E94 0000 		call layer_switch_get_action
 825               	.LVL67:
 826 005c 182F      		mov r17,r24
 827               	.LVL68:
 828 005e 092F      		mov r16,r25
  71:../../tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
 829               		.loc 1 71 0
 830 0060 0E94 0000 		call layer_debug
 831               	.LVL69:
  72:../../tmk_core/common/action.c **** #endif
 832               		.loc 1 72 0
 833 0064 0E94 0000 		call default_layer_debug
 834               	.LVL70:
  76:../../tmk_core/common/action.c ****         /* Key and Mods */
 835               		.loc 1 76 0
 836 0068 E02F      		mov r30,r16
 837 006a E295      		swap r30
 838 006c EF70      		andi r30,lo8(15)
 839 006e F0E0      		ldi r31,0
 840 0070 E050      		subi r30,lo8(-(gs(.L76)))
 841 0072 F040      		sbci r31,hi8(-(gs(.L76)))
 842 0074 2E81      		ldd r18,Y+6
 843 0076 0C94 0000 		jmp __tablejump2__
 844               		.section	.progmem.gcc_sw_table.process_action,"a",@progbits
 845               		.p2align	1
 846               	.L76:
 847 0000 0000      		.word gs(.L75)
 848 0002 0000      		.word gs(.L75)
 849 0004 0000      		.word gs(.L77)
 850 0006 0000      		.word gs(.L77)
 851 0008 0000      		.word gs(.L78)
 852 000a 0000      		.word gs(.L79)
 853 000c 0000      		.word gs(.L71)
 854 000e 0000      		.word gs(.L71)
 855 0010 0000      		.word gs(.L80)
 856 0012 0000      		.word gs(.L71)
 857 0014 0000      		.word gs(.L81)
 858 0016 0000      		.word gs(.L81)
 859 0018 0000      		.word gs(.L82)
 860 001a 0000      		.word gs(.L71)
 861 001c 0000      		.word gs(.L71)
 862 001e 0000      		.word gs(.L83)
 863               		.section	.text.process_action
 864               	.L75:
 865               	.LBB38:
  81:../../tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 866               		.loc 1 81 0
 867 007a 802F      		mov r24,r16
 868 007c 807F      		andi r24,lo8(-16)
 869 007e 902F      		mov r25,r16
 870 0080 9F70      		andi r25,lo8(15)
 871 0082 092F      		mov r16,r25
 872 0084 8823      		tst r24
 873 0086 01F0      		breq .L85
  81:../../tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 874               		.loc 1 81 0 is_stmt 0 discriminator 2
 875 0088 0295      		swap r16
 876 008a 007F      		andi r16,lo8(-16)
 877               	.L85:
 878               	.LVL71:
  83:../../tmk_core/common/action.c ****                     if (mods) {
 879               		.loc 1 83 0 is_stmt 1 discriminator 4
 880 008c FF20      		tst r15
 881 008e 01F0      		breq .L86
  84:../../tmk_core/common/action.c ****                         add_weak_mods(mods);
 882               		.loc 1 84 0
 883 0090 0023      		tst r16
 884 0092 01F4      		brne .+2
 885 0094 00C0      		rjmp .L170
  85:../../tmk_core/common/action.c ****                         send_keyboard_report();
 886               		.loc 1 85 0
 887 0096 802F      		mov r24,r16
 888 0098 0E94 0000 		call add_weak_mods
 889               	.LVL72:
  86:../../tmk_core/common/action.c ****                     }
 890               		.loc 1 86 0
 891 009c 0E94 0000 		call send_keyboard_report
 892               	.LVL73:
 893 00a0 00C0      		rjmp .L170
 894               	.L86:
  90:../../tmk_core/common/action.c ****                     if (mods) {
 895               		.loc 1 90 0
 896 00a2 812F      		mov r24,r17
 897 00a4 0E94 0000 		call unregister_code
 898               	.LVL74:
  91:../../tmk_core/common/action.c ****                         del_weak_mods(mods);
 899               		.loc 1 91 0
 900 00a8 0023      		tst r16
 901 00aa 01F4      		brne .+2
 902 00ac 00C0      		rjmp .L71
  92:../../tmk_core/common/action.c ****                         send_keyboard_report();
 903               		.loc 1 92 0
 904 00ae 802F      		mov r24,r16
 905 00b0 0E94 0000 		call del_weak_mods
 906               	.LVL75:
 907               	/* epilogue start */
 908               	.LBE38:
 347:../../tmk_core/common/action.c **** 
 909               		.loc 1 347 0
 910 00b4 2696      		adiw r28,6
 911               	.LVL76:
 912 00b6 0FB6      		in __tmp_reg__,__SREG__
 913 00b8 F894      		cli
 914 00ba DEBF      		out __SP_H__,r29
 915 00bc 0FBE      		out __SREG__,__tmp_reg__
 916 00be CDBF      		out __SP_L__,r28
 917               	.LVL77:
 918 00c0 DF91      		pop r29
 919 00c2 CF91      		pop r28
 920 00c4 1F91      		pop r17
 921 00c6 0F91      		pop r16
 922               	.LVL78:
 923 00c8 FF90      		pop r15
 924               	.LVL79:
 925 00ca EF90      		pop r14
 926 00cc DF90      		pop r13
 927 00ce CF90      		pop r12
 928               	.LVL80:
 929               	.LBB39:
  93:../../tmk_core/common/action.c ****                     }
 930               		.loc 1 93 0
 931 00d0 0C94 0000 		jmp send_keyboard_report
 932               	.LVL81:
 933               	.L77:
 934               	.LBE39:
 935               	.LBB40:
 102:../../tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 936               		.loc 1 102 0
 937 00d4 802F      		mov r24,r16
 938 00d6 807F      		andi r24,lo8(-16)
 939 00d8 902F      		mov r25,r16
 940 00da 9F70      		andi r25,lo8(15)
 941 00dc 092F      		mov r16,r25
 942 00de 8032      		cpi r24,lo8(32)
 943 00e0 01F0      		breq .L90
 102:../../tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 944               		.loc 1 102 0 is_stmt 0 discriminator 2
 945 00e2 0295      		swap r16
 946 00e4 007F      		andi r16,lo8(-16)
 947               	.L90:
 948               	.LVL82:
 104:../../tmk_core/common/action.c ****     #ifndef NO_ACTION_ONESHOT
 949               		.loc 1 104 0 is_stmt 1 discriminator 4
 950 00e6 1123      		tst r17
 951 00e8 01F0      		breq .L92
 952 00ea 1130      		cpi r17,lo8(1)
 953 00ec 01F0      		breq .L93
 954 00ee 00C0      		rjmp .L178
 955               	.L92:
 108:../../tmk_core/common/action.c ****                             if (tap_count == 0) {
 956               		.loc 1 108 0
 957 00f0 FF20      		tst r15
 958 00f2 01F0      		breq .L94
 110:../../tmk_core/common/action.c ****                             }
 959               		.loc 1 110 0
 960 00f4 802F      		mov r24,r16
 109:../../tmk_core/common/action.c ****                                 register_mods(mods);
 961               		.loc 1 109 0
 962 00f6 2223      		tst r18
 963 00f8 01F0      		breq .L166
 112:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 964               		.loc 1 112 0
 965 00fa 2130      		cpi r18,lo8(1)
 966 00fc 01F4      		brne .L166
 967               	/* epilogue start */
 968               	.LBE40:
 347:../../tmk_core/common/action.c **** 
 969               		.loc 1 347 0
 970 00fe 2696      		adiw r28,6
 971 0100 0FB6      		in __tmp_reg__,__SREG__
 972 0102 F894      		cli
 973 0104 DEBF      		out __SP_H__,r29
 974 0106 0FBE      		out __SREG__,__tmp_reg__
 975 0108 CDBF      		out __SP_L__,r28
 976 010a DF91      		pop r29
 977 010c CF91      		pop r28
 978 010e 1F91      		pop r17
 979 0110 0F91      		pop r16
 980               	.LVL83:
 981 0112 FF90      		pop r15
 982               	.LVL84:
 983 0114 EF90      		pop r14
 984 0116 DF90      		pop r13
 985 0118 CF90      		pop r12
 986               	.LVL85:
 987               	.LBB41:
 114:../../tmk_core/common/action.c ****                             }
 988               		.loc 1 114 0
 989 011a 0C94 0000 		jmp set_oneshot_mods
 990               	.LVL86:
 991               	.L94:
 120:../../tmk_core/common/action.c ****                                 clear_oneshot_mods();
 992               		.loc 1 120 0
 993 011e 2223      		tst r18
 994 0120 01F0      		breq .L167
 124:../../tmk_core/common/action.c ****                                 // Retain Oneshot mods
 995               		.loc 1 124 0
 996 0122 2130      		cpi r18,lo8(1)
 997 0124 01F4      		brne .+2
 998 0126 00C0      		rjmp .L71
 999               	.L167:
 128:../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 1000               		.loc 1 128 0
 1001 0128 0E94 0000 		call clear_oneshot_mods
 1002               	.LVL87:
 1003 012c 00C0      		rjmp .L104
 1004               	.L93:
 135:../../tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 1005               		.loc 1 135 0
 1006 012e FF20      		tst r15
 1007 0130 01F0      		breq .L99
 136:../../tmk_core/common/action.c ****                                 if (mods & get_mods()) {
 1008               		.loc 1 136 0
 1009 0132 2630      		cpi r18,lo8(6)
 1010 0134 00F0      		brlo .+2
 1011 0136 00C0      		rjmp .L71
 137:../../tmk_core/common/action.c ****                                     dprint("MODS_TAP_TOGGLE: toggle mods off\n");
 1012               		.loc 1 137 0
 1013 0138 0E94 0000 		call get_mods
 1014               	.LVL88:
 1015 013c 8023      		and r24,r16
 1016 013e 01F0      		breq .L100
 1017 0140 00C0      		rjmp .L104
 1018               	.L178:
 153:../../tmk_core/common/action.c ****                             if (tap_count > 0) {
 1019               		.loc 1 153 0
 1020 0142 FF20      		tst r15
 1021 0144 01F0      		breq .L101
 154:../../tmk_core/common/action.c ****                                 if (record->tap.interrupted) {
 1022               		.loc 1 154 0
 1023 0146 2111      		cpse r18,__zero_reg__
 1024 0148 00C0      		rjmp .L179
 1025               	.L100:
 142:../../tmk_core/common/action.c ****                                 }
 1026               		.loc 1 142 0
 1027 014a 802F      		mov r24,r16
 1028               	.LVL89:
 1029               	.L166:
 1030               	/* epilogue start */
 1031               	.LBE41:
 347:../../tmk_core/common/action.c **** 
 1032               		.loc 1 347 0
 1033 014c 2696      		adiw r28,6
 1034 014e 0FB6      		in __tmp_reg__,__SREG__
 1035 0150 F894      		cli
 1036 0152 DEBF      		out __SP_H__,r29
 1037 0154 0FBE      		out __SREG__,__tmp_reg__
 1038 0156 CDBF      		out __SP_L__,r28
 1039 0158 DF91      		pop r29
 1040 015a CF91      		pop r28
 1041 015c 1F91      		pop r17
 1042               	.LVL90:
 1043 015e 0F91      		pop r16
 1044 0160 FF90      		pop r15
 1045               	.LVL91:
 1046 0162 EF90      		pop r14
 1047 0164 DF90      		pop r13
 1048 0166 CF90      		pop r12
 1049               	.LVL92:
 1050               	.LBB42:
 142:../../tmk_core/common/action.c ****                                 }
 1051               		.loc 1 142 0
 1052 0168 0C94 0000 		jmp register_mods
 1053               	.LVL93:
 1054               	.L99:
 146:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP_TOGGLE: release : unregister_mods\n");
 1055               		.loc 1 146 0
 1056 016c 2530      		cpi r18,lo8(5)
 1057 016e 00F0      		brlo .+2
 1058 0170 00C0      		rjmp .L71
 1059 0172 00C0      		rjmp .L104
 1060               	.L179:
 155:../../tmk_core/common/action.c ****                                     dprint("MODS_TAP: Tap: Cancel: add_mods\n");
 1061               		.loc 1 155 0
 1062 0174 F601      		movw r30,r12
 1063 0176 8581      		ldd r24,Z+5
 1064 0178 80FF      		sbrs r24,0
 1065 017a 00C0      		rjmp .L170
 158:../../tmk_core/common/action.c ****                                     register_mods(mods);
 1066               		.loc 1 158 0
 1067 017c 8F70      		andi r24,lo8(15)
 1068 017e 8583      		std Z+5,r24
 1069 0180 00C0      		rjmp .L100
 1070               	.L101:
 169:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 1071               		.loc 1 169 0
 1072 0182 2111      		cpse r18,__zero_reg__
 1073 0184 00C0      		rjmp .L171
 1074               	.L104:
 174:../../tmk_core/common/action.c ****                             }
 1075               		.loc 1 174 0
 1076 0186 802F      		mov r24,r16
 1077 0188 00C0      		rjmp .L172
 1078               	.LVL94:
 1079               	.L78:
 1080               	.LBE42:
 185:../../tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 1081               		.loc 1 185 0
 1082 018a 202F      		mov r18,r16
 1083 018c 2695      		lsr r18
 1084 018e 2695      		lsr r18
 1085 0190 2370      		andi r18,lo8(3)
 1086 0192 30E0      		ldi r19,0
 1087 0194 2115      		cp r18,__zero_reg__
 1088 0196 3105      		cpc r19,__zero_reg__
 1089 0198 01F0      		breq .L105
 1090 019a 2130      		cpi r18,1
 1091 019c 3105      		cpc r19,__zero_reg__
 1092 019e 01F0      		breq .L106
 1093 01a0 00C0      		rjmp .L71
 1094               	.L105:
 187:../../tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 1095               		.loc 1 187 0
 1096 01a2 FF20      		tst r15
 1097 01a4 01F0      		breq .L107
 1098               	.LVL95:
 188:../../tmk_core/common/action.c ****                     } else {
 1099               		.loc 1 188 0
 1100 01a6 812F      		mov r24,r17
 1101 01a8 902F      		mov r25,r16
 1102 01aa 9370      		andi r25,lo8(3)
 1103 01ac 00C0      		rjmp .L173
 1104               	.LVL96:
 1105               	.L107:
 190:../../tmk_core/common/action.c ****                     }
 1106               		.loc 1 190 0
 1107 01ae 80E0      		ldi r24,0
 1108 01b0 90E0      		ldi r25,0
 1109               	.LVL97:
 1110               	.L173:
 1111               	/* epilogue start */
 347:../../tmk_core/common/action.c **** 
 1112               		.loc 1 347 0
 1113 01b2 2696      		adiw r28,6
 1114 01b4 0FB6      		in __tmp_reg__,__SREG__
 1115 01b6 F894      		cli
 1116 01b8 DEBF      		out __SP_H__,r29
 1117 01ba 0FBE      		out __SREG__,__tmp_reg__
 1118 01bc CDBF      		out __SP_L__,r28
 1119 01be DF91      		pop r29
 1120 01c0 CF91      		pop r28
 1121 01c2 1F91      		pop r17
 1122               	.LVL98:
 1123 01c4 0F91      		pop r16
 1124 01c6 FF90      		pop r15
 1125               	.LVL99:
 1126 01c8 EF90      		pop r14
 1127 01ca DF90      		pop r13
 1128 01cc CF90      		pop r12
 1129               	.LVL100:
 190:../../tmk_core/common/action.c ****                     }
 1130               		.loc 1 190 0
 1131 01ce 0C94 0000 		jmp host_system_send
 1132               	.LVL101:
 1133               	.L106:
 194:../../tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 1134               		.loc 1 194 0
 1135 01d2 FF20      		tst r15
 1136 01d4 01F0      		breq .L108
 1137               	.LVL102:
 195:../../tmk_core/common/action.c ****                     } else {
 1138               		.loc 1 195 0
 1139 01d6 812F      		mov r24,r17
 1140 01d8 902F      		mov r25,r16
 1141 01da 9370      		andi r25,lo8(3)
 1142 01dc 00C0      		rjmp .L175
 1143               	.LVL103:
 1144               	.L108:
 197:../../tmk_core/common/action.c ****                     }
 1145               		.loc 1 197 0
 1146 01de 80E0      		ldi r24,0
 1147 01e0 90E0      		ldi r25,0
 1148               	.LVL104:
 1149               	.L175:
 1150               	/* epilogue start */
 347:../../tmk_core/common/action.c **** 
 1151               		.loc 1 347 0
 1152 01e2 2696      		adiw r28,6
 1153 01e4 0FB6      		in __tmp_reg__,__SREG__
 1154 01e6 F894      		cli
 1155 01e8 DEBF      		out __SP_H__,r29
 1156 01ea 0FBE      		out __SREG__,__tmp_reg__
 1157 01ec CDBF      		out __SP_L__,r28
 1158 01ee DF91      		pop r29
 1159 01f0 CF91      		pop r28
 1160 01f2 1F91      		pop r17
 1161               	.LVL105:
 1162 01f4 0F91      		pop r16
 1163 01f6 FF90      		pop r15
 1164               	.LVL106:
 1165 01f8 EF90      		pop r14
 1166 01fa DF90      		pop r13
 1167 01fc CF90      		pop r12
 1168               	.LVL107:
 197:../../tmk_core/common/action.c ****                     }
 1169               		.loc 1 197 0
 1170 01fe 0C94 0000 		jmp host_consumer_send
 1171               	.LVL108:
 1172               	.L79:
 207:../../tmk_core/common/action.c ****                 mousekey_send();
 1173               		.loc 1 207 0
 1174 0202 812F      		mov r24,r17
 206:../../tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 1175               		.loc 1 206 0
 1176 0204 FF20      		tst r15
 1177 0206 01F0      		breq .L109
 207:../../tmk_core/common/action.c ****                 mousekey_send();
 1178               		.loc 1 207 0
 1179 0208 0E94 0000 		call mousekey_on
 1180               	.LVL109:
 1181 020c 00C0      		rjmp .L176
 1182               	.L109:
 210:../../tmk_core/common/action.c ****                 mousekey_send();
 1183               		.loc 1 210 0
 1184 020e 0E94 0000 		call mousekey_off
 1185               	.LVL110:
 1186               	.L176:
 1187               	/* epilogue start */
 347:../../tmk_core/common/action.c **** 
 1188               		.loc 1 347 0
 1189 0212 2696      		adiw r28,6
 1190 0214 0FB6      		in __tmp_reg__,__SREG__
 1191 0216 F894      		cli
 1192 0218 DEBF      		out __SP_H__,r29
 1193 021a 0FBE      		out __SREG__,__tmp_reg__
 1194 021c CDBF      		out __SP_L__,r28
 1195 021e DF91      		pop r29
 1196 0220 CF91      		pop r28
 1197 0222 1F91      		pop r17
 1198               	.LVL111:
 1199 0224 0F91      		pop r16
 1200 0226 FF90      		pop r15
 1201               	.LVL112:
 1202 0228 EF90      		pop r14
 1203 022a DF90      		pop r13
 1204 022c CF90      		pop r12
 1205               	.LVL113:
 211:../../tmk_core/common/action.c ****             }
 1206               		.loc 1 211 0
 1207 022e 0C94 0000 		jmp mousekey_send
 1208               	.LVL114:
 1209               	.L80:
 217:../../tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 1210               		.loc 1 217 0
 1211 0232 802F      		mov r24,r16
 1212 0234 8370      		andi r24,lo8(3)
 1213 0236 01F0      		breq .+2
 1214 0238 00C0      		rjmp .L110
 219:../../tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 1215               		.loc 1 219 0
 1216 023a F110      		cpse r15,__zero_reg__
 1217 023c 00C0      		rjmp .L71
 1218               	.LVL115:
 1219               	.LBB43:
 220:../../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1220               		.loc 1 220 0
 1221 023e 812F      		mov r24,r17
 1222 0240 8295      		swap r24
 1223 0242 8695      		lsr r24
 1224 0244 8770      		andi r24,lo8(7)
 1225 0246 880F      		lsl r24
 1226 0248 880F      		lsl r24
 221:../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1227               		.loc 1 221 0
 1228 024a 912F      		mov r25,r17
 1229 024c 9F70      		andi r25,lo8(15)
 1230 024e C92E      		mov r12,r25
 1231               	.LVL116:
 1232 0250 D12C      		mov r13,__zero_reg__
 1233 0252 E12C      		mov r14,__zero_reg__
 1234 0254 F12C      		mov r15,__zero_reg__
 1235 0256 082E      		mov r0,r24
 1236 0258 00C0      		rjmp 2f
 1237               		1:
 1238 025a CC0C      		lsl r12
 1239 025c DD1C      		rol r13
 1240 025e EE1C      		rol r14
 1241 0260 FF1C      		rol r15
 1242               		2:
 1243 0262 0A94      		dec r0
 1244 0264 02F4      		brpl 1b
 1245               	.LVL117:
 222:../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1246               		.loc 1 222 0
 1247 0266 14FF      		sbrs r17,4
 1248 0268 00C0      		rjmp .L138
 222:../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1249               		.loc 1 222 0 is_stmt 0 discriminator 1
 1250 026a 4FE0      		ldi r20,lo8(15)
 1251 026c 50E0      		ldi r21,0
 1252 026e 60E0      		ldi r22,0
 1253 0270 70E0      		ldi r23,0
 1254 0272 00C0      		rjmp 2f
 1255               		1:
 1256 0274 440F      		lsl r20
 1257 0276 551F      		rol r21
 1258 0278 661F      		rol r22
 1259 027a 771F      		rol r23
 1260               		2:
 1261 027c 8A95      		dec r24
 1262 027e 02F4      		brpl 1b
 1263 0280 CB01      		movw r24,r22
 1264 0282 BA01      		movw r22,r20
 1265 0284 6095      		com r22
 1266 0286 7095      		com r23
 1267 0288 8095      		com r24
 1268 028a 9095      		com r25
 1269 028c 00C0      		rjmp .L111
 1270               	.L138:
 222:../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1271               		.loc 1 222 0
 1272 028e 60E0      		ldi r22,0
 1273 0290 70E0      		ldi r23,0
 1274 0292 CB01      		movw r24,r22
 1275               	.L111:
 1276               	.LVL118:
 223:../../tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 1277               		.loc 1 223 0 is_stmt 1 discriminator 4
 1278 0294 202F      		mov r18,r16
 1279 0296 2695      		lsr r18
 1280 0298 2695      		lsr r18
 1281 029a 2370      		andi r18,lo8(3)
 1282 029c 422F      		mov r20,r18
 1283 029e 50E0      		ldi r21,0
 1284 02a0 4230      		cpi r20,2
 1285 02a2 5105      		cpc r21,__zero_reg__
 1286 02a4 01F0      		breq .L113
 1287 02a6 4330      		cpi r20,3
 1288 02a8 5105      		cpc r21,__zero_reg__
 1289 02aa 01F0      		breq .L114
 1290 02ac 6C29      		or r22,r12
 1291 02ae 7D29      		or r23,r13
 1292 02b0 8E29      		or r24,r14
 1293 02b2 9F29      		or r25,r15
 1294               	.LVL119:
 1295 02b4 4130      		cpi r20,1
 1296 02b6 5105      		cpc r21,__zero_reg__
 1297 02b8 01F0      		breq .L177
 1298               	/* epilogue start */
 1299               	.LBE43:
 347:../../tmk_core/common/action.c **** 
 1300               		.loc 1 347 0 discriminator 4
 1301 02ba 2696      		adiw r28,6
 1302 02bc 0FB6      		in __tmp_reg__,__SREG__
 1303 02be F894      		cli
 1304 02c0 DEBF      		out __SP_H__,r29
 1305 02c2 0FBE      		out __SREG__,__tmp_reg__
 1306 02c4 CDBF      		out __SP_L__,r28
 1307 02c6 DF91      		pop r29
 1308 02c8 CF91      		pop r28
 1309 02ca 1F91      		pop r17
 1310               	.LVL120:
 1311 02cc 0F91      		pop r16
 1312 02ce FF90      		pop r15
 1313               	.LVL121:
 1314 02d0 EF90      		pop r14
 1315 02d2 DF90      		pop r13
 1316 02d4 CF90      		pop r12
 1317               	.LVL122:
 1318               	.LBB44:
 224:../../tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 1319               		.loc 1 224 0 discriminator 4
 1320 02d6 0C94 0000 		jmp default_layer_and
 1321               	.LVL123:
 1322               	.L113:
 226:../../tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1323               		.loc 1 226 0
 1324 02da 6C29      		or r22,r12
 1325 02dc 7D29      		or r23,r13
 1326 02de 8E29      		or r24,r14
 1327 02e0 9F29      		or r25,r15
 1328               	.LVL124:
 1329               	/* epilogue start */
 1330               	.LBE44:
 347:../../tmk_core/common/action.c **** 
 1331               		.loc 1 347 0
 1332 02e2 2696      		adiw r28,6
 1333 02e4 0FB6      		in __tmp_reg__,__SREG__
 1334 02e6 F894      		cli
 1335 02e8 DEBF      		out __SP_H__,r29
 1336 02ea 0FBE      		out __SREG__,__tmp_reg__
 1337 02ec CDBF      		out __SP_L__,r28
 1338 02ee DF91      		pop r29
 1339 02f0 CF91      		pop r28
 1340 02f2 1F91      		pop r17
 1341               	.LVL125:
 1342 02f4 0F91      		pop r16
 1343 02f6 FF90      		pop r15
 1344               	.LVL126:
 1345 02f8 EF90      		pop r14
 1346 02fa DF90      		pop r13
 1347 02fc CF90      		pop r12
 1348               	.LVL127:
 1349               	.LBB45:
 226:../../tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1350               		.loc 1 226 0
 1351 02fe 0C94 0000 		jmp default_layer_xor
 1352               	.LVL128:
 1353               	.L114:
 227:../../tmk_core/common/action.c ****                     }
 1354               		.loc 1 227 0
 1355 0302 0E94 0000 		call default_layer_and
 1356               	.LVL129:
 1357 0306 C701      		movw r24,r14
 1358 0308 B601      		movw r22,r12
 1359               	.L177:
 1360               	/* epilogue start */
 1361               	.LBE45:
 347:../../tmk_core/common/action.c **** 
 1362               		.loc 1 347 0
 1363 030a 2696      		adiw r28,6
 1364 030c 0FB6      		in __tmp_reg__,__SREG__
 1365 030e F894      		cli
 1366 0310 DEBF      		out __SP_H__,r29
 1367 0312 0FBE      		out __SREG__,__tmp_reg__
 1368 0314 CDBF      		out __SP_L__,r28
 1369 0316 DF91      		pop r29
 1370 0318 CF91      		pop r28
 1371 031a 1F91      		pop r17
 1372               	.LVL130:
 1373 031c 0F91      		pop r16
 1374 031e FF90      		pop r15
 1375               	.LVL131:
 1376 0320 EF90      		pop r14
 1377 0322 DF90      		pop r13
 1378 0324 CF90      		pop r12
 1379               	.LVL132:
 1380               	.LBB46:
 227:../../tmk_core/common/action.c ****                     }
 1381               		.loc 1 227 0
 1382 0326 0C94 0000 		jmp default_layer_or
 1383               	.LVL133:
 1384               	.L110:
 1385               	.LBE46:
 232:../../tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1386               		.loc 1 232 0
 1387 032a FF20      		tst r15
 1388 032c 01F0      		breq .L116
 232:../../tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1389               		.loc 1 232 0 is_stmt 0 discriminator 1
 1390 032e 802F      		mov r24,r16
 1391 0330 8170      		andi r24,lo8(1)
 1392 0332 00C0      		rjmp .L117
 1393               	.L116:
 232:../../tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1394               		.loc 1 232 0 discriminator 2
 1395 0334 8695      		lsr r24
 1396               	.L117:
 232:../../tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1397               		.loc 1 232 0 discriminator 4
 1398 0336 8823      		tst r24
 1399 0338 01F4      		brne .+2
 1400 033a 00C0      		rjmp .L71
 1401               	.LVL134:
 1402               	.LBB47:
 234:../../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1403               		.loc 1 234 0 is_stmt 1
 1404 033c 812F      		mov r24,r17
 1405 033e 8295      		swap r24
 1406 0340 8695      		lsr r24
 1407 0342 8770      		andi r24,lo8(7)
 1408 0344 880F      		lsl r24
 1409 0346 880F      		lsl r24
 235:../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1410               		.loc 1 235 0
 1411 0348 912F      		mov r25,r17
 1412 034a 9F70      		andi r25,lo8(15)
 1413 034c C92E      		mov r12,r25
 1414               	.LVL135:
 1415 034e D12C      		mov r13,__zero_reg__
 1416 0350 E12C      		mov r14,__zero_reg__
 1417 0352 F12C      		mov r15,__zero_reg__
 1418 0354 082E      		mov r0,r24
 1419 0356 00C0      		rjmp 2f
 1420               		1:
 1421 0358 CC0C      		lsl r12
 1422 035a DD1C      		rol r13
 1423 035c EE1C      		rol r14
 1424 035e FF1C      		rol r15
 1425               		2:
 1426 0360 0A94      		dec r0
 1427 0362 02F4      		brpl 1b
 1428               	.LVL136:
 236:../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1429               		.loc 1 236 0
 1430 0364 14FF      		sbrs r17,4
 1431 0366 00C0      		rjmp .L139
 236:../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1432               		.loc 1 236 0 is_stmt 0 discriminator 1
 1433 0368 4FE0      		ldi r20,lo8(15)
 1434 036a 50E0      		ldi r21,0
 1435 036c 60E0      		ldi r22,0
 1436 036e 70E0      		ldi r23,0
 1437 0370 00C0      		rjmp 2f
 1438               		1:
 1439 0372 440F      		lsl r20
 1440 0374 551F      		rol r21
 1441 0376 661F      		rol r22
 1442 0378 771F      		rol r23
 1443               		2:
 1444 037a 8A95      		dec r24
 1445 037c 02F4      		brpl 1b
 1446 037e CB01      		movw r24,r22
 1447 0380 BA01      		movw r22,r20
 1448 0382 6095      		com r22
 1449 0384 7095      		com r23
 1450 0386 8095      		com r24
 1451 0388 9095      		com r25
 1452 038a 00C0      		rjmp .L118
 1453               	.L139:
 236:../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1454               		.loc 1 236 0
 1455 038c 60E0      		ldi r22,0
 1456 038e 70E0      		ldi r23,0
 1457 0390 CB01      		movw r24,r22
 1458               	.L118:
 1459               	.LVL137:
 237:../../tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1460               		.loc 1 237 0 is_stmt 1 discriminator 4
 1461 0392 202F      		mov r18,r16
 1462 0394 2695      		lsr r18
 1463 0396 2695      		lsr r18
 1464 0398 2370      		andi r18,lo8(3)
 1465 039a 422F      		mov r20,r18
 1466 039c 50E0      		ldi r21,0
 1467 039e 4230      		cpi r20,2
 1468 03a0 5105      		cpc r21,__zero_reg__
 1469 03a2 01F0      		breq .L120
 1470 03a4 4330      		cpi r20,3
 1471 03a6 5105      		cpc r21,__zero_reg__
 1472 03a8 01F0      		breq .L121
 1473 03aa 6C29      		or r22,r12
 1474 03ac 7D29      		or r23,r13
 1475 03ae 8E29      		or r24,r14
 1476 03b0 9F29      		or r25,r15
 1477               	.LVL138:
 1478 03b2 4130      		cpi r20,1
 1479 03b4 5105      		cpc r21,__zero_reg__
 1480 03b6 01F0      		breq .L174
 1481               	/* epilogue start */
 1482               	.LBE47:
 347:../../tmk_core/common/action.c **** 
 1483               		.loc 1 347 0 discriminator 4
 1484 03b8 2696      		adiw r28,6
 1485 03ba 0FB6      		in __tmp_reg__,__SREG__
 1486 03bc F894      		cli
 1487 03be DEBF      		out __SP_H__,r29
 1488 03c0 0FBE      		out __SREG__,__tmp_reg__
 1489 03c2 CDBF      		out __SP_L__,r28
 1490 03c4 DF91      		pop r29
 1491 03c6 CF91      		pop r28
 1492 03c8 1F91      		pop r17
 1493               	.LVL139:
 1494 03ca 0F91      		pop r16
 1495 03cc FF90      		pop r15
 1496               	.LVL140:
 1497 03ce EF90      		pop r14
 1498 03d0 DF90      		pop r13
 1499 03d2 CF90      		pop r12
 1500               	.LVL141:
 1501               	.LBB48:
 238:../../tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 1502               		.loc 1 238 0 discriminator 4
 1503 03d4 0C94 0000 		jmp layer_and
 1504               	.LVL142:
 1505               	.L120:
 240:../../tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1506               		.loc 1 240 0
 1507 03d8 6C29      		or r22,r12
 1508 03da 7D29      		or r23,r13
 1509 03dc 8E29      		or r24,r14
 1510 03de 9F29      		or r25,r15
 1511               	.LVL143:
 1512               	/* epilogue start */
 1513               	.LBE48:
 347:../../tmk_core/common/action.c **** 
 1514               		.loc 1 347 0
 1515 03e0 2696      		adiw r28,6
 1516 03e2 0FB6      		in __tmp_reg__,__SREG__
 1517 03e4 F894      		cli
 1518 03e6 DEBF      		out __SP_H__,r29
 1519 03e8 0FBE      		out __SREG__,__tmp_reg__
 1520 03ea CDBF      		out __SP_L__,r28
 1521 03ec DF91      		pop r29
 1522 03ee CF91      		pop r28
 1523 03f0 1F91      		pop r17
 1524               	.LVL144:
 1525 03f2 0F91      		pop r16
 1526 03f4 FF90      		pop r15
 1527               	.LVL145:
 1528 03f6 EF90      		pop r14
 1529 03f8 DF90      		pop r13
 1530 03fa CF90      		pop r12
 1531               	.LVL146:
 1532               	.LBB49:
 240:../../tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1533               		.loc 1 240 0
 1534 03fc 0C94 0000 		jmp layer_xor
 1535               	.LVL147:
 1536               	.L121:
 241:../../tmk_core/common/action.c ****                     }
 1537               		.loc 1 241 0
 1538 0400 0E94 0000 		call layer_and
 1539               	.LVL148:
 1540 0404 C701      		movw r24,r14
 1541 0406 B601      		movw r22,r12
 1542               	.L174:
 1543               	/* epilogue start */
 1544               	.LBE49:
 347:../../tmk_core/common/action.c **** 
 1545               		.loc 1 347 0
 1546 0408 2696      		adiw r28,6
 1547 040a 0FB6      		in __tmp_reg__,__SREG__
 1548 040c F894      		cli
 1549 040e DEBF      		out __SP_H__,r29
 1550 0410 0FBE      		out __SREG__,__tmp_reg__
 1551 0412 CDBF      		out __SP_L__,r28
 1552 0414 DF91      		pop r29
 1553 0416 CF91      		pop r28
 1554 0418 1F91      		pop r17
 1555               	.LVL149:
 1556 041a 0F91      		pop r16
 1557 041c FF90      		pop r15
 1558               	.LVL150:
 1559 041e EF90      		pop r14
 1560 0420 DF90      		pop r13
 1561 0422 CF90      		pop r12
 1562               	.LVL151:
 1563               	.LBB50:
 241:../../tmk_core/common/action.c ****                     }
 1564               		.loc 1 241 0
 1565 0424 0C94 0000 		jmp layer_or
 1566               	.LVL152:
 1567               	.L81:
 1568               	.LBE50:
 249:../../tmk_core/common/action.c ****                 case 0xe0 ... 0xef:
 1569               		.loc 1 249 0
 1570 0428 103F      		cpi r17,lo8(-16)
 1571 042a 01F0      		breq .L124
 1572 042c 00F4      		brsh .L125
 1573 042e 103E      		cpi r17,lo8(-32)
 1574 0430 00F4      		brsh .L165
 1575 0432 00C0      		rjmp .L123
 1576               	.L125:
 1577 0434 123F      		cpi r17,lo8(-14)
 1578 0436 01F4      		brne .+2
 1579 0438 00C0      		rjmp .L127
 1580 043a 00F0      		brlo .L128
 1581 043c 133F      		cpi r17,lo8(-13)
 1582 043e 01F4      		brne .+2
 1583 0440 00C0      		rjmp .L129
 1584 0442 00C0      		rjmp .L123
 1585               	.L165:
 1586 0444 1F70      		andi r17,lo8(15)
 1587               	.LVL153:
 1588 0446 802F      		mov r24,r16
 1589 0448 8F71      		andi r24,lo8(31)
 252:../../tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1590               		.loc 1 252 0
 1591 044a FF20      		tst r15
 1592 044c 01F0      		breq .L130
 253:../../tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 1593               		.loc 1 253 0
 1594 044e 0E94 0000 		call layer_on
 1595               	.LVL154:
 254:../../tmk_core/common/action.c ****                     } else {
 1596               		.loc 1 254 0
 1597 0452 812F      		mov r24,r17
 1598 0454 00C0      		rjmp .L166
 1599               	.L130:
 256:../../tmk_core/common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 1600               		.loc 1 256 0
 1601 0456 0E94 0000 		call layer_off
 1602               	.LVL155:
 257:../../tmk_core/common/action.c ****                     }
 1603               		.loc 1 257 0
 1604 045a 812F      		mov r24,r17
 1605               	.LVL156:
 1606               	.L172:
 1607               	/* epilogue start */
 347:../../tmk_core/common/action.c **** 
 1608               		.loc 1 347 0
 1609 045c 2696      		adiw r28,6
 1610 045e 0FB6      		in __tmp_reg__,__SREG__
 1611 0460 F894      		cli
 1612 0462 DEBF      		out __SP_H__,r29
 1613 0464 0FBE      		out __SREG__,__tmp_reg__
 1614 0466 CDBF      		out __SP_L__,r28
 1615 0468 DF91      		pop r29
 1616 046a CF91      		pop r28
 1617 046c 1F91      		pop r17
 1618               	.LVL157:
 1619 046e 0F91      		pop r16
 1620 0470 FF90      		pop r15
 1621               	.LVL158:
 1622 0472 EF90      		pop r14
 1623 0474 DF90      		pop r13
 1624 0476 CF90      		pop r12
 1625               	.LVL159:
 257:../../tmk_core/common/action.c ****                     }
 1626               		.loc 1 257 0
 1627 0478 0C94 0000 		jmp unregister_mods
 1628               	.LVL160:
 1629               	.L124:
 262:../../tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 1630               		.loc 1 262 0
 1631 047c FF20      		tst r15
 1632 047e 01F0      		breq .L131
 263:../../tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1633               		.loc 1 263 0
 1634 0480 2530      		cpi r18,lo8(5)
 1635 0482 00F0      		brlo .+2
 1636 0484 00C0      		rjmp .L71
 1637               	.L132:
 264:../../tmk_core/common/action.c ****                         }
 1638               		.loc 1 264 0
 1639 0486 802F      		mov r24,r16
 1640 0488 8F71      		andi r24,lo8(31)
 1641               	/* epilogue start */
 347:../../tmk_core/common/action.c **** 
 1642               		.loc 1 347 0
 1643 048a 2696      		adiw r28,6
 1644 048c 0FB6      		in __tmp_reg__,__SREG__
 1645 048e F894      		cli
 1646 0490 DEBF      		out __SP_H__,r29
 1647 0492 0FBE      		out __SREG__,__tmp_reg__
 1648 0494 CDBF      		out __SP_L__,r28
 1649 0496 DF91      		pop r29
 1650 0498 CF91      		pop r28
 1651 049a 1F91      		pop r17
 1652               	.LVL161:
 1653 049c 0F91      		pop r16
 1654 049e FF90      		pop r15
 1655               	.LVL162:
 1656 04a0 EF90      		pop r14
 1657 04a2 DF90      		pop r13
 1658 04a4 CF90      		pop r12
 1659               	.LVL163:
 264:../../tmk_core/common/action.c ****                         }
 1660               		.loc 1 264 0
 1661 04a6 0C94 0000 		jmp layer_invert
 1662               	.LVL164:
 1663               	.L131:
 267:../../tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1664               		.loc 1 267 0
 1665 04aa 2630      		cpi r18,lo8(6)
 1666 04ac 00F0      		brlo .+2
 1667 04ae 00C0      		rjmp .L71
 1668 04b0 00C0      		rjmp .L132
 1669               	.L128:
 273:../../tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 1670               		.loc 1 273 0
 1671 04b2 FF20      		tst r15
 1672 04b4 01F0      		breq .L133
 1673               	.L134:
 273:../../tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 1674               		.loc 1 273 0 is_stmt 0 discriminator 1
 1675 04b6 802F      		mov r24,r16
 1676 04b8 8F71      		andi r24,lo8(31)
 1677               	/* epilogue start */
 347:../../tmk_core/common/action.c **** 
 1678               		.loc 1 347 0 is_stmt 1 discriminator 1
 1679 04ba 2696      		adiw r28,6
 1680 04bc 0FB6      		in __tmp_reg__,__SREG__
 1681 04be F894      		cli
 1682 04c0 DEBF      		out __SP_H__,r29
 1683 04c2 0FBE      		out __SREG__,__tmp_reg__
 1684 04c4 CDBF      		out __SP_L__,r28
 1685 04c6 DF91      		pop r29
 1686 04c8 CF91      		pop r28
 1687 04ca 1F91      		pop r17
 1688               	.LVL165:
 1689 04cc 0F91      		pop r16
 1690 04ce FF90      		pop r15
 1691               	.LVL166:
 1692 04d0 EF90      		pop r14
 1693 04d2 DF90      		pop r13
 1694 04d4 CF90      		pop r12
 1695               	.LVL167:
 273:../../tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 1696               		.loc 1 273 0 discriminator 1
 1697 04d6 0C94 0000 		jmp layer_on
 1698               	.LVL168:
 1699               	.L127:
 277:../../tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 1700               		.loc 1 277 0
 1701 04da FF20      		tst r15
 1702 04dc 01F0      		breq .L134
 1703               	.L133:
 274:../../tmk_core/common/action.c ****                     break;
 1704               		.loc 1 274 0
 1705 04de 802F      		mov r24,r16
 1706 04e0 8F71      		andi r24,lo8(31)
 1707               	/* epilogue start */
 347:../../tmk_core/common/action.c **** 
 1708               		.loc 1 347 0
 1709 04e2 2696      		adiw r28,6
 1710 04e4 0FB6      		in __tmp_reg__,__SREG__
 1711 04e6 F894      		cli
 1712 04e8 DEBF      		out __SP_H__,r29
 1713 04ea 0FBE      		out __SREG__,__tmp_reg__
 1714 04ec CDBF      		out __SP_L__,r28
 1715 04ee DF91      		pop r29
 1716 04f0 CF91      		pop r28
 1717 04f2 1F91      		pop r17
 1718               	.LVL169:
 1719 04f4 0F91      		pop r16
 1720 04f6 FF90      		pop r15
 1721               	.LVL170:
 1722 04f8 EF90      		pop r14
 1723 04fa DF90      		pop r13
 1724 04fc CF90      		pop r12
 1725               	.LVL171:
 274:../../tmk_core/common/action.c ****                     break;
 1726               		.loc 1 274 0
 1727 04fe 0C94 0000 		jmp layer_off
 1728               	.LVL172:
 1729               	.L129:
 281:../../tmk_core/common/action.c ****                                     layer_clear();
 1730               		.loc 1 281 0
 1731 0502 FF20      		tst r15
 1732 0504 01F0      		breq .L135
 281:../../tmk_core/common/action.c ****                                     layer_clear();
 1733               		.loc 1 281 0 is_stmt 0 discriminator 1
 1734 0506 802F      		mov r24,r16
 1735 0508 8F71      		andi r24,lo8(31)
 1736               	/* epilogue start */
 347:../../tmk_core/common/action.c **** 
 1737               		.loc 1 347 0 is_stmt 1 discriminator 1
 1738 050a 2696      		adiw r28,6
 1739 050c 0FB6      		in __tmp_reg__,__SREG__
 1740 050e F894      		cli
 1741 0510 DEBF      		out __SP_H__,r29
 1742 0512 0FBE      		out __SREG__,__tmp_reg__
 1743 0514 CDBF      		out __SP_L__,r28
 1744 0516 DF91      		pop r29
 1745 0518 CF91      		pop r28
 1746 051a 1F91      		pop r17
 1747               	.LVL173:
 1748 051c 0F91      		pop r16
 1749 051e FF90      		pop r15
 1750               	.LVL174:
 1751 0520 EF90      		pop r14
 1752 0522 DF90      		pop r13
 1753 0524 CF90      		pop r12
 1754               	.LVL175:
 281:../../tmk_core/common/action.c ****                                     layer_clear();
 1755               		.loc 1 281 0 discriminator 1
 1756 0526 0C94 0000 		jmp layer_move
 1757               	.LVL176:
 1758               	.L135:
 1759               	/* epilogue start */
 347:../../tmk_core/common/action.c **** 
 1760               		.loc 1 347 0
 1761 052a 2696      		adiw r28,6
 1762 052c 0FB6      		in __tmp_reg__,__SREG__
 1763 052e F894      		cli
 1764 0530 DEBF      		out __SP_H__,r29
 1765 0532 0FBE      		out __SREG__,__tmp_reg__
 1766 0534 CDBF      		out __SP_L__,r28
 1767 0536 DF91      		pop r29
 1768 0538 CF91      		pop r28
 1769 053a 1F91      		pop r17
 1770               	.LVL177:
 1771 053c 0F91      		pop r16
 1772 053e FF90      		pop r15
 1773               	.LVL178:
 1774 0540 EF90      		pop r14
 1775 0542 DF90      		pop r13
 1776 0544 CF90      		pop r12
 1777               	.LVL179:
 282:../../tmk_core/common/action.c ****                     break;
 1778               		.loc 1 282 0
 1779 0546 0C94 0000 		jmp layer_clear
 1780               	.LVL180:
 1781               	.L123:
 286:../../tmk_core/common/action.c ****                         if (tap_count > 0) {
 1782               		.loc 1 286 0
 1783 054a FF20      		tst r15
 1784 054c 01F0      		breq .L136
 287:../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 1785               		.loc 1 287 0
 1786 054e 2223      		tst r18
 1787 0550 01F4      		brne .+2
 1788 0552 00C0      		rjmp .L134
 1789               	.L170:
 289:../../tmk_core/common/action.c ****                         } else {
 1790               		.loc 1 289 0
 1791 0554 812F      		mov r24,r17
 1792               	/* epilogue start */
 347:../../tmk_core/common/action.c **** 
 1793               		.loc 1 347 0
 1794 0556 2696      		adiw r28,6
 1795 0558 0FB6      		in __tmp_reg__,__SREG__
 1796 055a F894      		cli
 1797 055c DEBF      		out __SP_H__,r29
 1798 055e 0FBE      		out __SREG__,__tmp_reg__
 1799 0560 CDBF      		out __SP_L__,r28
 1800 0562 DF91      		pop r29
 1801 0564 CF91      		pop r28
 1802 0566 1F91      		pop r17
 1803               	.LVL181:
 1804 0568 0F91      		pop r16
 1805 056a FF90      		pop r15
 1806               	.LVL182:
 1807 056c EF90      		pop r14
 1808 056e DF90      		pop r13
 1809 0570 CF90      		pop r12
 1810               	.LVL183:
 289:../../tmk_core/common/action.c ****                         } else {
 1811               		.loc 1 289 0
 1812 0572 0C94 0000 		jmp register_code
 1813               	.LVL184:
 1814               	.L136:
 295:../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 1815               		.loc 1 295 0
 1816 0576 2223      		tst r18
 1817 0578 01F4      		brne .+2
 1818 057a 00C0      		rjmp .L133
 1819               	.L171:
 297:../../tmk_core/common/action.c ****                         } else {
 1820               		.loc 1 297 0
 1821 057c 812F      		mov r24,r17
 1822               	/* epilogue start */
 347:../../tmk_core/common/action.c **** 
 1823               		.loc 1 347 0
 1824 057e 2696      		adiw r28,6
 1825 0580 0FB6      		in __tmp_reg__,__SREG__
 1826 0582 F894      		cli
 1827 0584 DEBF      		out __SP_H__,r29
 1828 0586 0FBE      		out __SREG__,__tmp_reg__
 1829 0588 CDBF      		out __SP_L__,r28
 1830 058a DF91      		pop r29
 1831 058c CF91      		pop r28
 1832 058e 1F91      		pop r17
 1833               	.LVL185:
 1834 0590 0F91      		pop r16
 1835 0592 FF90      		pop r15
 1836               	.LVL186:
 1837 0594 EF90      		pop r14
 1838 0596 DF90      		pop r13
 1839 0598 CF90      		pop r12
 1840               	.LVL187:
 297:../../tmk_core/common/action.c ****                         } else {
 1841               		.loc 1 297 0
 1842 059a 0C94 0000 		jmp unregister_code
 1843               	.LVL188:
 1844               	.L82:
 311:../../tmk_core/common/action.c ****             break;
 1845               		.loc 1 311 0
 1846 059e 402F      		mov r20,r16
 1847 05a0 4F70      		andi r20,lo8(15)
 1848               	.LVL189:
 1849 05a2 612F      		mov r22,r17
 1850 05a4 C601      		movw r24,r12
 1851 05a6 0E94 0000 		call action_get_macro
 1852               	.LVL190:
 1853               	/* epilogue start */
 347:../../tmk_core/common/action.c **** 
 1854               		.loc 1 347 0
 1855 05aa 2696      		adiw r28,6
 1856 05ac 0FB6      		in __tmp_reg__,__SREG__
 1857 05ae F894      		cli
 1858 05b0 DEBF      		out __SP_H__,r29
 1859 05b2 0FBE      		out __SREG__,__tmp_reg__
 1860 05b4 CDBF      		out __SP_L__,r28
 1861 05b6 DF91      		pop r29
 1862 05b8 CF91      		pop r28
 1863 05ba 1F91      		pop r17
 1864               	.LVL191:
 1865 05bc 0F91      		pop r16
 1866 05be FF90      		pop r15
 1867               	.LVL192:
 1868 05c0 EF90      		pop r14
 1869 05c2 DF90      		pop r13
 1870 05c4 CF90      		pop r12
 1871               	.LVL193:
 311:../../tmk_core/common/action.c ****             break;
 1872               		.loc 1 311 0
 1873 05c6 0C94 0000 		jmp action_macro_play
 1874               	.LVL194:
 1875               	.L83:
 341:../../tmk_core/common/action.c ****             break;
 1876               		.loc 1 341 0
 1877 05ca 402F      		mov r20,r16
 1878 05cc 4F70      		andi r20,lo8(15)
 1879               	.LVL195:
 1880 05ce 612F      		mov r22,r17
 1881 05d0 C601      		movw r24,r12
 1882               	/* epilogue start */
 347:../../tmk_core/common/action.c **** 
 1883               		.loc 1 347 0
 1884 05d2 2696      		adiw r28,6
 1885 05d4 0FB6      		in __tmp_reg__,__SREG__
 1886 05d6 F894      		cli
 1887 05d8 DEBF      		out __SP_H__,r29
 1888 05da 0FBE      		out __SREG__,__tmp_reg__
 1889 05dc CDBF      		out __SP_L__,r28
 1890 05de DF91      		pop r29
 1891 05e0 CF91      		pop r28
 1892 05e2 1F91      		pop r17
 1893               	.LVL196:
 1894 05e4 0F91      		pop r16
 1895 05e6 FF90      		pop r15
 1896               	.LVL197:
 1897 05e8 EF90      		pop r14
 1898 05ea DF90      		pop r13
 1899 05ec CF90      		pop r12
 1900               	.LVL198:
 341:../../tmk_core/common/action.c ****             break;
 1901               		.loc 1 341 0
 1902 05ee 0C94 0000 		jmp action_function
 1903               	.LVL199:
 1904               	.L71:
 1905               	/* epilogue start */
 347:../../tmk_core/common/action.c **** 
 1906               		.loc 1 347 0
 1907 05f2 2696      		adiw r28,6
 1908 05f4 0FB6      		in __tmp_reg__,__SREG__
 1909 05f6 F894      		cli
 1910 05f8 DEBF      		out __SP_H__,r29
 1911 05fa 0FBE      		out __SREG__,__tmp_reg__
 1912 05fc CDBF      		out __SP_L__,r28
 1913 05fe DF91      		pop r29
 1914 0600 CF91      		pop r28
 1915 0602 1F91      		pop r17
 1916               	.LVL200:
 1917 0604 0F91      		pop r16
 1918 0606 FF90      		pop r15
 1919               	.LVL201:
 1920 0608 EF90      		pop r14
 1921 060a DF90      		pop r13
 1922 060c CF90      		pop r12
 1923 060e 0895      		ret
 1924               		.cfi_endproc
 1925               	.LFE104:
 1927               		.section	.text.clear_keyboard_but_mods,"ax",@progbits
 1928               	.global	clear_keyboard_but_mods
 1930               	clear_keyboard_but_mods:
 1931               	.LFB110:
 504:../../tmk_core/common/action.c ****     }
 505:../../tmk_core/common/action.c **** }
 506:../../tmk_core/common/action.c **** 
 507:../../tmk_core/common/action.c **** void clear_keyboard(void)
 508:../../tmk_core/common/action.c **** {
 509:../../tmk_core/common/action.c ****     clear_mods();
 510:../../tmk_core/common/action.c ****     clear_keyboard_but_mods();
 511:../../tmk_core/common/action.c **** }
 512:../../tmk_core/common/action.c **** 
 513:../../tmk_core/common/action.c **** void clear_keyboard_but_mods(void)
 514:../../tmk_core/common/action.c **** {
 1932               		.loc 1 514 0
 1933               		.cfi_startproc
 1934               	/* prologue: function */
 1935               	/* frame size = 0 */
 1936               	/* stack size = 0 */
 1937               	.L__stack_usage = 0
 515:../../tmk_core/common/action.c ****     clear_weak_mods();
 1938               		.loc 1 515 0
 1939 0000 0E94 0000 		call clear_weak_mods
 1940               	.LVL202:
 516:../../tmk_core/common/action.c ****     clear_keys();
 1941               		.loc 1 516 0
 1942 0004 0E94 0000 		call clear_keys
 1943               	.LVL203:
 517:../../tmk_core/common/action.c ****     send_keyboard_report();
 1944               		.loc 1 517 0
 1945 0008 0E94 0000 		call send_keyboard_report
 1946               	.LVL204:
 518:../../tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 519:../../tmk_core/common/action.c ****     mousekey_clear();
 1947               		.loc 1 519 0
 1948 000c 0E94 0000 		call mousekey_clear
 1949               	.LVL205:
 520:../../tmk_core/common/action.c ****     mousekey_send();
 1950               		.loc 1 520 0
 1951 0010 0E94 0000 		call mousekey_send
 1952               	.LVL206:
 521:../../tmk_core/common/action.c **** #endif
 522:../../tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 523:../../tmk_core/common/action.c ****     host_system_send(0);
 1953               		.loc 1 523 0
 1954 0014 80E0      		ldi r24,0
 1955 0016 90E0      		ldi r25,0
 1956 0018 0E94 0000 		call host_system_send
 1957               	.LVL207:
 524:../../tmk_core/common/action.c ****     host_consumer_send(0);
 1958               		.loc 1 524 0
 1959 001c 80E0      		ldi r24,0
 1960 001e 90E0      		ldi r25,0
 1961 0020 0C94 0000 		jmp host_consumer_send
 1962               	.LVL208:
 1963               		.cfi_endproc
 1964               	.LFE110:
 1966               		.section	.text.clear_keyboard,"ax",@progbits
 1967               	.global	clear_keyboard
 1969               	clear_keyboard:
 1970               	.LFB109:
 508:../../tmk_core/common/action.c ****     clear_mods();
 1971               		.loc 1 508 0
 1972               		.cfi_startproc
 1973               	/* prologue: function */
 1974               	/* frame size = 0 */
 1975               	/* stack size = 0 */
 1976               	.L__stack_usage = 0
 509:../../tmk_core/common/action.c ****     clear_keyboard_but_mods();
 1977               		.loc 1 509 0
 1978 0000 0E94 0000 		call clear_mods
 1979               	.LVL209:
 510:../../tmk_core/common/action.c **** }
 1980               		.loc 1 510 0
 1981 0004 0C94 0000 		jmp clear_keyboard_but_mods
 1982               	.LVL210:
 1983               		.cfi_endproc
 1984               	.LFE109:
 1986               		.section	.text.is_tap_key,"ax",@progbits
 1987               	.global	is_tap_key
 1989               	is_tap_key:
 1990               	.LFB111:
 525:../../tmk_core/common/action.c **** #endif
 526:../../tmk_core/common/action.c **** }
 527:../../tmk_core/common/action.c **** 
 528:../../tmk_core/common/action.c **** bool is_tap_key(keypos_t key)
 529:../../tmk_core/common/action.c **** {
 1991               		.loc 1 529 0
 1992               		.cfi_startproc
 1993               	.LVL211:
 1994               	/* prologue: function */
 1995               	/* frame size = 0 */
 1996               	/* stack size = 0 */
 1997               	.L__stack_usage = 0
 530:../../tmk_core/common/action.c ****     action_t action = layer_switch_get_action(key);
 1998               		.loc 1 530 0
 1999 0000 0E94 0000 		call layer_switch_get_action
 2000               	.LVL212:
 531:../../tmk_core/common/action.c **** 
 532:../../tmk_core/common/action.c ****     switch (action.kind.id) {
 2001               		.loc 1 532 0
 2002 0004 292F      		mov r18,r25
 2003 0006 2295      		swap r18
 2004 0008 2F70      		andi r18,lo8(15)
 2005 000a 30E0      		ldi r19,0
 2006 000c 2C30      		cpi r18,12
 2007 000e 3105      		cpc r19,__zero_reg__
 2008 0010 04F4      		brge .L184
 2009 0012 2A30      		cpi r18,10
 2010 0014 3105      		cpc r19,__zero_reg__
 2011 0016 04F4      		brge .L185
 2012 0018 2250      		subi r18,2
 2013 001a 3109      		sbc r19,__zero_reg__
 2014 001c 2230      		cpi r18,2
 2015 001e 3105      		cpc r19,__zero_reg__
 2016 0020 00F4      		brsh .L188
 2017 0022 00C0      		rjmp .L185
 2018               	.L184:
 2019 0024 2C30      		cpi r18,12
 2020 0026 3105      		cpc r19,__zero_reg__
 2021 0028 01F0      		breq .L186
 2022 002a 2F30      		cpi r18,15
 2023 002c 3105      		cpc r19,__zero_reg__
 2024 002e 01F0      		breq .L186
 2025 0030 00C0      		rjmp .L188
 2026               	.L185:
 2027               	.LVL213:
 533:../../tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 534:../../tmk_core/common/action.c ****         case ACT_RMODS_TAP:
 535:../../tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 536:../../tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 537:../../tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 2028               		.loc 1 537 0
 2029 0032 803E      		cpi r24,lo8(-32)
 2030 0034 00F0      		brlo .L189
 2031 0036 803F      		cpi r24,lo8(-16)
 2032 0038 01F4      		brne .L188
 2033 003a 00C0      		rjmp .L189
 2034               	.LVL214:
 2035               	.L186:
 538:../../tmk_core/common/action.c ****                 case 0x00 ... 0xdf:
 539:../../tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 540:../../tmk_core/common/action.c ****                     return true;
 541:../../tmk_core/common/action.c ****             }
 542:../../tmk_core/common/action.c ****             return false;
 543:../../tmk_core/common/action.c ****         case ACT_MACRO:
 544:../../tmk_core/common/action.c ****         case ACT_FUNCTION:
 545:../../tmk_core/common/action.c ****             if (action.func.opt & FUNC_TAP) { return true; }
 2036               		.loc 1 545 0
 2037 003c 93FB      		bst r25,3
 2038 003e 8827      		clr r24
 2039 0040 80F9      		bld r24,0
 2040 0042 0895      		ret
 2041               	.LVL215:
 2042               	.L188:
 546:../../tmk_core/common/action.c ****             return false;
 547:../../tmk_core/common/action.c ****     }
 548:../../tmk_core/common/action.c ****     return false;
 2043               		.loc 1 548 0
 2044 0044 80E0      		ldi r24,0
 2045               	.LVL216:
 2046 0046 0895      		ret
 2047               	.LVL217:
 2048               	.L189:
 540:../../tmk_core/common/action.c ****             }
 2049               		.loc 1 540 0
 2050 0048 81E0      		ldi r24,lo8(1)
 2051               	.LVL218:
 549:../../tmk_core/common/action.c **** }
 2052               		.loc 1 549 0
 2053 004a 0895      		ret
 2054               		.cfi_endproc
 2055               	.LFE111:
 2057               		.section	.text.debug_event,"ax",@progbits
 2058               	.global	debug_event
 2060               	debug_event:
 2061               	.LFB112:
 550:../../tmk_core/common/action.c **** 
 551:../../tmk_core/common/action.c **** 
 552:../../tmk_core/common/action.c **** /*
 553:../../tmk_core/common/action.c ****  * debug print
 554:../../tmk_core/common/action.c ****  */
 555:../../tmk_core/common/action.c **** void debug_event(keyevent_t event)
 556:../../tmk_core/common/action.c **** {
 2062               		.loc 1 556 0
 2063               		.cfi_startproc
 2064 0000 CF93      		push r28
 2065               	.LCFI15:
 2066               		.cfi_def_cfa_offset 3
 2067               		.cfi_offset 28, -2
 2068 0002 DF93      		push r29
 2069               	.LCFI16:
 2070               		.cfi_def_cfa_offset 4
 2071               		.cfi_offset 29, -3
 2072 0004 00D0      		rcall .
 2073 0006 00D0      		rcall .
 2074 0008 1F92      		push __zero_reg__
 2075               	.LCFI17:
 2076               		.cfi_def_cfa_offset 9
 2077 000a CDB7      		in r28,__SP_L__
 2078 000c DEB7      		in r29,__SP_H__
 2079               	.LCFI18:
 2080               		.cfi_def_cfa_register 28
 2081               	/* prologue: function */
 2082               	/* frame size = 5 */
 2083               	/* stack size = 7 */
 2084               	.L__stack_usage = 7
 2085               	/* epilogue start */
 557:../../tmk_core/common/action.c ****     dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.ti
 558:../../tmk_core/common/action.c **** }
 2086               		.loc 1 558 0
 2087 000e 0F90      		pop __tmp_reg__
 2088 0010 0F90      		pop __tmp_reg__
 2089 0012 0F90      		pop __tmp_reg__
 2090 0014 0F90      		pop __tmp_reg__
 2091 0016 0F90      		pop __tmp_reg__
 2092 0018 DF91      		pop r29
 2093 001a CF91      		pop r28
 2094 001c 0895      		ret
 2095               		.cfi_endproc
 2096               	.LFE112:
 2098               		.section	.text.debug_record,"ax",@progbits
 2099               	.global	debug_record
 2101               	debug_record:
 2102               	.LFB113:
 559:../../tmk_core/common/action.c **** 
 560:../../tmk_core/common/action.c **** void debug_record(keyrecord_t record)
 561:../../tmk_core/common/action.c **** {
 2103               		.loc 1 561 0
 2104               		.cfi_startproc
 2105 0000 CF93      		push r28
 2106               	.LCFI19:
 2107               		.cfi_def_cfa_offset 3
 2108               		.cfi_offset 28, -2
 2109 0002 DF93      		push r29
 2110               	.LCFI20:
 2111               		.cfi_def_cfa_offset 4
 2112               		.cfi_offset 29, -3
 2113 0004 00D0      		rcall .
 2114 0006 00D0      		rcall .
 2115 0008 00D0      		rcall .
 2116               	.LCFI21:
 2117               		.cfi_def_cfa_offset 10
 2118 000a CDB7      		in r28,__SP_L__
 2119 000c DEB7      		in r29,__SP_H__
 2120               	.LCFI22:
 2121               		.cfi_def_cfa_register 28
 2122               	/* prologue: function */
 2123               	/* frame size = 6 */
 2124               	/* stack size = 8 */
 2125               	.L__stack_usage = 8
 2126               	/* epilogue start */
 562:../../tmk_core/common/action.c ****     debug_event(record.event);
 563:../../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 564:../../tmk_core/common/action.c ****     dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
 565:../../tmk_core/common/action.c **** #endif
 566:../../tmk_core/common/action.c **** }
 2127               		.loc 1 566 0
 2128 000e 2696      		adiw r28,6
 2129 0010 0FB6      		in __tmp_reg__,__SREG__
 2130 0012 F894      		cli
 2131 0014 DEBF      		out __SP_H__,r29
 2132 0016 0FBE      		out __SREG__,__tmp_reg__
 2133 0018 CDBF      		out __SP_L__,r28
 2134 001a DF91      		pop r29
 2135 001c CF91      		pop r28
 2136 001e 0895      		ret
 2137               		.cfi_endproc
 2138               	.LFE113:
 2140               		.section	.text.debug_action,"ax",@progbits
 2141               	.global	debug_action
 2143               	debug_action:
 2144               	.LFB114:
 567:../../tmk_core/common/action.c **** 
 568:../../tmk_core/common/action.c **** void debug_action(action_t action)
 569:../../tmk_core/common/action.c **** {
 2145               		.loc 1 569 0
 2146               		.cfi_startproc
 2147               	.LVL219:
 2148               	/* prologue: function */
 2149               	/* frame size = 0 */
 2150               	/* stack size = 0 */
 2151               	.L__stack_usage = 0
 2152 0000 0895      		ret
 2153               		.cfi_endproc
 2154               	.LFE114:
 2156               		.text
 2157               	.Letext0:
 2158               		.file 4 "/usr/lib/avr/include/stdint.h"
 2159               		.file 5 "../../tmk_core/common/keycode.h"
 2160               		.file 6 "../../tmk_core/common/action_code.h"
 2161               		.file 7 "../../tmk_core/common/action_macro.h"
 2162               		.file 8 "../../tmk_core/common/action.h"
 2163               		.file 9 "../../tmk_core/common/action_tapping.h"
 2164               		.file 10 "../../tmk_core/common/hook.h"
 2165               		.file 11 "../../tmk_core/common/action_util.h"
 2166               		.file 12 "../../tmk_core/common/host.h"
 2167               		.file 13 "../../tmk_core/common/action_layer.h"
 2168               		.file 14 "../../tmk_core/common/command.h"
 2169               		.file 15 "../../tmk_core/common/mousekey.h"
 2170               		.file 16 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action.c
     /tmp/ccMk3Sik.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccMk3Sik.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccMk3Sik.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccMk3Sik.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccMk3Sik.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccMk3Sik.s:13     .text.action_exec:0000000000000000 action_exec
     /tmp/ccMk3Sik.s:122    .text.register_code:0000000000000000 register_code
     /tmp/ccMk3Sik.s:497    .text.unregister_code:0000000000000000 unregister_code
     /tmp/ccMk3Sik.s:675    .text.register_mods:0000000000000000 register_mods
     /tmp/ccMk3Sik.s:701    .text.unregister_mods:0000000000000000 unregister_mods
     /tmp/ccMk3Sik.s:727    .text.process_action:0000000000000000 process_action
     /tmp/ccMk3Sik.s:1930   .text.clear_keyboard_but_mods:0000000000000000 clear_keyboard_but_mods
     /tmp/ccMk3Sik.s:1969   .text.clear_keyboard:0000000000000000 clear_keyboard
     /tmp/ccMk3Sik.s:1989   .text.is_tap_key:0000000000000000 is_tap_key
     /tmp/ccMk3Sik.s:2060   .text.debug_event:0000000000000000 debug_event
     /tmp/ccMk3Sik.s:2101   .text.debug_record:0000000000000000 debug_record
     /tmp/ccMk3Sik.s:2143   .text.debug_action:0000000000000000 debug_action

UNDEFINED SYMBOLS
action_tapping_process
hook_matrix_change
host_keyboard_leds
add_key
send_keyboard_report
del_key
command_proc
add_mods
host_system_send
host_consumer_send
del_mods
layer_switch_get_action
layer_debug
default_layer_debug
__tablejump2__
add_weak_mods
del_weak_mods
set_oneshot_mods
clear_oneshot_mods
get_mods
mousekey_on
mousekey_off
mousekey_send
default_layer_and
default_layer_xor
default_layer_or
layer_and
layer_xor
layer_or
layer_on
layer_off
layer_invert
layer_move
layer_clear
action_get_macro
action_macro_play
action_function
clear_weak_mods
clear_keys
mousekey_clear
clear_mods
