   1               		.file	"bootmagic.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.scan_key,"ax",@progbits
  12               	scan_key:
  13               	.LFB104:
  14               		.file 1 "../../tmk_core/common/bootmagic.c"
   1:../../tmk_core/common/bootmagic.c **** #include <stdint.h>
   2:../../tmk_core/common/bootmagic.c **** #include <stdbool.h>
   3:../../tmk_core/common/bootmagic.c **** #include "wait.h"
   4:../../tmk_core/common/bootmagic.c **** #include "matrix.h"
   5:../../tmk_core/common/bootmagic.c **** #include "bootloader.h"
   6:../../tmk_core/common/bootmagic.c **** #include "debug.h"
   7:../../tmk_core/common/bootmagic.c **** #include "keymap.h"
   8:../../tmk_core/common/bootmagic.c **** #include "actionmap.h"
   9:../../tmk_core/common/bootmagic.c **** #include "host.h"
  10:../../tmk_core/common/bootmagic.c **** #include "action_layer.h"
  11:../../tmk_core/common/bootmagic.c **** #include "eeconfig.h"
  12:../../tmk_core/common/bootmagic.c **** #include "bootmagic.h"
  13:../../tmk_core/common/bootmagic.c **** #include "hook.h"
  14:../../tmk_core/common/bootmagic.c **** 
  15:../../tmk_core/common/bootmagic.c **** keymap_config_t keymap_config;
  16:../../tmk_core/common/bootmagic.c **** 
  17:../../tmk_core/common/bootmagic.c **** void bootmagic(void)
  18:../../tmk_core/common/bootmagic.c **** {
  19:../../tmk_core/common/bootmagic.c ****     /* check signature */
  20:../../tmk_core/common/bootmagic.c ****     if (!eeconfig_is_enabled()) {
  21:../../tmk_core/common/bootmagic.c ****         eeconfig_init();
  22:../../tmk_core/common/bootmagic.c ****     }
  23:../../tmk_core/common/bootmagic.c **** 
  24:../../tmk_core/common/bootmagic.c ****     /* do scans in case of bounce */
  25:../../tmk_core/common/bootmagic.c ****     print("bootmagic scan: ... ");
  26:../../tmk_core/common/bootmagic.c ****     uint8_t scan = 100;
  27:../../tmk_core/common/bootmagic.c ****     while (scan--) { matrix_scan(); wait_ms(10); }
  28:../../tmk_core/common/bootmagic.c ****     print("done.\n");
  29:../../tmk_core/common/bootmagic.c **** 
  30:../../tmk_core/common/bootmagic.c ****     /* bootmagic skip */
  31:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SKIP)) {
  32:../../tmk_core/common/bootmagic.c ****         return;
  33:../../tmk_core/common/bootmagic.c ****     }
  34:../../tmk_core/common/bootmagic.c **** 
  35:../../tmk_core/common/bootmagic.c ****     /* eeconfig clear */
  36:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
  37:../../tmk_core/common/bootmagic.c ****         eeconfig_init();
  38:../../tmk_core/common/bootmagic.c ****     }
  39:../../tmk_core/common/bootmagic.c **** 
  40:../../tmk_core/common/bootmagic.c ****     /* bootloader */
  41:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_BOOTLOADER)) {
  42:../../tmk_core/common/bootmagic.c ****         bootloader_jump();
  43:../../tmk_core/common/bootmagic.c ****     }
  44:../../tmk_core/common/bootmagic.c **** 
  45:../../tmk_core/common/bootmagic.c ****     /* user-defined checks */
  46:../../tmk_core/common/bootmagic.c ****     hook_bootmagic();
  47:../../tmk_core/common/bootmagic.c **** 
  48:../../tmk_core/common/bootmagic.c ****     /* debug enable */
  49:../../tmk_core/common/bootmagic.c ****     debug_config.raw = eeconfig_read_debug();
  50:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
  51:../../tmk_core/common/bootmagic.c ****         if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
  52:../../tmk_core/common/bootmagic.c ****             debug_config.matrix = !debug_config.matrix;
  53:../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
  54:../../tmk_core/common/bootmagic.c ****             debug_config.keyboard = !debug_config.keyboard;
  55:../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
  56:../../tmk_core/common/bootmagic.c ****             debug_config.mouse = !debug_config.mouse;
  57:../../tmk_core/common/bootmagic.c ****         } else {
  58:../../tmk_core/common/bootmagic.c ****             debug_config.enable = !debug_config.enable;
  59:../../tmk_core/common/bootmagic.c ****         }
  60:../../tmk_core/common/bootmagic.c ****     }
  61:../../tmk_core/common/bootmagic.c ****     eeconfig_write_debug(debug_config.raw);
  62:../../tmk_core/common/bootmagic.c **** 
  63:../../tmk_core/common/bootmagic.c ****     /* keymap config */
  64:../../tmk_core/common/bootmagic.c ****     keymap_config.raw = eeconfig_read_keymap();
  65:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
  66:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
  67:../../tmk_core/common/bootmagic.c ****     }
  68:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
  69:../../tmk_core/common/bootmagic.c ****         keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
  70:../../tmk_core/common/bootmagic.c ****     }
  71:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
  72:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
  73:../../tmk_core/common/bootmagic.c ****     }
  74:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
  75:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
  76:../../tmk_core/common/bootmagic.c ****     }
  77:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_NO_GUI)) {
  78:../../tmk_core/common/bootmagic.c ****         keymap_config.no_gui = !keymap_config.no_gui;
  79:../../tmk_core/common/bootmagic.c ****     }
  80:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
  81:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
  82:../../tmk_core/common/bootmagic.c ****     }
  83:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
  84:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
  85:../../tmk_core/common/bootmagic.c ****     }
  86:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_HOST_NKRO)) {
  87:../../tmk_core/common/bootmagic.c ****         keymap_config.nkro = !keymap_config.nkro;
  88:../../tmk_core/common/bootmagic.c ****     }
  89:../../tmk_core/common/bootmagic.c ****     eeconfig_write_keymap(keymap_config.raw);
  90:../../tmk_core/common/bootmagic.c **** 
  91:../../tmk_core/common/bootmagic.c **** #ifdef NKRO_ENABLE
  92:../../tmk_core/common/bootmagic.c ****     keyboard_nkro = keymap_config.nkro;
  93:../../tmk_core/common/bootmagic.c **** #endif
  94:../../tmk_core/common/bootmagic.c **** 
  95:../../tmk_core/common/bootmagic.c ****     /* default layer */
  96:../../tmk_core/common/bootmagic.c ****     uint8_t default_layer = 0;
  97:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
  98:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
  99:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
 100:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
 101:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
 102:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
 103:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
 104:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
 105:../../tmk_core/common/bootmagic.c ****     if (default_layer) {
 106:../../tmk_core/common/bootmagic.c ****         eeconfig_write_default_layer(default_layer);
 107:../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 108:../../tmk_core/common/bootmagic.c ****     } else {
 109:../../tmk_core/common/bootmagic.c ****         default_layer = eeconfig_read_default_layer();
 110:../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 111:../../tmk_core/common/bootmagic.c ****     }
 112:../../tmk_core/common/bootmagic.c **** }
 113:../../tmk_core/common/bootmagic.c **** 
 114:../../tmk_core/common/bootmagic.c **** static bool scan_key(uint16_t code)
 115:../../tmk_core/common/bootmagic.c **** {
  15               		.loc 1 115 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 CF92      		push r12
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 12, -2
  22 0002 DF92      		push r13
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 13, -3
  26 0004 EF92      		push r14
  27               	.LCFI2:
  28               		.cfi_def_cfa_offset 5
  29               		.cfi_offset 14, -4
  30 0006 FF92      		push r15
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 6
  33               		.cfi_offset 15, -5
  34 0008 0F93      		push r16
  35               	.LCFI4:
  36               		.cfi_def_cfa_offset 7
  37               		.cfi_offset 16, -6
  38 000a 1F93      		push r17
  39               	.LCFI5:
  40               		.cfi_def_cfa_offset 8
  41               		.cfi_offset 17, -7
  42 000c CF93      		push r28
  43               	.LCFI6:
  44               		.cfi_def_cfa_offset 9
  45               		.cfi_offset 28, -8
  46               	/* prologue: function */
  47               	/* frame size = 0 */
  48               	/* stack size = 7 */
  49               	.L__stack_usage = 7
  50 000e 6C01      		movw r12,r24
  51               	.LVL1:
  52               	.LBB6:
 116:../../tmk_core/common/bootmagic.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
  53               		.loc 1 116 0
  54 0010 C0E0      		ldi r28,0
  55               	.LVL2:
  56               	.L8:
  57               	.LBB7:
 117:../../tmk_core/common/bootmagic.c ****         matrix_row_t matrix_row = matrix_get_row(r);
  58               		.loc 1 117 0
  59 0012 8C2F      		mov r24,r28
  60 0014 0E94 0000 		call matrix_get_row
  61               	.LVL3:
  62 0018 00E0      		ldi r16,0
  63 001a 10E0      		ldi r17,0
  64               	.LBB8:
 118:../../tmk_core/common/bootmagic.c ****         for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 119:../../tmk_core/common/bootmagic.c ****             if (matrix_row & ((matrix_row_t)1<<c)) {
  65               		.loc 1 119 0
  66 001c E82E      		mov r14,r24
  67 001e F12C      		mov r15,__zero_reg__
  68               	.LVL4:
  69               	.L7:
  70 0020 C701      		movw r24,r14
  71 0022 002E      		mov r0,r16
  72 0024 00C0      		rjmp 2f
  73               		1:
  74 0026 9595      		asr r25
  75 0028 8795      		ror r24
  76               		2:
  77 002a 0A94      		dec r0
  78 002c 02F4      		brpl 1b
  79 002e 80FF      		sbrs r24,0
  80 0030 00C0      		rjmp .L2
  81               	.LBB9:
 120:../../tmk_core/common/bootmagic.c ****                 // read key from Layer 0
 121:../../tmk_core/common/bootmagic.c ****                 action_t action = action_for_key(0, (keypos_t){ .row = r, .col = c });
  82               		.loc 1 121 0
  83 0032 602F      		mov r22,r16
  84 0034 7C2F      		mov r23,r28
  85 0036 80E0      		ldi r24,0
  86 0038 0E94 0000 		call action_for_key
  87               	.LVL5:
  88 003c 9C01      		movw r18,r24
  89               	.LVL6:
 122:../../tmk_core/common/bootmagic.c ****                 if (action.code == code ||
  90               		.loc 1 122 0
  91 003e 8C15      		cp r24,r12
  92 0040 9D05      		cpc r25,r13
  93 0042 01F0      		breq .L3
  94               		.loc 1 122 0 is_stmt 0 discriminator 1
  95 0044 832F      		mov r24,r19
  96               	.LVL7:
  97 0046 807E      		andi r24,lo8(-32)
  98 0048 932F      		mov r25,r19
  99 004a 907C      		andi r25,lo8(-64)
 100 004c 01F0      		breq .L4
 123:../../tmk_core/common/bootmagic.c ****                     ((action.kind.id == ACT_LMODS ||
 124:../../tmk_core/common/bootmagic.c ****                       action.kind.id == ACT_RMODS ||
 125:../../tmk_core/common/bootmagic.c ****                       action.kind.id == ACT_LMODS_TAP ||
 126:../../tmk_core/common/bootmagic.c ****                       action.kind.id == ACT_RMODS_TAP ||
 101               		.loc 1 126 0 is_stmt 1
 102 004e 803A      		cpi r24,lo8(-96)
 103 0050 01F4      		brne .L2
 104               	.L4:
 127:../../tmk_core/common/bootmagic.c ****                       action.kind.id == ACT_LAYER_TAP ||
 128:../../tmk_core/common/bootmagic.c ****                       action.kind.id == ACT_LAYER_TAP_EXT) &&
 129:../../tmk_core/common/bootmagic.c ****                      action.key.code == code)) {
 105               		.loc 1 129 0
 106 0052 30E0      		ldi r19,0
 128:../../tmk_core/common/bootmagic.c ****                      action.key.code == code)) {
 107               		.loc 1 128 0
 108 0054 2C15      		cp r18,r12
 109 0056 3D05      		cpc r19,r13
 110 0058 01F4      		brne .L2
 111               	.LVL8:
 112               	.L3:
 130:../../tmk_core/common/bootmagic.c ****                     return true;
 113               		.loc 1 130 0
 114 005a 81E0      		ldi r24,lo8(1)
 115               	.LVL9:
 116 005c 00C0      		rjmp .L6
 117               	.L2:
 118               	.LVL10:
 119 005e 0F5F      		subi r16,-1
 120 0060 1F4F      		sbci r17,-1
 121               	.LVL11:
 122               	.LBE9:
 118:../../tmk_core/common/bootmagic.c ****             if (matrix_row & ((matrix_row_t)1<<c)) {
 123               		.loc 1 118 0 discriminator 2
 124 0062 0530      		cpi r16,5
 125 0064 1105      		cpc r17,__zero_reg__
 126 0066 01F4      		brne .L7
 127               	.LBE8:
 128               	.LBE7:
 116:../../tmk_core/common/bootmagic.c ****         matrix_row_t matrix_row = matrix_get_row(r);
 129               		.loc 1 116 0 discriminator 2
 130 0068 CF5F      		subi r28,lo8(-(1))
 131               	.LVL12:
 132 006a C530      		cpi r28,lo8(5)
 133 006c 01F4      		brne .L8
 134               	.LBE6:
 131:../../tmk_core/common/bootmagic.c ****                 }
 132:../../tmk_core/common/bootmagic.c ****             }
 133:../../tmk_core/common/bootmagic.c ****         }
 134:../../tmk_core/common/bootmagic.c ****     }
 135:../../tmk_core/common/bootmagic.c ****     return false;
 135               		.loc 1 135 0
 136 006e 80E0      		ldi r24,0
 137               	.LVL13:
 138               	.L6:
 139               	/* epilogue start */
 136:../../tmk_core/common/bootmagic.c **** }
 140               		.loc 1 136 0
 141 0070 CF91      		pop r28
 142               	.LVL14:
 143 0072 1F91      		pop r17
 144 0074 0F91      		pop r16
 145 0076 FF90      		pop r15
 146 0078 EF90      		pop r14
 147               	.LVL15:
 148 007a DF90      		pop r13
 149 007c CF90      		pop r12
 150               	.LVL16:
 151 007e 0895      		ret
 152               		.cfi_endproc
 153               	.LFE104:
 155               		.section	.text.bootmagic_scan_key,"ax",@progbits
 156               	.global	bootmagic_scan_key
 158               	bootmagic_scan_key:
 159               	.LFB105:
 137:../../tmk_core/common/bootmagic.c **** 
 138:../../tmk_core/common/bootmagic.c **** bool bootmagic_scan_key(uint16_t code)
 139:../../tmk_core/common/bootmagic.c **** {
 160               		.loc 1 139 0
 161               		.cfi_startproc
 162               	.LVL17:
 163 0000 CF93      		push r28
 164               	.LCFI7:
 165               		.cfi_def_cfa_offset 3
 166               		.cfi_offset 28, -2
 167 0002 DF93      		push r29
 168               	.LCFI8:
 169               		.cfi_def_cfa_offset 4
 170               		.cfi_offset 29, -3
 171               	/* prologue: function */
 172               	/* frame size = 0 */
 173               	/* stack size = 2 */
 174               	.L__stack_usage = 2
 175 0004 EC01      		movw r28,r24
 140:../../tmk_core/common/bootmagic.c ****     if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;
 176               		.loc 1 140 0
 177 0006 8CE2      		ldi r24,lo8(44)
 178 0008 90E0      		ldi r25,0
 179               	.LVL18:
 180 000a 0E94 0000 		call scan_key
 181               	.LVL19:
 182 000e 8823      		tst r24
 183 0010 01F0      		breq .L19
 141:../../tmk_core/common/bootmagic.c **** 
 142:../../tmk_core/common/bootmagic.c ****     return scan_key(code);
 184               		.loc 1 142 0
 185 0012 CE01      		movw r24,r28
 186               	/* epilogue start */
 143:../../tmk_core/common/bootmagic.c **** }
 187               		.loc 1 143 0
 188 0014 DF91      		pop r29
 189 0016 CF91      		pop r28
 190               	.LVL20:
 142:../../tmk_core/common/bootmagic.c **** }
 191               		.loc 1 142 0
 192 0018 0C94 0000 		jmp scan_key
 193               	.LVL21:
 194               	.L19:
 195               		.loc 1 143 0
 196 001c 80E0      		ldi r24,0
 197               	/* epilogue start */
 198 001e DF91      		pop r29
 199 0020 CF91      		pop r28
 200               	.LVL22:
 201 0022 0895      		ret
 202               		.cfi_endproc
 203               	.LFE105:
 205               		.section	.text.bootmagic,"ax",@progbits
 206               	.global	bootmagic
 208               	bootmagic:
 209               	.LFB103:
  18:../../tmk_core/common/bootmagic.c ****     /* check signature */
 210               		.loc 1 18 0
 211               		.cfi_startproc
 212 0000 CF93      		push r28
 213               	.LCFI9:
 214               		.cfi_def_cfa_offset 3
 215               		.cfi_offset 28, -2
 216               	/* prologue: function */
 217               	/* frame size = 0 */
 218               	/* stack size = 1 */
 219               	.L__stack_usage = 1
  20:../../tmk_core/common/bootmagic.c ****         eeconfig_init();
 220               		.loc 1 20 0
 221 0002 0E94 0000 		call eeconfig_is_enabled
 222               	.LVL23:
 223 0006 8111      		cpse r24,__zero_reg__
 224 0008 00C0      		rjmp .L21
  21:../../tmk_core/common/bootmagic.c ****     }
 225               		.loc 1 21 0
 226 000a 0E94 0000 		call eeconfig_init
 227               	.LVL24:
 228               	.L21:
  25:../../tmk_core/common/bootmagic.c ****     uint8_t scan = 100;
 229               		.loc 1 25 0
 230 000e 80E0      		ldi r24,lo8(__c.4745)
 231 0010 90E0      		ldi r25,hi8(__c.4745)
 232 0012 0E94 0000 		call xputs
 233               	.LVL25:
  27:../../tmk_core/common/bootmagic.c ****     print("done.\n");
 234               		.loc 1 27 0
 235 0016 C5E6      		ldi r28,lo8(101)
 236               	.LVL26:
 237               	.L22:
 238 0018 C150      		subi r28,lo8(-(-1))
 239               	.LVL27:
  27:../../tmk_core/common/bootmagic.c ****     print("done.\n");
 240               		.loc 1 27 0 is_stmt 0 discriminator 1
 241 001a 01F0      		breq .L102
 242               	.LVL28:
  27:../../tmk_core/common/bootmagic.c ****     print("done.\n");
 243               		.loc 1 27 0 discriminator 2
 244 001c 0E94 0000 		call matrix_scan
 245               	.LVL29:
 246               	.LBB10:
 247               	.LBB11:
 248               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/avr/include/util/delay.h **** #endif
  41:/usr/lib/avr/include/util/delay.h **** 
  42:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/avr/include/util/delay.h **** 
  46:/usr/lib/avr/include/util/delay.h **** /** \file */
  47:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/avr/include/util/delay.h ****     \code
  49:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/avr/include/util/delay.h ****     \endcode
  53:/usr/lib/avr/include/util/delay.h **** 
  54:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/avr/include/util/delay.h ****     used.
  58:/usr/lib/avr/include/util/delay.h **** 
  59:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/avr/include/util/delay.h **** 
  68:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/avr/include/util/delay.h **** 
  77:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/avr/include/util/delay.h **** 
  81:/usr/lib/avr/include/util/delay.h **** */
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/avr/include/util/delay.h **** #endif
  87:/usr/lib/avr/include/util/delay.h **** 
  88:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/avr/include/util/delay.h **** #endif
  93:/usr/lib/avr/include/util/delay.h **** 
  94:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/avr/include/util/delay.h **** #endif
  97:/usr/lib/avr/include/util/delay.h **** 
  98:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/avr/include/util/delay.h **** #endif
 103:/usr/lib/avr/include/util/delay.h **** 
 104:/usr/lib/avr/include/util/delay.h **** /**
 105:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/avr/include/util/delay.h **** 
 107:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/avr/include/util/delay.h **** 
 109:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/avr/include/util/delay.h **** 
 112:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/avr/include/util/delay.h **** 
 114:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/avr/include/util/delay.h **** 
 120:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/avr/include/util/delay.h **** 
 125:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/avr/include/util/delay.h **** 
 132:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/avr/include/util/delay.h **** 
 140:/usr/lib/avr/include/util/delay.h ****  */
 141:/usr/lib/avr/include/util/delay.h **** void
 142:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/avr/include/util/delay.h **** {
 144:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/lib/avr/include/util/delay.h **** 
 155:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/lib/avr/include/util/delay.h **** 
 158:/usr/lib/avr/include/util/delay.h **** 	#else
 159:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 160:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/lib/avr/include/util/delay.h **** 	#endif
 162:/usr/lib/avr/include/util/delay.h **** 
 163:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 249               		.loc 2 163 0 is_stmt 1 discriminator 2
 250 0020 8FE3      		ldi r24,lo8(-25537)
 251 0022 9CE9      		ldi r25,hi8(-25537)
 252 0024 0197      	1:	sbiw r24,1
 253 0026 01F4      		brne 1b
 254 0028 00C0      		rjmp .
 255 002a 0000      		nop
 256 002c 00C0      		rjmp .L22
 257               	.LVL30:
 258               	.L102:
 259               	.LBE11:
 260               	.LBE10:
  28:../../tmk_core/common/bootmagic.c **** 
 261               		.loc 1 28 0
 262 002e 80E0      		ldi r24,lo8(__c.4751)
 263 0030 90E0      		ldi r25,hi8(__c.4751)
 264 0032 0E94 0000 		call xputs
 265               	.LVL31:
  31:../../tmk_core/common/bootmagic.c ****         return;
 266               		.loc 1 31 0
 267 0036 89E2      		ldi r24,lo8(41)
 268 0038 90E0      		ldi r25,0
 269 003a 0E94 0000 		call bootmagic_scan_key
 270               	.LVL32:
 271 003e 8111      		cpse r24,__zero_reg__
 272 0040 00C0      		rjmp .L20
  36:../../tmk_core/common/bootmagic.c ****         eeconfig_init();
 273               		.loc 1 36 0
 274 0042 8AE2      		ldi r24,lo8(42)
 275 0044 90E0      		ldi r25,0
 276 0046 0E94 0000 		call bootmagic_scan_key
 277               	.LVL33:
 278 004a 8111      		cpse r24,__zero_reg__
  37:../../tmk_core/common/bootmagic.c ****     }
 279               		.loc 1 37 0
 280 004c 0E94 0000 		call eeconfig_init
 281               	.LVL34:
 282               	.L25:
  41:../../tmk_core/common/bootmagic.c ****         bootloader_jump();
 283               		.loc 1 41 0
 284 0050 85E0      		ldi r24,lo8(5)
 285 0052 90E0      		ldi r25,0
 286 0054 0E94 0000 		call bootmagic_scan_key
 287               	.LVL35:
 288 0058 8111      		cpse r24,__zero_reg__
  42:../../tmk_core/common/bootmagic.c ****     }
 289               		.loc 1 42 0
 290 005a 0E94 0000 		call bootloader_jump
 291               	.LVL36:
 292               	.L26:
  46:../../tmk_core/common/bootmagic.c **** 
 293               		.loc 1 46 0
 294 005e 0E94 0000 		call hook_bootmagic
 295               	.LVL37:
  49:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
 296               		.loc 1 49 0
 297 0062 0E94 0000 		call eeconfig_read_debug
 298               	.LVL38:
 299 0066 8093 0000 		sts debug_config,r24
  50:../../tmk_core/common/bootmagic.c ****         if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
 300               		.loc 1 50 0
 301 006a 87E0      		ldi r24,lo8(7)
 302 006c 90E0      		ldi r25,0
 303 006e 0E94 0000 		call bootmagic_scan_key
 304               	.LVL39:
 305 0072 8823      		tst r24
 306 0074 01F0      		breq .L27
  51:../../tmk_core/common/bootmagic.c ****             debug_config.matrix = !debug_config.matrix;
 307               		.loc 1 51 0
 308 0076 8BE1      		ldi r24,lo8(27)
 309 0078 90E0      		ldi r25,0
 310 007a 0E94 0000 		call bootmagic_scan_key
 311               	.LVL40:
 312 007e 8823      		tst r24
 313 0080 01F0      		breq .L28
  52:../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
 314               		.loc 1 52 0
 315 0082 8091 0000 		lds r24,debug_config
 316 0086 81FB      		bst r24,1
 317 0088 2227      		clr r18
 318 008a 20F9      		bld r18,0
 319 008c 91E0      		ldi r25,lo8(1)
 320 008e 9227      		eor r25,r18
 321 0090 90FB      		bst r25,0
 322 0092 81F9      		bld r24,1
 323 0094 00C0      		rjmp .L99
 324               	.L28:
  53:../../tmk_core/common/bootmagic.c ****             debug_config.keyboard = !debug_config.keyboard;
 325               		.loc 1 53 0
 326 0096 8EE0      		ldi r24,lo8(14)
 327 0098 90E0      		ldi r25,0
 328 009a 0E94 0000 		call bootmagic_scan_key
 329               	.LVL41:
 330 009e 8823      		tst r24
 331 00a0 01F0      		breq .L29
  54:../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
 332               		.loc 1 54 0
 333 00a2 8091 0000 		lds r24,debug_config
 334 00a6 82FB      		bst r24,2
 335 00a8 2227      		clr r18
 336 00aa 20F9      		bld r18,0
 337 00ac 91E0      		ldi r25,lo8(1)
 338 00ae 9227      		eor r25,r18
 339 00b0 90FB      		bst r25,0
 340 00b2 82F9      		bld r24,2
 341               	.L99:
 342 00b4 8093 0000 		sts debug_config,r24
 343 00b8 00C0      		rjmp .L27
 344               	.L29:
  55:../../tmk_core/common/bootmagic.c ****             debug_config.mouse = !debug_config.mouse;
 345               		.loc 1 55 0
 346 00ba 80E1      		ldi r24,lo8(16)
 347 00bc 90E0      		ldi r25,0
 348 00be 0E94 0000 		call bootmagic_scan_key
 349               	.LVL42:
 350 00c2 9091 0000 		lds r25,debug_config
 351 00c6 8823      		tst r24
 352 00c8 01F0      		breq .L30
  56:../../tmk_core/common/bootmagic.c ****         } else {
 353               		.loc 1 56 0
 354 00ca 93FB      		bst r25,3
 355 00cc 2227      		clr r18
 356 00ce 20F9      		bld r18,0
 357 00d0 81E0      		ldi r24,lo8(1)
 358 00d2 8227      		eor r24,r18
 359 00d4 80FB      		bst r24,0
 360 00d6 93F9      		bld r25,3
 361 00d8 00C0      		rjmp .L100
 362               	.L30:
  58:../../tmk_core/common/bootmagic.c ****         }
 363               		.loc 1 58 0
 364 00da 892F      		mov r24,r25
 365 00dc 8095      		com r24
 366 00de 80FB      		bst r24,0
 367 00e0 90F9      		bld r25,0
 368               	.L100:
 369 00e2 9093 0000 		sts debug_config,r25
 370               	.L27:
  61:../../tmk_core/common/bootmagic.c **** 
 371               		.loc 1 61 0
 372 00e6 8091 0000 		lds r24,debug_config
 373 00ea 0E94 0000 		call eeconfig_write_debug
 374               	.LVL43:
  64:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
 375               		.loc 1 64 0
 376 00ee 0E94 0000 		call eeconfig_read_keymap
 377               	.LVL44:
 378 00f2 8093 0000 		sts keymap_config,r24
  65:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
 379               		.loc 1 65 0
 380 00f6 80EE      		ldi r24,lo8(-32)
 381 00f8 90E0      		ldi r25,0
 382 00fa 0E94 0000 		call bootmagic_scan_key
 383               	.LVL45:
 384 00fe 8823      		tst r24
 385 0100 01F0      		breq .L31
  66:../../tmk_core/common/bootmagic.c ****     }
 386               		.loc 1 66 0
 387 0102 8091 0000 		lds r24,keymap_config
 388 0106 982F      		mov r25,r24
 389 0108 9095      		com r25
 390 010a 90FB      		bst r25,0
 391 010c 80F9      		bld r24,0
 392 010e 8093 0000 		sts keymap_config,r24
 393               	.L31:
  68:../../tmk_core/common/bootmagic.c ****         keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
 394               		.loc 1 68 0
 395 0112 89E3      		ldi r24,lo8(57)
 396 0114 90E0      		ldi r25,0
 397 0116 0E94 0000 		call bootmagic_scan_key
 398               	.LVL46:
 399 011a 8823      		tst r24
 400 011c 01F0      		breq .L32
  69:../../tmk_core/common/bootmagic.c ****     }
 401               		.loc 1 69 0
 402 011e 8091 0000 		lds r24,keymap_config
 403 0122 81FB      		bst r24,1
 404 0124 2227      		clr r18
 405 0126 20F9      		bld r18,0
 406 0128 91E0      		ldi r25,lo8(1)
 407 012a 9227      		eor r25,r18
 408 012c 90FB      		bst r25,0
 409 012e 81F9      		bld r24,1
 410 0130 8093 0000 		sts keymap_config,r24
 411               	.L32:
  71:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
 412               		.loc 1 71 0
 413 0134 82EE      		ldi r24,lo8(-30)
 414 0136 90E0      		ldi r25,0
 415 0138 0E94 0000 		call bootmagic_scan_key
 416               	.LVL47:
 417 013c 8823      		tst r24
 418 013e 01F0      		breq .L33
  72:../../tmk_core/common/bootmagic.c ****     }
 419               		.loc 1 72 0
 420 0140 8091 0000 		lds r24,keymap_config
 421 0144 82FB      		bst r24,2
 422 0146 2227      		clr r18
 423 0148 20F9      		bld r18,0
 424 014a 91E0      		ldi r25,lo8(1)
 425 014c 9227      		eor r25,r18
 426 014e 90FB      		bst r25,0
 427 0150 82F9      		bld r24,2
 428 0152 8093 0000 		sts keymap_config,r24
 429               	.L33:
  74:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
 430               		.loc 1 74 0
 431 0156 86EE      		ldi r24,lo8(-26)
 432 0158 90E0      		ldi r25,0
 433 015a 0E94 0000 		call bootmagic_scan_key
 434               	.LVL48:
 435 015e 8823      		tst r24
 436 0160 01F0      		breq .L34
  75:../../tmk_core/common/bootmagic.c ****     }
 437               		.loc 1 75 0
 438 0162 8091 0000 		lds r24,keymap_config
 439 0166 83FB      		bst r24,3
 440 0168 2227      		clr r18
 441 016a 20F9      		bld r18,0
 442 016c 91E0      		ldi r25,lo8(1)
 443 016e 9227      		eor r25,r18
 444 0170 90FB      		bst r25,0
 445 0172 83F9      		bld r24,3
 446 0174 8093 0000 		sts keymap_config,r24
 447               	.L34:
  77:../../tmk_core/common/bootmagic.c ****         keymap_config.no_gui = !keymap_config.no_gui;
 448               		.loc 1 77 0
 449 0178 83EE      		ldi r24,lo8(-29)
 450 017a 90E0      		ldi r25,0
 451 017c 0E94 0000 		call bootmagic_scan_key
 452               	.LVL49:
 453 0180 8823      		tst r24
 454 0182 01F0      		breq .L35
  78:../../tmk_core/common/bootmagic.c ****     }
 455               		.loc 1 78 0
 456 0184 8091 0000 		lds r24,keymap_config
 457 0188 84FB      		bst r24,4
 458 018a 2227      		clr r18
 459 018c 20F9      		bld r18,0
 460 018e 91E0      		ldi r25,lo8(1)
 461 0190 9227      		eor r25,r18
 462 0192 90FB      		bst r25,0
 463 0194 84F9      		bld r24,4
 464 0196 8093 0000 		sts keymap_config,r24
 465               	.L35:
  80:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
 466               		.loc 1 80 0
 467 019a 85E3      		ldi r24,lo8(53)
 468 019c 90E0      		ldi r25,0
 469 019e 0E94 0000 		call bootmagic_scan_key
 470               	.LVL50:
 471 01a2 8823      		tst r24
 472 01a4 01F0      		breq .L36
  81:../../tmk_core/common/bootmagic.c ****     }
 473               		.loc 1 81 0
 474 01a6 8091 0000 		lds r24,keymap_config
 475 01aa 85FB      		bst r24,5
 476 01ac 2227      		clr r18
 477 01ae 20F9      		bld r18,0
 478 01b0 91E0      		ldi r25,lo8(1)
 479 01b2 9227      		eor r25,r18
 480 01b4 90FB      		bst r25,0
 481 01b6 85F9      		bld r24,5
 482 01b8 8093 0000 		sts keymap_config,r24
 483               	.L36:
  83:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
 484               		.loc 1 83 0
 485 01bc 81E3      		ldi r24,lo8(49)
 486 01be 90E0      		ldi r25,0
 487 01c0 0E94 0000 		call bootmagic_scan_key
 488               	.LVL51:
 489 01c4 8823      		tst r24
 490 01c6 01F0      		breq .L37
  84:../../tmk_core/common/bootmagic.c ****     }
 491               		.loc 1 84 0
 492 01c8 8091 0000 		lds r24,keymap_config
 493 01cc 86FB      		bst r24,6
 494 01ce 2227      		clr r18
 495 01d0 20F9      		bld r18,0
 496 01d2 91E0      		ldi r25,lo8(1)
 497 01d4 9227      		eor r25,r18
 498 01d6 90FB      		bst r25,0
 499 01d8 86F9      		bld r24,6
 500 01da 8093 0000 		sts keymap_config,r24
 501               	.L37:
  86:../../tmk_core/common/bootmagic.c ****         keymap_config.nkro = !keymap_config.nkro;
 502               		.loc 1 86 0
 503 01de 81E1      		ldi r24,lo8(17)
 504 01e0 90E0      		ldi r25,0
 505 01e2 0E94 0000 		call bootmagic_scan_key
 506               	.LVL52:
 507 01e6 8823      		tst r24
 508 01e8 01F0      		breq .L38
  87:../../tmk_core/common/bootmagic.c ****     }
 509               		.loc 1 87 0
 510 01ea 8091 0000 		lds r24,keymap_config
 511 01ee 87FB      		bst r24,7
 512 01f0 2227      		clr r18
 513 01f2 20F9      		bld r18,0
 514 01f4 91E0      		ldi r25,lo8(1)
 515 01f6 9227      		eor r25,r18
 516 01f8 90FB      		bst r25,0
 517 01fa 87F9      		bld r24,7
 518 01fc 8093 0000 		sts keymap_config,r24
 519               	.L38:
  89:../../tmk_core/common/bootmagic.c **** 
 520               		.loc 1 89 0
 521 0200 8091 0000 		lds r24,keymap_config
 522 0204 0E94 0000 		call eeconfig_write_keymap
 523               	.LVL53:
  92:../../tmk_core/common/bootmagic.c **** #endif
 524               		.loc 1 92 0
 525 0208 8091 0000 		lds r24,keymap_config
 526 020c 87FB      		bst r24,7
 527 020e 8827      		clr r24
 528 0210 80F9      		bld r24,0
 529 0212 8093 0000 		sts keyboard_nkro,r24
 530               	.LVL54:
  97:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
 531               		.loc 1 97 0
 532 0216 87E2      		ldi r24,lo8(39)
 533 0218 90E0      		ldi r25,0
 534 021a 0E94 0000 		call bootmagic_scan_key
 535               	.LVL55:
 536 021e C82F      		mov r28,r24
 537               	.LVL56:
  98:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
 538               		.loc 1 98 0
 539 0220 8EE1      		ldi r24,lo8(30)
 540 0222 90E0      		ldi r25,0
 541               	.LVL57:
 542 0224 0E94 0000 		call bootmagic_scan_key
 543               	.LVL58:
 544 0228 8111      		cpse r24,__zero_reg__
  98:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
 545               		.loc 1 98 0 is_stmt 0 discriminator 1
 546 022a C260      		ori r28,lo8(2)
 547               	.LVL59:
 548               	.L39:
  99:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
 549               		.loc 1 99 0 is_stmt 1
 550 022c 8FE1      		ldi r24,lo8(31)
 551 022e 90E0      		ldi r25,0
 552 0230 0E94 0000 		call bootmagic_scan_key
 553               	.LVL60:
 554 0234 8111      		cpse r24,__zero_reg__
  99:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
 555               		.loc 1 99 0 is_stmt 0 discriminator 1
 556 0236 C460      		ori r28,lo8(4)
 557               	.LVL61:
 558               	.L40:
 100:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
 559               		.loc 1 100 0 is_stmt 1
 560 0238 80E2      		ldi r24,lo8(32)
 561 023a 90E0      		ldi r25,0
 562 023c 0E94 0000 		call bootmagic_scan_key
 563               	.LVL62:
 564 0240 8111      		cpse r24,__zero_reg__
 100:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
 565               		.loc 1 100 0 is_stmt 0 discriminator 1
 566 0242 C860      		ori r28,lo8(8)
 567               	.LVL63:
 568               	.L41:
 101:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
 569               		.loc 1 101 0 is_stmt 1
 570 0244 81E2      		ldi r24,lo8(33)
 571 0246 90E0      		ldi r25,0
 572 0248 0E94 0000 		call bootmagic_scan_key
 573               	.LVL64:
 574 024c 8111      		cpse r24,__zero_reg__
 101:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
 575               		.loc 1 101 0 is_stmt 0 discriminator 1
 576 024e C061      		ori r28,lo8(16)
 577               	.LVL65:
 578               	.L42:
 102:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
 579               		.loc 1 102 0 is_stmt 1
 580 0250 82E2      		ldi r24,lo8(34)
 581 0252 90E0      		ldi r25,0
 582 0254 0E94 0000 		call bootmagic_scan_key
 583               	.LVL66:
 584 0258 8111      		cpse r24,__zero_reg__
 102:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
 585               		.loc 1 102 0 is_stmt 0 discriminator 1
 586 025a C062      		ori r28,lo8(32)
 587               	.LVL67:
 588               	.L43:
 103:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
 589               		.loc 1 103 0 is_stmt 1
 590 025c 83E2      		ldi r24,lo8(35)
 591 025e 90E0      		ldi r25,0
 592 0260 0E94 0000 		call bootmagic_scan_key
 593               	.LVL68:
 594 0264 8111      		cpse r24,__zero_reg__
 103:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
 595               		.loc 1 103 0 is_stmt 0 discriminator 1
 596 0266 C064      		ori r28,lo8(64)
 597               	.LVL69:
 598               	.L44:
 104:../../tmk_core/common/bootmagic.c ****     if (default_layer) {
 599               		.loc 1 104 0 is_stmt 1
 600 0268 84E2      		ldi r24,lo8(36)
 601 026a 90E0      		ldi r25,0
 602 026c 0E94 0000 		call bootmagic_scan_key
 603               	.LVL70:
 604 0270 8823      		tst r24
 605 0272 01F0      		breq .L45
 104:../../tmk_core/common/bootmagic.c ****     if (default_layer) {
 606               		.loc 1 104 0 is_stmt 0 discriminator 1
 607 0274 C068      		ori r28,lo8(-128)
 608               	.LVL71:
 609 0276 00C0      		rjmp .L46
 610               	.L45:
 105:../../tmk_core/common/bootmagic.c ****         eeconfig_write_default_layer(default_layer);
 611               		.loc 1 105 0 is_stmt 1
 612 0278 CC23      		tst r28
 613 027a 01F0      		breq .L47
 614               	.L46:
 106:../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 615               		.loc 1 106 0
 616 027c 8C2F      		mov r24,r28
 617 027e 0E94 0000 		call eeconfig_write_default_layer
 618               	.LVL72:
 107:../../tmk_core/common/bootmagic.c ****     } else {
 619               		.loc 1 107 0
 620 0282 6C2F      		mov r22,r28
 621 0284 00C0      		rjmp .L101
 622               	.L47:
 109:../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 623               		.loc 1 109 0
 624 0286 0E94 0000 		call eeconfig_read_default_layer
 625               	.LVL73:
 110:../../tmk_core/common/bootmagic.c ****     }
 626               		.loc 1 110 0
 627 028a 682F      		mov r22,r24
 628               	.LVL74:
 629               	.L101:
 630 028c 70E0      		ldi r23,0
 631 028e 80E0      		ldi r24,0
 632 0290 90E0      		ldi r25,0
 633               	/* epilogue start */
 112:../../tmk_core/common/bootmagic.c **** 
 634               		.loc 1 112 0
 635 0292 CF91      		pop r28
 110:../../tmk_core/common/bootmagic.c ****     }
 636               		.loc 1 110 0
 637 0294 0C94 0000 		jmp default_layer_set
 638               	.LVL75:
 639               	.L20:
 640               	/* epilogue start */
 112:../../tmk_core/common/bootmagic.c **** 
 641               		.loc 1 112 0
 642 0298 CF91      		pop r28
 643               	.LVL76:
 644 029a 0895      		ret
 645               		.cfi_endproc
 646               	.LFE103:
 648               		.section	.progmem.data.__c.4751,"a",@progbits
 651               	__c.4751:
 652 0000 646F 6E65 		.string	"done.\n"
 652      2E0A 00
 653               		.section	.progmem.data.__c.4745,"a",@progbits
 656               	__c.4745:
 657 0000 626F 6F74 		.string	"bootmagic scan: ... "
 657      6D61 6769 
 657      6320 7363 
 657      616E 3A20 
 657      2E2E 2E20 
 658               		.comm	keymap_config,1,1
 659               		.text
 660               	.Letext0:
 661               		.file 3 "/usr/lib/avr/include/stdint.h"
 662               		.file 4 "../../tmk_core/common/matrix.h"
 663               		.file 5 "../../tmk_core/common/debug.h"
 664               		.file 6 "../../tmk_core/common/keyboard.h"
 665               		.file 7 "../../tmk_core/common/keycode.h"
 666               		.file 8 "../../tmk_core/common/action_code.h"
 667               		.file 9 "../../tmk_core/common/keymap.h"
 668               		.file 10 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 669               		.file 11 "../../tmk_core/common/host.h"
 670               		.file 12 "../../tmk_core/common/action.h"
 671               		.file 13 "../../tmk_core/common/eeconfig.h"
 672               		.file 14 "../../tmk_core/common/bootloader.h"
 673               		.file 15 "../../tmk_core/common/hook.h"
 674               		.file 16 "../../tmk_core/common/avr/xprintf.h"
 675               		.file 17 "../../tmk_core/common/action_layer.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 bootmagic.c
     /tmp/ccPVwd2w.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccPVwd2w.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccPVwd2w.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccPVwd2w.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccPVwd2w.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccPVwd2w.s:12     .text.scan_key:0000000000000000 scan_key
     /tmp/ccPVwd2w.s:158    .text.bootmagic_scan_key:0000000000000000 bootmagic_scan_key
     /tmp/ccPVwd2w.s:208    .text.bootmagic:0000000000000000 bootmagic
     /tmp/ccPVwd2w.s:656    .progmem.data.__c.4745:0000000000000000 __c.4745
     /tmp/ccPVwd2w.s:651    .progmem.data.__c.4751:0000000000000000 __c.4751
                            *COM*:0000000000000001 keymap_config

UNDEFINED SYMBOLS
matrix_get_row
action_for_key
eeconfig_is_enabled
eeconfig_init
xputs
matrix_scan
bootloader_jump
hook_bootmagic
eeconfig_read_debug
debug_config
eeconfig_write_debug
eeconfig_read_keymap
eeconfig_write_keymap
keyboard_nkro
eeconfig_write_default_layer
eeconfig_read_default_layer
default_layer_set
__do_clear_bss
